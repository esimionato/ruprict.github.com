<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress.com" created="2011-09-13 15:07"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>Fumbling Towards Geekstacy</title>
	<link>http://ruprict.net</link>
	<description>Ugh, I am so clumsy.</description>
	<pubDate>Tue, 06 Sep 2011 15:54:51 +0000</pubDate>
	<generator>http://wordpress.org/?v=MU</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>http://ruprict.net</wp:base_blog_url>
		<wp:category><wp:category_nicename>agile</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Agile]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>apple</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Apple]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>arcdeveloper</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ArcDeveloper]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>aspnet</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ASP.NET]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>castle</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Castle]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>continuous-integration</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Continuous Integration]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>flex</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Flex]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>javas</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[javas]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>javascript</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[javascript]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>mvc-aspnet</wp:category_nicename><wp:category_parent>ASP.NET</wp:category_parent><wp:cat_name><![CDATA[MVC]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>os</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[OS]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>recommendations</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Recommendations]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>ruby</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Ruby]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>wcf</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[WCF]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>windsor</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Windsor]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>books-recommendations</wp:category_nicename><wp:category_parent>Recommendations</wp:category_parent><wp:cat_name><![CDATA[books]]></wp:cat_name></wp:category>
			<wp:tag><wp:tag_slug>mt_keywords</wp:tag_slug><wp:tag_name><![CDATA[!$mt_keywords$!]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>net</wp:tag_slug><wp:tag_name><![CDATA[.NET]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>net-framework</wp:tag_slug><wp:tag_name><![CDATA[.NET Framework]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>add-new-tag</wp:tag_slug><wp:tag_name><![CDATA[Add new tag]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>agile</wp:tag_slug><wp:tag_name><![CDATA[Agile]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>apple-2</wp:tag_slug><wp:tag_name><![CDATA[apple]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>arcdeveloper</wp:tag_slug><wp:tag_name><![CDATA[ArcDeveloper]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>arcgis-server</wp:tag_slug><wp:tag_name><![CDATA[ArcGIS Server]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>arcgisserver</wp:tag_slug><wp:tag_name><![CDATA[ArcGISServer]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>aspnet</wp:tag_slug><wp:tag_name><![CDATA[ASP.NET]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>binsor</wp:tag_slug><wp:tag_name><![CDATA[Binsor]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>books</wp:tag_slug><wp:tag_name><![CDATA[Books]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>cairngorm-3</wp:tag_slug><wp:tag_name><![CDATA[Cairngorm 3]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>castle</wp:tag_slug><wp:tag_name><![CDATA[Castle]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>continuous-integration</wp:tag_slug><wp:tag_name><![CDATA[Continuous Integration]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>continuous-integrationre</wp:tag_slug><wp:tag_name><![CDATA[Continuous IntegrationRE]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>dojo</wp:tag_slug><wp:tag_name><![CDATA[Dojo]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>esri</wp:tag_slug><wp:tag_name><![CDATA[ESRI]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>flex</wp:tag_slug><wp:tag_name><![CDATA[Flex]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>hyper-v</wp:tag_slug><wp:tag_name><![CDATA[Hyper-V]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[javascript]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>json</wp:tag_slug><wp:tag_name><![CDATA[JSON]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>lbs</wp:tag_slug><wp:tag_name><![CDATA[lbs]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>monorail</wp:tag_slug><wp:tag_name><![CDATA[MonoRail]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>mvc</wp:tag_slug><wp:tag_name><![CDATA[mvc]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>nhibernate</wp:tag_slug><wp:tag_name><![CDATA[nhibernate]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>powershell</wp:tag_slug><wp:tag_name><![CDATA[powershell]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>remember-the-milk</wp:tag_slug><wp:tag_name><![CDATA[Remember The Milk]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>repository</wp:tag_slug><wp:tag_name><![CDATA[repository]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>rest</wp:tag_slug><wp:tag_name><![CDATA[REST]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>robotlegs</wp:tag_slug><wp:tag_name><![CDATA[robotlegs]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[Ruby]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>tools</wp:tag_slug><wp:tag_name><![CDATA[Tools]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>unit-of-work</wp:tag_slug><wp:tag_name><![CDATA[unit of work]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>unit-testing</wp:tag_slug><wp:tag_name><![CDATA[Unit testing]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>virtual-earth</wp:tag_slug><wp:tag_name><![CDATA[Virtual Earth]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>wcf</wp:tag_slug><wp:tag_name><![CDATA[WCF]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>windsor</wp:tag_slug><wp:tag_name><![CDATA[Windsor]]></wp:tag_name></wp:tag>
		
	<generator>http://wordpress.com/</generator>
<cloud domain='ruprict.net' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<image>
		<url>http://1.gravatar.com/blavatar/79a9d617340d150e9dfd7ae02445cfb7?s=96&#038;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</url>
		<title>Fumbling Towards Geekstacy</title>
		<link>http://ruprict.net</link>
	</image>
	<atom:link rel="search" type="application/opensearchdescription+xml" href="http://ruprict.net/osd.xml" title="Fumbling Towards Geekstacy" />
	<atom:link rel='hub' href='http://ruprict.net/?pushpress=hub'/>

		<item>
		<title>ArcGIS Server Javascript API Gotcha: Identify</title>
		<link>http://ruprict.net/?p=96</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=96</guid>
		<description></description>
		<content:encoded><![CDATA[I ran into an odd problem after I installed SP1 with a site using the ArcGIS Server javascript API.  Basically, the identify task broke in IE only.  All was well in <a class="zem_slink" title="Mozilla Firefox" rel="geolocation" href="http://maps.google.com/maps?ll=45.1238,-123.1138&amp;spn=1.0,1.0&amp;q=45.1238,-123.1138%20%28Mozilla%20Firefox%29&amp;t=h">Firefox</a>, so I was stumped, as I didn't receive any error messages.  So, I cranked open <a href="http://www.fiddlertool.com/fiddler/" target="_blank">Fidder </a>which revealed that the HTTP request was never happening.  Strange, I thought, so I copied the HTTP request that was working in Firefox from the <a class="zem_slink" title="Firebug (Firefox extension)" rel="wikipedia" href="http://en.wikipedia.org/wiki/Firebug_%28Firefox_extension%29">Firebug</a> Net tab and pasted it into the IE address bar, yet it wouldn't let me paste the whole URL.  So, the URL was too long...but why?  As it turns out the <a href="http://resources.esri.com/help/9.3/arcgisserver/apis/javascript/arcgis/help/jsapi_start.htm" target="_blank">IdentifyParameters </a>use a geometry, and that geometry has a spatialReference, which comes from the map.  The spatialReference we use is WKID 2913, which is one of the Oregon State Plane projected systems.   When the API sets this value on the javascript map object, it uses the Well-Known Text (WKT) version, which is a REALLY long string.  So, I overwrite the spatialReference on the geometry before executing the identify task with a light object that just has the WKID.  Like so:
<pre>        
funciton doIdentify(evt){</pre>
<div id="df" class="ArwC7c ckChnd">
<pre>
        this.taskParameters.mapExtent=this.map.extent;

        // have to do this in order to make this work in IE.

        // otherwise the AGS jsapi will post the WKT which makes the

URL too long.

        this.taskParameters.geometry.spatialReference={wkid:2913,toJson:function(){return

'{"wkid":"2913"}';}};

        if (this.options.notifier){

            this.options.notifier.ShowLoading("Identifying...",0);

        }

        esriConfig.defaults.io.postLength=100000;</pre>
<pre>
        dojo.forEach(this.map.services,dojo.hitch(this,function(serv){

            if (serv.Name.indexOf("Aerial")===-1){

                var task = new esri.tasks.IdentifyTask(serv.URL);

                this.taskParameters.height=this.map.height;

                this.taskParameters.width=this.map.width;</pre>
<pre></pre>
<pre>
task.execute(this.taskParameters,dojo.hitch(this,this._identifyResults));

            }

        }));

        dojo.publish("/esi/identify/lastservice");

    },</pre>
</div>
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/541f258e-de77-4bdc-a076-611ce3c749bd/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=541f258e-de77-4bdc-a076-611ce3c749bd" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2008-11-18 02:54:46</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1226958887]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://ruprict.net/?p=350</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<guid isPermaLink="false">http://ruprict.net/?p=350</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date>2011-09-13 16:05:53</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://ruprict.net/?p=349</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<guid isPermaLink="false">http://ruprict.net/?p=349</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date>2011-09-06 20:58:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>ArcDeveloper ArcGIS Server REST API is Breathing!</title>
		<link>http://ruprict.net/2008/03/05/arcdeveloper-rest-intro/</link>
		<pubDate>Wed, 05 Mar 2008 22:10:29 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag" nicename="arcgis-server"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag"><![CDATA[REST]]></category>

		<category domain="tag" nicename="rest"><![CDATA[REST]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/2008/03/05/hello-world/</guid>
		<description></description>
		<content:encoded><![CDATA[So, the <a href="http://www.spatiallyadjusted.com/2008/01/30/esris-web-adf-is-one-horrific-development-platform/">angst</a> around the ArcGIS Server Web ADF is well known and I shan't rehash it here (OK, just a little rehashing:  the ADF is a bloated sack of vomit) but, rather, I'll point you to the beginnings of an open source ArcGIS Server REST API (<a href="http://svn2.assembla.com/svn/arcdeveloper/ArcDeveloper.REST/">svn</a>) at ArcDeveloper.NET.  The project is very young (and always looking for contributors) and, in it's current state, has the following capabilities:
<ul>
	<li> You can query single features by id (must be OBJECTID, ugh)</li>
	<li>You can query features with a where clause</li>
	<li>You can query features with a bbox (AND a where clause, if you want)</li>
</ul>
In this post, I will walk through what it takes to set it up and point it at one of your ArcGIS Server services.
<h3>What You'll Need</h3>
Visual Studio 2008, implying .NET 3.5.  You will have to build the solution, as we haven't made an official release yet.

Optionally, I would have <a href="http://www.fiddler2.com/fiddler2/" target="_blank">Fiddler</a>, <a href="http://getfirebug.com" target="_blank">Firebug</a>, and <a href="http://www.codeplex.com/JsonViewerhttp://www.codeplex.com/JsonViewer" target="_blank">JSONViewer</a>.
<h3>Step 1: Get the source</h3>
Using <a href="http://tortoisesvn.tigris.org/">TortoiseSVN</a> (or the svn client of your choosing), perform a checkout of the trunk (http://svn2.assembla.com/svn/arcdeveloper/ArcDeveloper.REST/trunk/)
<h3>Step 2: Open the solution</h3>
In the "Product" directory, you'll find the VS2008 solution file.  Like, open it or something.  It consists of 5 projects, 2 of which are test projects.  The other projects are the core interfaces and services, with the last one being a web project to show how to publish the REST service with WCF and a demo web page.
<h3>Step 3: Build the solution</h3>
Uh, in VS2008, select "Build Solution..."
<h4>Step 4: Use Dave's Stuff</h4>
So Dave Bouwman, who I think is just the cat's pajamas, has the demo site using an ArcGIS Server map service that he has been generous enough to provide.  If you look in the ArcDeveloper.REST.Web project, you'll find a config directory.  Opening up the components.config file will show where the endpoint of the map services is specified.  Looks alot like:
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:8pt;color:black;overflow:scroll;">
<p style="margin:0;"><span style="color:blue;">&lt;</span><span style="color:#a31515;">component</span><span style="color:blue;"> </span><span style="color:red;">id</span><span style="color:blue;">=</span>"<span style="color:blue;">ags.service</span>"<span style="color:blue;"> </span><span style="color:red;">lifestyle</span><span style="color:blue;">=</span>"<span style="color:blue;">pooled</span>"<span style="color:blue;"> </span><span style="color:red;">initialPoolSize</span><span style="color:blue;">=</span>"<span style="color:blue;">2</span>"<span style="color:blue;"> </span><span style="color:red;">maxPoolSize</span><span style="color:blue;">=</span>"<span style="color:blue;">2</span>"<span style="color:blue;">   </span></p>
<p style="margin:0;"><span style="color:blue;">                       </span><span style="color:red;">service</span><span style="color:blue;">=</span>"<span style="color:blue;">ArcDeveloper.REST.Core.Interfaces.IRESTService, ArcDeveloper.REST.Core</span>"</p>
<p style="margin:0;"><span style="color:blue;">                       </span><span style="color:red;">type</span><span style="color:blue;">=</span>"<span style="color:blue;">ArcDeveloper.REST.ArcGIS.AGSMapService, ArcDeveloper.REST.ArcGIS</span>"<span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">   &lt;</span><span style="color:#a31515;">parameters</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">      </span><span style="color:#a31515;">&lt;name</span><span style="color:blue;">&gt;</span>TestService<span style="color:blue;">&lt;/</span><span style="color:#a31515;">name</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">      &lt;</span><span style="color:#a31515;">description</span><span style="color:blue;">&gt;</span>Base map<span style="color:blue;">&lt;/</span><span style="color:#a31515;">description</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">      &lt;</span><span style="color:#a31515;">connectionString</span><span style="color:blue;">&gt;</span>http://65.101.234.201/arcgis/services/gains/gains/MapServer<span style="color:blue;">&lt;/</span><span style="color:#a31515;">connectionString</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">   &lt;/</span><span style="color:#a31515;">parameters</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">&lt;/</span><span style="color:#a31515;">component</span><span style="color:blue;">&gt;</span></p>
</div>
Do you see the cool &lt;connectionString&gt; parameter?  That's Daves AGS service (I told you he was cool.)   Run the site (it uses the VS Dev server now) and click "Load Polygon".  You'll see a small polygon drawn over Yemen (erm, at least I think that is Yemen).  Change the ID and draw some more.

<a href="http://ruprict.files.wordpress.com/2008/03/croppercapture10.png" title="ArcDeveloper REST API Demo Page"><img src="http://ruprict.files.wordpress.com/2008/03/croppercapture10.thumbnail.png" alt="ArcDeveloper REST API Demo Page" /></a>

Here's what is happening:

A HTTP GET is issued to the local web service with a URI that looks alot like:
<pre style="overflow:scroll;"> http://localhost:xxxx/rest.svc/TestService/Flyways/10?g=true</pre>
Let's break down the URI, shall we?   Starting with rest.svc, that is the WCF endpoint for the REST service.  "TestService" points to our configuration (from above) file and tells the service which map we want to use.  "Flyways" is the name of a layer in Dave's service.  "10" is the id of the feature we want, and "g=true" tells the service to return the geometry (there are cases where you don't want that, b/c it can make the size of the response baloon pretty quickly.)  So, that is pretty RESTy, yes?

The response from that HTTP GET looks like:
<div class="netInfoResponseText netInfoText" style="border:thin dotted black;background:#cccccc none repeat scroll 0 50%;overflow:scroll;">
<pre>{  "type": "Feature","geometry": {"type": "Polygon",

"coordinates": [

[

[ 44.3231, 14.2555], [43.2827,13.6294],[ 43.285, 13.6503],        (...lots more coords...)     ]

},

"properties": {

"Ssp": "maculosus",

"Species": "Burhinus capensis",

"Shape_Length": "4.59630121045653",

"TSN": "0",

"extent": "42.9447173339071,13.6294196034485,44.3230947030963,15.0950604545328",

"SpeciesCod": "BURCA",

"WISDOM_SpeciesID": "557",

"OBJECTID": "10",

"Code": " ",

"Shape.area": "1.28930099595786"

}

}</pre>
</div>
Which is valid <a href="http://www.geojson.org" target="_blank">GeoJson</a>.  Neat, eh?

I know what you are saying.  "Glenn, why would I use this when ArcGIS Server 9.3 will have a REST API?? HMMM?"  Well, that is a great question.  The only answer I have is that you can use this now, contribute to it, and make the world a better place.  Also, you can learn about a lot of stuff, like REST, WCF, GeoJSON, AJAX, the <a href="http://www.castleproject.org" target="_blank">Castle Project </a>stuff, and much, much more.   Plus, there are some real brains on this project (I am not one of them) so you can sop up their wisdom as well.  Also, I heard a nasty rumor that the AGS REST API wasn't using GeoJSON, but a proprietary spatial JSON format, which is a bit disconcerting, if not totally expected.

In future posts I'll break down the ArcDeveloper REST API architecture, showing how you can write your own providers and formatters.  We still have a TON of work to do on it, but we're on our way.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2008-03-05 22:10:29</wp:post_date>
		<wp:post_date_gmt>2008-03-05 22:10:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arcdeveloper-rest-intro</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>About</title>
		<link>http://ruprict.net/about/</link>
		<pubDate>Wed, 05 Mar 2008 22:10:29 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false"></guid>
		<description></description>
		<content:encoded><![CDATA[I am a nerd living among NASCAR fans in Charlotte.  I have been working in GIS for about a decade, and with .NET since it's inception.  I have somewhere between 2 and 5 children and a wife that must've lost a bet.  If there is some reason you'd need to contact me, you can hit me <a href="mailto:glenn_goodrich@hotmail.com"> here. </a> I hope you find something useful or amusing or amusingly useful while you are here.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2008-03-05 22:10:29</wp:post_date>
		<wp:post_date_gmt>2008-03-05 22:10:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1224116906]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>457</wp:comment_id>
		<wp:comment_author><![CDATA[hyips]]></wp:comment_author>
		<wp:comment_author_email>Picchetti@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://libertyreserveos.com/</wp:comment_author_url>
		<wp:comment_author_IP>173.208.12.215</wp:comment_author_IP>
		<wp:comment_date>2011-09-08 05:20:54</wp:comment_date>
		<wp:comment_date_gmt>2011-09-08 00:20:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Appreciate it for sharing About  Fumbling Towards Geekstacy with us keep update bro love your article about About  Fumbling Towards Geekstacy .]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>456</wp:comment_id>
		<wp:comment_author><![CDATA[cut the rope cheats]]></wp:comment_author>
		<wp:comment_author_email>Providence@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://pandroidmarket.blogspot.com/2011/08/cut-rope-cut-rope-apk-or-cut-rope-game.html</wp:comment_author_url>
		<wp:comment_author_IP>173.208.12.215</wp:comment_author_IP>
		<wp:comment_date>2011-09-08 05:20:54</wp:comment_date>
		<wp:comment_date_gmt>2011-09-08 00:20:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Appreciate it for sharing About  Fumbling Towards Geekstacy with us keep update bro love your article about About  Fumbling Towards Geekstacy .]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>463</wp:comment_id>
		<wp:comment_author><![CDATA[birthday cards]]></wp:comment_author>
		<wp:comment_author_email>97352Ozog@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://ebirthdayquotes.blogspot.com/</wp:comment_author_url>
		<wp:comment_author_IP>173.208.66.214</wp:comment_author_IP>
		<wp:comment_date>2011-09-12 08:53:09</wp:comment_date>
		<wp:comment_date_gmt>2011-09-12 03:53:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I like Your Article about About  Fumbling Towards Geekstacy  Perfect just what I was looking  for! .]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>ArcDeveloper REST API Demo Page</title>
		<link>http://ruprict.net/2008/03/05/arcdeveloper-rest-intro/arcdeveloper-rest-api-demo-page/</link>
		<pubDate>Thu, 06 Mar 2008 14:21:54 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2008/03/croppercapture10.png</guid>
		<description></description>
		<content:encoded><![CDATA[Look at Yemen! (It's next to Africa and under Saudi Arabia)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2008-03-06 19:21:54</wp:post_date>
		<wp:post_date_gmt>2008-03-06 14:21:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arcdeveloper-rest-api-demo-page</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2008/03/croppercapture10.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/03/croppercapture10.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:933;s:6:"height";i:638;s:14:"hwstring_small";s:23:"height='87' width='128'";s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/03/croppercapture10.png";s:5:"thumb";s:30:"croppercapture10.thumbnail.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ArcDeveloper REST: U R I and I R U</title>
		<link>http://ruprict.net/2008/03/08/arcdeveloper-rest-u-r-i-and-i-r-u/</link>
		<pubDate>Sat, 08 Mar 2008 00:37:12 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[REST]]></category>

		<category domain="tag" nicename="rest"><![CDATA[REST]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[As I promised in my (first and) previous post, I am gonna quickly go over the very simple architecture of the ArcDeveloper REST API. This post covers how we expose our REST endpoint(s).

At a high level, we wanted to expose a single <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer" target="_blank">REST</a> endpoint that allowed the caller to specify the "service", "layer", and query parameters in order to get geographic features returned in a format, which is also specified by the caller.  So, attempting to be as RESTy as possible, the URI looks like:
<pre style="font-size:small;"> http://&lt;yourServer&gt;/rest.svc/service/layer/3?format=geojson</pre>
It's clear and easy and other URI endpoints are easy to deduce.  Yup, we are RESTing we the best of them.  Our main endpoint is the rest.svc, which is WCF's way of exposing a service endpoint.  The first question, then, we had to answer was how we would handle the URI routing.  If the map services are registered dynamically (using Castle Windsor, which is arguably the greatest piece of code ever written.  Ever.  Not that I am prone to hyperbole.  Oh, I'll cover the configuration in the next post) then we have to dissect the various pieces of the URI to:
<ol>
	<li>Get a hold of the service requested.</li>
	<li>Query the right layer</li>
	<li>Use the right query parameters.</li>
	<li>Grab the right formatter.</li>
</ol>
Luckily for us, .NET 3.5 had recently been released, incorporating some cool changes in <a href="http://msdn2.microsoft.com/en-us/library/ms731082.aspx" target="_blank">WCF</a>, the coolest one being the URITemplate (good background <a href="http://msdn2.microsoft.com/en-us/magazine/cc135976.aspx" target="_blank">here</a>).  The URITemplate allows us to define URI templates (duh) and map them to service methods (or OperationContracts, in WCF-speak) complete with the mapping of parameters of the method.  Let's see how we are using this now:
<div style="overflow:scroll;background:white none repeat scroll 0 50%;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"> [<span style="color:#2b91af;">OperationContract</span>]</p>
<p style="margin:0;">        [<span style="color:#2b91af;">WebGet</span>(UriTemplate=<span style="color:#a31515;">"{serviceName}/{featureType}/{featureId}?g={geom}"</span>,ResponseFormat=<span style="color:#2b91af;">WebMessageFormat</span>.Json)]</p>
<p style="margin:0;">        <span style="color:#2b91af;">Stream</span> GetSingleFeatureJSON(<span style="color:blue;">string</span> serviceName, <span style="color:blue;">string</span> featureType, <span style="color:blue;">string</span> featureId, <span style="color:blue;">bool</span> geom);</p>
</div>
You can see how the dealies in the "{}" get mapped to the method parameters.  Just to be complete, {serviceName} maps to the serviceName parameter, etc.  The "geom" parameter specifies whether or not you want all the coordinates returned, because sometimes that can be a LOT of data.  We also specify the response format here and the HTTP verb (WebGet== HTTP Get.  I'll give you 3 guesses how you specify HTTP POST.  Wrong. It's <a href="http://msdn2.microsoft.com/en-us/library/system.servicemodel.web.webinvokeattribute.aspx" target="_blank">WebInvoke</a>.)

So, I know what you are saying.  "WTF?  You have hard-coded the format INTO THE BLOODY METHOD NAME!   I am not reading any more of this tripe."  Well, that's your prerogative (Tangent:  I had NO idea that was how to spell that word.  No wonder Bobby Brown is on drugs) but know that I am adhering to the Last Responsible Minute (LRM) doctrine.  We only need (geo)JSON right now, meaning, no one has written any other formatters.  Once we have another format, we'll put in a "format" parameter, remove the ResponseFormat and life will be all good.  Weak excuse, you say?  Maybe.  Let's, uh, move on.

The URIs the project currently supports are:
<div style="border:thin dotted black;background:#cccccc none repeat scroll 0 50%;overflow:scroll;">
<pre>  http://yourserver/rest.svc/services</pre>
</div>
Will return information about all of the services that are available to be queried.
<div style="border:thin dotted black;background:#cccccc none repeat scroll 0 50%;overflow:scroll;">
<pre>  http://yourserver/rest.svc/serviceName/layerName/OBJECTID?g=true</pre>
</div>
Will return the feature corresponding to the OBJECTID value from the layer specified by "layerName" in the service configured as "serviceName".
<div style="border:thin dotted black;background:#cccccc none repeat scroll 0 50%;overflow:scroll;">
<pre>  http://yourserver/rest.svc/serviceName/layerName?query=whereClause&amp;bbox=xmin,ymin,xmax,ymax&amp;g=true</pre>
</div>
Will query layer named "layerName" in service configured as "serviceName" using the value in "whereClause" (like height&gt;100 or streetname='Main'  --  don't forget to <a href="http://www.asciitable.com/" target="_blank">escape</a> your querystrings....) inside the bounding box specified by xmin, ymin and xmax, ymax.

As always, g=true returns the full coordinates of each geometry.  Also, the serviceName corresponds to the name given in the Windsor configuration, NOT the name of the ArcGIS Server service.
In the next post (hopefully) I'll cover the service and its configuration, showing you how we leverage the total kick-assness of Windsor to make life easy.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2008-03-08 05:37:12</wp:post_date>
		<wp:post_date_gmt>2008-03-08 00:37:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arcdeveloper-rest-u-r-i-and-i-r-u</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:comment>
		<wp:comment_id>2</wp:comment_id>
		<wp:comment_author><![CDATA[Brian Flood]]></wp:comment_author>
		<wp:comment_author_email>bFlood@spatialdatalogic.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.spatialdatalogic.com/cs/blogs/brian_flood</wp:comment_author_url>
		<wp:comment_author_IP>12.144.53.5</wp:comment_author_IP>
		<wp:comment_date>2008-03-11 00:13:34</wp:comment_date>
		<wp:comment_date_gmt>2008-03-10 19:13:34</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[this is great stuff glen, keep up the good work]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>High Level Architecture of ArcDeveloper REST API</title>
		<link>http://ruprict.net/2008/03/11/arcdeveloper-rest-windsor-brings-the-party-that-rocks-the-body/high-level-architecture-of-arcdeveloper-rest-api/</link>
		<pubDate>Mon, 10 Mar 2008 21:11:50 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2008/03/croppercapture1.png</guid>
		<description></description>
		<content:encoded><![CDATA[Basically, we expose a WCF Service that implements IRESTServiceManager and contains Services and Formatters.  The client can request the service and formatter in the URI of the REST query.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2008-03-11 02:11:50</wp:post_date>
		<wp:post_date_gmt>2008-03-10 21:11:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>high-level-architecture-of-arcdeveloper-rest-api</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2008/03/croppercapture1.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/03/croppercapture1.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:490;s:6:"height";i:408;s:14:"hwstring_small";s:23:"height='96' width='115'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/03/croppercapture1.png";s:5:"thumb";s:29:"croppercapture1.thumbnail.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ArcDeveloper REST: Windsor Brings the Party That Rocks the Body</title>
		<link>http://ruprict.net/2008/03/11/arcdeveloper-rest-windsor-brings-the-party-that-rocks-the-body/</link>
		<pubDate>Mon, 10 Mar 2008 21:53:09 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[REST]]></category>

		<category domain="tag" nicename="rest"><![CDATA[REST]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[
<div style="border:thin solid #cccccc;background:#cccccc none repeat scroll 0 50%;color:#ffffff;"> NOTE:  <a href="http://blog.davebouwman.net/" target="_blank">Dave</a> has blogged about the REST API, including a <a href="http://blog.davebouwman.net/" target="_blank">demo</a> of it in action!  Check it out!</div>
In part III of my series on the ArcDeveloper REST API, I want to focus on how we use <a href="http://www.castleproject.org/container/index.html" target="_blank">Windsor </a>to configure the service.  The best way to to that is to take a step back and look at why Windsor exists.   Windsor is an <a href="http://www.martinfowler.com/articles/injection.html" target="_blank">Inversion of Control</a> (IoC) container that provides a robust Dependency Injection (DI) framework.  Both of those phrases have been blogged about by just about every human in existence, so if the Fowler link doesn't help, then hit Google.
<h3>Background</h3>
In a nutshell, when you have classes that depend on other classes (and, really, what project doesn't have that? Answer:  Maintenance nightmare projects) a good pattern to follow is to supply the dependencies as opposed to instantiating them from within the class.  The consummate example is:
<pre style="border:thin dotted black;background:#cccccc none repeat scroll 0 50%;font-size:small;">
public class ClassA{

  private ClassB _classB;

  public ClassA()

  {

    _classB=new ClassB();  //This is pure evil

  }

}</pre>
The above code violates so many design patterns and principles that I had to have my 7-year old actually type it (he is a TOTAL hacker) b/c I couldn't bring myself to do it.  A better way to do it is:
<pre style="border:thin dotted black;background:#cccccc none repeat scroll 0 50%;font-size:small;">
public class ClassA{

  private ClassB _classB;

  public ClassA(ClassB injectedClassB)

  {

    _classB=injectedClassB;  //This is sunshine and puppy dogs

  }

}</pre>
That code is an example of constructor injection, b/c the dependency must be provided to the constructor or the class cannot be instantiated.   There is also setter injection, where public properties are exposed and the dependencies are suppled there.   Both approaches have their pros and cons, and I am of the opinion that, if you are simply using DI in either form, you are WAY ahead of the game.

Before I leave the background, I would be remiss if I didn't point you to  the <a href="http://wiki.bittercoder.com/(X(1)S(dkrjik45cnpm25bavottak45))/Default.aspx?Page=ContainerTutorials&amp;AspxAutoDetectCookieSupport=1" target="_blank">Bitter Coder's Wiki,</a> where the best tutorials on Windsor live and party.
<h3>Great, So How'd Does the ArcDeveloper Rest Stuff Use Windsor?</h3>
Well, the Windsor container can use an external configuration section, say, you the web.config file.

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs20 \cf1 &amp;lt;\cf3 configSections\cf1 &amp;gt;\par ??\tab \tab &amp;lt;\cf3 section\cf1  \cf4 name\cf1 =\cf0 "\cf1 castle\cf0 "\cf1  \cf4 type\cf1 =\cf0 "\cf1 Castle.Windsor.Configuration.AppDomain.CastleSectionHandler, Castle.Windsor\cf0 "\cf1 /&amp;gt;\par ??\tab    &amp;lt;/\cf3 configSections\cf1 &amp;gt;} -->
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">    &lt;</span><span style="color:#a31515;">configSections</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">        &lt;</span><span style="color:#a31515;">section</span><span style="color:blue;"> </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">castle</span>"<span style="color:blue;"> </span><span style="color:red;">type</span><span style="color:blue;">=</span>"<span style="color:blue;">Castle.Windsor.Configuration.AppDomain.CastleSectionHandler, Castle.Windsor</span>"<span style="color:blue;">/&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">     &lt;/</span><span style="color:#a31515;">configSections</span><span style="color:blue;">&gt;</span></p>
</div>
Once that is defined, you have three major configuration areas that you can play with: facilities, properties, and components (NOTE:  You'll find a separate .config file for each of these sections in the web project of our REST stuff.)  Facilities are, basically, an extension to the Windsor container.  There are many existing facilities, but the easiest to grok is probably the LoggingFacility.  You register facilities on the container like so (from our facilities.config file):
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">&lt;</span><span style="color:#a31515;">facilities</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">    &lt;</span><span style="color:#a31515;">facility</span></p>
<p style="margin:0;"><span style="color:blue;">             </span><span style="color:red;">id</span><span style="color:blue;">=</span>"<span style="color:blue;">logging</span>"</p>
<p style="margin:0;"><span style="color:blue;">             </span><span style="color:red;">type</span><span style="color:blue;">=</span>"<span style="color:blue;">Castle.Facilities.Logging.LoggingFacility, Castle.Facilities.Logging</span>"</p>
<p style="margin:0;"><span style="color:blue;">             </span><span style="color:red;">loggingApi</span><span style="color:blue;">=</span>"<span style="color:blue;">log4net</span>"</p>
<p style="margin:0;"><span style="color:blue;">             </span><span style="color:red;">customLoggerFactory</span><span style="color:blue;">=</span>"<span style="color:blue;">Castle.Services.Logging.Log4netIntegration.Log4netLogger</span>"</p>
<p style="margin:0;"><span style="color:blue;">               /&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">    &lt;/</span><span style="color:#a31515;">facilities</span><span style="color:blue;">&gt;</span></p>
</div>
Here I have registered the Log4Net implemenation of the logging facility, which I could change to a different logging implementation by merely changing the "loggingApi" value (NOTE:  I omit the logging.config that is required to configure Log4Net as it's an, erm, implementation detail.)  Once defined, any components registered on the container that have an ILogger public property will automagically get an instance of my Log4Net logger.  That is just cool, man.
The rest of our time together will be spent working with components (we aren't currently using properties right now, but they rock and the tutorials cover them well.)  The ArcDeveloper REST API has services that provide the query functionality (like an ArcGIS Server provider) and formatters that take the results from the providers and transform them into the requested format.  So, this means that we can register any provider and any formatter we might want to use with Windsor, and then all we have to do is tell the RESTServiceManager (our web service implementation class) about them.    Here's a picture (not quite 1000 words worth, but maybe a quick fin's worth)

<a href="http://ruprict.files.wordpress.com/2008/03/croppercapture1.png" title="High Level Architecture of ArcDeveloper REST API"><img src="http://ruprict.files.wordpress.com/2008/03/croppercapture1.thumbnail.png" alt="High Level Architecture of ArcDeveloper REST API" /></a>

So, let's quickly register the ArcGIS Service provider, which is implemented in the AGSMapService class.

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs20 \cf1 &amp;lt;\cf3 component\cf1  \cf4 id\cf1 =\cf0 "\cf1 ags.service\cf0 "\cf1  \cf4 lifestyle\cf1 =\cf0 "\cf1 pooled\cf0 "\cf1  \cf4 initialPoolSize\cf1 =\cf0 "\cf1 2\cf0 "\cf1  \cf4 maxPoolSize\cf1 =\cf0 "\cf1 2\cf0 "\cf1    \par ??\tab \tab \tab \tab \tab    \cf4 service\cf1 =\cf0 "\cf1 ArcDeveloper.REST.Core.Interfaces.IRESTService, ArcDeveloper.REST.Core\cf0 "\par ??\cf1 \tab \tab \tab \tab \tab    \cf4 type\cf1 =\cf0 "\cf1 ArcDeveloper.REST.ArcGIS.AGSMapService, ArcDeveloper.REST.ArcGIS\cf0 "\cf1 &amp;gt;\par ??\tab \tab \tab &amp;lt;\cf3 parameters\cf1 &amp;gt;\par ??        &amp;lt;\cf3 name\cf1 &amp;gt;\cf0 TestService\cf1 &amp;lt;/\cf3 name\cf1 &amp;gt;\par ??\tab \tab \tab \tab &amp;lt;\cf3 description\cf1 &amp;gt;\cf0 Base map\cf1 &amp;lt;/\cf3 description\cf1 &amp;gt;\par ??\tab \tab \tab \tab &amp;lt;\cf3 connectionString\cf1 &amp;gt;\cf0 http://65.101.234.201/arcgis/services/gains/gains/MapServer\cf1 &amp;lt;/\cf3 connectionString\cf1 &amp;gt;\par ??\tab \tab \tab &amp;lt;/\cf3 parameters\cf1 &amp;gt;\par ??\par ??\tab \tab &amp;lt;/\cf3 component\cf1 &amp;gt;} -->
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">    &lt;</span><span style="color:#a31515;">component</span><span style="color:blue;"> </span><span style="color:red;">id</span><span style="color:blue;">=</span>"<span style="color:blue;">ags.service</span>"<span style="color:blue;"> </span><span style="color:red;">lifestyle</span><span style="color:blue;">=</span>"<span style="color:blue;">pooled</span>"<span style="color:blue;"> </span><span style="color:red;">initialPoolSize</span><span style="color:blue;">=</span>"<span style="color:blue;">2</span>"<span style="color:blue;"> </span><span style="color:red;">maxPoolSize</span><span style="color:blue;">=</span>"<span style="color:blue;">2</span>"<span style="color:blue;">   </span></p>
<p style="margin:0;"><span style="color:blue;">                       </span><span style="color:red;">service</span><span style="color:blue;">=</span>"<span style="color:blue;">ArcDeveloper.REST.Core.Interfaces.IRESTService, ArcDeveloper.REST.Core</span>"</p>
<p style="margin:0;"><span style="color:blue;">                       </span><span style="color:red;">type</span><span style="color:blue;">=</span>"<span style="color:blue;">ArcDeveloper.REST.ArcGIS.AGSMapService, ArcDeveloper.REST.ArcGIS</span>"<span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">  &lt;</span><span style="color:#a31515;">parameters</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">      &lt;</span><span style="color:#a31515;">name</span><span style="color:blue;">&gt;</span>TestService<span style="color:blue;">&lt;/</span><span style="color:#a31515;">name</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">      &lt;</span><span style="color:#a31515;">description</span><span style="color:blue;">&gt;</span>Base map<span style="color:blue;">&lt;/</span><span style="color:#a31515;">description</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">      &lt;</span><span style="color:#a31515;">connectionString</span><span style="color:blue;">&gt;</span>http://65.101.234.201/arcgis/services/gains/gains/MapServer<span style="color:blue;">&lt;/</span><span style="color:#a31515;">connectionString</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">    &lt;/</span><span style="color:#a31515;">parameters</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">&lt;/</span><span style="color:#a31515;">component</span><span style="color:blue;">&gt;</span></p>
</div>
There you go.  The AGSMapService class implements the IRESTService interface, and we provide the pertinent parameters.  The "name" parameter (value="TestService") will be what is provided in the URI in order to specify that we want to use this service.  The "connectionString" parameter is the URL of our ArcGIS Server Map Server object.   Look closely at the attributes of the component, and you will see that we are pooling 2 instances of the service, which allows us to connect on first request and keep the object around for other requests.  Since connecting to the server is a very expensive operation, we only have to live with it once.  Windsor does this all for you!  What do YOU do for Windsor?  HMMM?  That's what I thought.

Anyway, lets show the formatter:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs20 \cf1 &amp;lt;\cf3 component\cf1  \cf4 id\cf1 =\cf0 "\cf1 geojson.formatter\cf0 "\cf1  \cf4 lifestyle\cf1 =\cf0 "\cf1 transient\cf0 "\par ??\cf1 \tab \tab \tab \tab \tab    \cf4 service\cf1 =\cf0 "\cf1 ArcDeveloper.REST.Core.Interfaces.IFormatter, ArcDeveloper.REST.Core\cf0 "\par ??\cf1 \tab \tab \tab \tab \tab    \cf4 type\cf1 =\cf0 "\cf1 ArcDeveloper.REST.Core.Services.GeoJSONFormatter, ArcDeveloper.REST.Core\cf0 "\cf1 &amp;gt;\par ??\tab \tab \tab &amp;lt;\cf3 parameters\cf1 &amp;gt;\par ??\tab \tab \tab \tab &amp;lt;\cf3 name\cf1 &amp;gt;\cf0 geoJSON\cf1 &amp;lt;/\cf3 name\cf1 &amp;gt;\par ??\tab \tab \tab &amp;lt;/\cf3 parameters\cf1 &amp;gt;\par ??\tab \tab &amp;lt;/\cf3 component\cf1 &amp;gt;} -->
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">    &lt;</span><span style="color:#a31515;">component</span><span style="color:blue;"> </span><span style="color:red;">id</span><span style="color:blue;">=</span>"<span style="color:blue;">geojson.formatter</span>"<span style="color:blue;"> </span><span style="color:red;">lifestyle</span><span style="color:blue;">=</span>"<span style="color:blue;">transient</span>"</p>
<p style="margin:0;"><span style="color:blue;">                       </span><span style="color:red;">service</span><span style="color:blue;">=</span>"<span style="color:blue;">ArcDeveloper.REST.Core.Interfaces.IFormatter, ArcDeveloper.REST.Core</span>"</p>

<p style="margin:0;"><span style="color:blue;">                       </span><span style="color:red;">type</span><span style="color:blue;">=</span>"<span style="color:blue;">ArcDeveloper.REST.Core.Services.GeoJSONFormatter, ArcDeveloper.REST.Core</span>"<span style="color:blue;">&gt;
</span>
<p style="margin:0;"><span style="color:blue;">  &lt;</span><span style="color:#a31515;">parameters</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">    &lt;</span><span style="color:#a31515;">name</span><span style="color:blue;">&gt;</span>geoJSON<span style="color:blue;">&lt;/</span><span style="color:#a31515;">name</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">  &lt;/</span><span style="color:#a31515;">parameters</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">        &lt;/</span><span style="color:#a31515;">component</span><span style="color:blue;">&gt;</span></p>
</div>
So, our GeoJSONFormatter implements the IFormatter interface.  We name this one "geoJSON" which, whenever we write a second formatter, will be how the URI will refer to it when requesting the GeoJSON format.  Oh, and the lifestyle of this bad boy is "transient", meaning it's created on request and disposed after request.  This is not an expensive item, so that's how we roll.

Finally, let's take a look at the RESTServiceManager:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;\red0\green128\blue0;}??\fs20 \cf1 &amp;lt;\cf3 component\cf1  \cf4 id\cf1 =\cf0 "\cf1 rest.service\cf0 "\cf1  \cf4 lifestyle\cf1 =\cf0 "\cf1 singleton\cf0 "\cf1  \par ??\tab \tab \tab \tab \tab    \cf4 service\cf1 =\cf0 "\cf1 ArcDeveloper.REST.Core.Interfaces.IRESTServiceManager, ArcDeveloper.REST.Core\cf0 "\par ??\cf1 \tab \tab \tab \tab \tab    \cf4 type\cf1 =\cf0 "\cf1 ArcDeveloper.REST.Core.RESTServiceManager, ArcDeveloper.REST.Core\cf0 "\cf1 &amp;gt;\par ??\tab \tab \tab &amp;lt;\cf3 parameters\cf1 &amp;gt;\par ??\tab \tab \tab \tab &amp;lt;\cf3 services\cf1 &amp;gt;\par ??\tab \tab \tab \tab \tab &amp;lt;\cf3 list\cf1 &amp;gt;\par ??\tab \tab \tab \tab \tab \tab &amp;lt;\cf3 item\cf1 &amp;gt;\cf0 $\{ags.service\}\cf1 &amp;lt;/\cf3 item\cf1 &amp;gt;\par ??\tab \tab \tab \tab &amp;lt;!--\cf6 \tab &amp;lt;item&amp;gt;$\{other.service\}&amp;lt;/item&amp;gt;\cf1 --&amp;gt;\par ??\tab \tab \tab \tab \tab &amp;lt;/\cf3 list\cf1 &amp;gt;\tab \tab \tab \tab \par ??\tab \tab \tab \tab \tab \tab &amp;lt;/\cf3 services\cf1 &amp;gt;\par ??\tab \tab \tab \tab &amp;lt;\cf3 formatters\cf1 &amp;gt;\par ??\tab \tab \tab \tab \tab &amp;lt;\cf3 list\cf1 &amp;gt;\par ??\tab \tab \tab \tab \tab \tab &amp;lt;\cf3 item\cf1 &amp;gt;\par ??\cf0 \tab \tab \tab \tab \tab \tab \tab $\{geojson.formatter\}\par ??\cf1 \tab \tab \tab \tab \tab \tab &amp;lt;/\cf3 item\cf1 &amp;gt;\par ??\tab \tab \tab \tab \tab &amp;lt;/\cf3 list\cf1 &amp;gt;\par ??\tab \tab \tab \tab &amp;lt;/\cf3 formatters\cf1 &amp;gt;\par ??\tab \tab \tab  &amp;lt;/\cf3 parameters\cf1 &amp;gt;\par ??\tab \tab   &amp;lt;/\cf3 component\cf1 &amp;gt;} -->
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">&lt;</span><span style="color:#a31515;">component</span><span style="color:blue;"> </span><span style="color:red;">id</span><span style="color:blue;">=</span>"<span style="color:blue;">rest.service</span>"<span style="color:blue;"> </span><span style="color:red;">lifestyle</span><span style="color:blue;">=</span>"<span style="color:blue;">singleton</span>"<span style="color:blue;"> </span></p>
<p style="margin:0;"><span style="color:blue;">                       </span><span style="color:red;">service</span><span style="color:blue;">=</span>"<span style="color:blue;">ArcDeveloper.REST.Core.Interfaces.IRESTServiceManager, ArcDeveloper.REST.Core</span>"</p>
<p style="margin:0;"><span style="color:blue;">                       </span><span style="color:red;">type</span><span style="color:blue;">=</span>"<span style="color:blue;">ArcDeveloper.REST.Core.RESTServiceManager, ArcDeveloper.REST.Core</span>"<span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">  &lt;</span><span style="color:#a31515;">parameters</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">                    &lt;</span><span style="color:#a31515;">services</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">      &lt;</span><span style="color:#a31515;">list</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">       &lt;</span><span style="color:#a31515;">item</span><span style="color:blue;">&gt;</span>${ags.service}<span style="color:blue;">&lt;/</span><span style="color:#a31515;">item</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">  &lt;!--</span><span style="color:green;">    &lt;item&gt;${other.service}&lt;/item&gt;</span><span style="color:blue;">--&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">                         &lt;/</span><span style="color:#a31515;">list</span><span style="color:blue;">&gt;                </span></p>
<p style="margin:0;"><span style="color:blue;">                            &lt;/</span><span style="color:#a31515;">services</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">                    &lt;</span><span style="color:#a31515;">formatters</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">                          &lt;</span><span style="color:#a31515;">list</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">                                &lt;</span><span style="color:#a31515;">item</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;">            ${geojson.formatter}</p>
<p style="margin:0;"><span style="color:blue;">        &lt;/</span><span style="color:#a31515;">item</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">      &lt;/</span><span style="color:#a31515;">list</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">     &lt;/</span><span style="color:#a31515;">formatters</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">  &lt;/</span><span style="color:#a31515;">parameters</span><span style="color:blue;">&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">          &lt;/</span><span style="color:#a31515;">component</span><span style="color:blue;">&gt;</span></p>
</div>
You can see that our RESTServiceManager implements our IRESTServiceManager interface and we register our AGSMapService and GeoJSONFormatter with the service manager.  The "services" and "formatters" properties of the service manager are lists, so we can add more services and more formatters simply by registering them on the container and adding them as an &lt;item&gt; to the list.   Let me say it another way, just to drive the point home:  If you wanted to register another ArcGIS Service map service with the RESTServiceManager, you would register with Windsor (so, copy the "ags.service", give it a new id and change the &lt;connectionString&gt;) and then add an &lt;item&gt; to the &lt;services&gt; parameter with the component id (oh, you may have to restart your web app, as changes to the external config files do not kick off an app unload.  If you don't like it, pull all the config sections into web.config).  After that, you can issue REST queries against the map service.  It's just that easy.

One final caveat.  The IRESTServiceManager is not only our service manager, but it is also our WCF service contract.  When you host a WCF service in IIS, it is created by the WCF Service Host factory, which means there is no way to register it with the Windsor container.  That is bad, because if we can't register the service manager, then we can register the services, and pretty much we have a web service that does bugger all.  In order to get around this, the (man and legend) <a href="http://www.ayende.com" target="_blank">Ayende</a> wrote a component that will allow you to register your WCF services with Windsor.  The documentation for it is <a href="http://castleproject.org/container/facilities/trunk/wcf/index.html" target="_blank">here</a>, and is so eloquently written that I am stunned that I, er, I mean, the author didn't get at least a Pulitzer nomination.  The long and short of it is;

- Change the .svc file to use a custom ServiceFactory (from our rest.svc file)
<pre>&lt;%@ ServiceHost Service="rest.service"
 Factory="Castle.Facilities.WcfIntegration.WindsorServiceHostFactory, Castle.Facilities.WcfIntegration" %&gt; (GRRR....CopyAsHTML doesn't help me in .svc files)</pre>
- Instantiate the container at application start up, using the Global.Application_Start method (from our Global.asax.cs file)

<!--  -->
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:8pt;color:black;"></div>
<!-- {\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 protected\cf0  \cf1 void\cf0  Application_Start(\cf1 object\cf0  sender, \cf4 EventArgs\cf0  e)\par ??        \{\par ??            container = \cf1 new\cf0  \cf4 WindsorContainer\cf0 (\cf1 new\cf0  \cf4 XmlInterpreter\cf0 ());\par ??            \cf4 WindsorServiceHostFactory\cf0 .RegisterContainer(container.Kernel);\par ??            _log = container[\cf1 typeof\cf0 (\cf4 ILogger\cf0 )] \cf1 as\cf0  \cf4 ILogger\cf0 ;\par ??            _log.Info(\cf5 "Services app started successfully."\cf0 );\par ??\par ??        \}} -->
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">    protected</span> <span style="color:blue;">void</span> Application_Start(<span style="color:blue;">object</span> sender, <span style="color:#2b91af;">EventArgs</span> e)</p>
<p style="margin:0;">        {</p>
<p style="margin:0;">     container = <span style="color:blue;">new</span> <span style="color:#2b91af;">WindsorContainer</span>(<span style="color:blue;">new</span> <span style="color:#2b91af;">XmlInterpreter</span>());</p>
<p style="margin:0;">                <span style="color:#2b91af;">WindsorServiceHostFactory</span>.RegisterContainer(container.Kernel);</p>
<p style="margin:0;">     _log = container[<span style="color:blue;">typeof</span>(<span style="color:#2b91af;">ILogger</span>)] <span style="color:blue;">as</span> <span style="color:#2b91af;">ILogger</span>;</p>
<p style="margin:0;">                _log.Info(<span style="color:#a31515;">"Services app started successfully."</span>);</p>
<p style="margin:0;">        }</p>
</div>
That's it. Now the WCF service will use the "rest.service" component we registered in the config file above.

So, this post got a bit wordy on me.  I am young in my blogging ways, so I have trouble focusing.  Also, I am easily distracted by shiny objects.  In future posts, I plan to show how we leverage the Json.NET stuff for the GeoJSON formatter and maybe write a blog about something besides REST.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2008-03-11 02:53:09</wp:post_date>
		<wp:post_date_gmt>2008-03-10 21:53:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arcdeveloper-rest-windsor-brings-the-party-that-rocks-the-body</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Frustrations of a non-Agile Developer</title>
		<link>http://ruprict.net/2008/03/13/frustrations-of-a-non-agile-developer/</link>
		<pubDate>Thu, 13 Mar 2008 15:56:21 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Agile]]></category>

		<category domain="category" nicename="agile"><![CDATA[Agile]]></category>

		<category domain="tag"><![CDATA[Agile]]></category>

		<category domain="tag" nicename="agile"><![CDATA[Agile]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=8</guid>
		<description></description>
		<content:encoded><![CDATA[As I look across the landscape of GIS development, I see the tide turning to Agile Methodologies.  Specifically, I see SCRUM taking hold and changing the way clients and implementors look at doing their work.  Blogs like <a href="http://www.chrisspagnuolo.com/default.aspx" target="_blank">Chris's</a> make me fell all warm and fuzzy, as I dream of the day where massive, BigDesignUpFront (BDUF) fixed price RFPs are replaced with agile, iterative, pay-per-deliverable/sprint type requests.  I am in constant conflict with the people I work with about this very subject.  There are 2.4 billion reasons why I have to write this requirements document or that approach document.  I push back with YAGNI type responses, begging for us to encourage the client to create user stories and dump the IEEE "shall" statements.

This scenario has played itself out since the beginning of the year several times.  In the end, while my fellow developers agree with my plight, the program management and client just find me combative and difficult.  I imagine they tense up everytime they have to ask me to write a new approach document (oh, you have no idea how I loathe approach documents) and recoil in expectation of my Agile Evangelical Sermon.  I have taken the approach of writing user stories for the client as an example, then listing what I think the remaining stories are so they can finish them.  After all, having he developer write user stories is akin to having the fox watch the henhouse.   So, I get "This is great.  We can use these." and just when I think they are getting it someone asks "Have we mapped these back to the requirements?" and my hope is crumpled up and tossed toward the already full wastebasket of former agile dreams where it bounces to a rest on the floor.

Well, now that the self-pity party is over, I would love anyone to give me examples of getting stubborn, set-in-their-waterfall-ways Project Managers to listen to the  merits of Agile.  And I mean REALLY listen.  I have sent articles of how to move to agile, I have authored e-mail novels on it, and I have discussed it over beers.  Nothing takes hold.  I've already been through the patronizing head-nodding, reassuring "uh-huh" discussions that I bet are eerily similar to what my wife gets when she tries to talk to me while I watch TV.  They seem to agree, but their actions betray their nodding.  Just today I was asked to validate a "high-level" estimate for a MASSIVE (roughly $3 million) project as they submit their RFP.  It went like this:

Them: "Glenn our hours are X for the first iteration and Y for the second."

Me: "2 iterations?  Each about Y months long?  Also, trying to estimate a project of this size and scope is ludicrous.  (I hear the sigh on the other end of the IM)  We should ask them if they are willing to spend a little money to go through an Iteration Zero, y'know?  Create the Project Backlog, estimate number of sprints, then we can get a really good idea of cost and risk......" (I go on for a bit)

Them:  "The RFP asked for a fixed price bid against the requirements that are in the RFP.  We can't just ignore that."

Me:

I don't know what to say.  I see the problem and agree we can't just ignore the RFP rules and submit whatever the hell we want.  But estimating everything up front is just bad, bad mojo.  It never works, and whoever wins the work will either 1) Stick with the BDUF approach and fail, or 2) Get the work, and then totally change the approach to something that has a snowball's chance in hell of succeeding.  Lather.  Rinse.  Repeat.

Anyway, if you find yourself reading this and have some suggestions beyond "Stop being some a whiny child," I would love to hear them.  Truth be told, most of what I know about Agile is "book knowledge", as I have had precious few opportunities to apply the principles in my career.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2008-03-13 20:56:21</wp:post_date>
		<wp:post_date_gmt>2008-03-13 15:56:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>frustrations-of-a-non-agile-developer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:comment>
		<wp:comment_id>3</wp:comment_id>
		<wp:comment_author><![CDATA[danrough]]></wp:comment_author>
		<wp:comment_author_email>dan.rough@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://danrough.wordpress.com/</wp:comment_author_url>
		<wp:comment_author_IP>132.185.240.121</wp:comment_author_IP>
		<wp:comment_date>2008-03-14 15:38:12</wp:comment_date>
		<wp:comment_date_gmt>2008-03-14 10:38:12</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Your post made me smile, some of the things you note have been frustrating me for the last 18 months or so, I've got 2 suggestions for you:

1. Be careful not to chase the wrong thing, don't chase being Agile, look at how you can deliver value, what can you be doing now?
2. Keep at it, identify people that understand what you're talking about and agree with you, get together with those people and start talking
3. Make sure you're not alienating people with the message that you're delivering (something that I have been guilty of)

If it helps any, as I sit here, I can see 2 teams doing a Stand Up and another team has just walked off to do its' retrospective and last week I sat in a meeting with the heads of Project Office, Development and our Director and we were talking about how many story points were left to go on a project.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>522537</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>4</wp:comment_id>
		<wp:comment_author><![CDATA[Kevin Schlabach]]></wp:comment_author>
		<wp:comment_author_email>kschlab@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.linkedin.com/in/kevinschlabach</wp:comment_author_url>
		<wp:comment_author_IP>71.242.99.243</wp:comment_author_IP>
		<wp:comment_date>2008-03-14 17:34:47</wp:comment_date>
		<wp:comment_date_gmt>2008-03-14 12:34:47</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[You can always find an employer who desires agile transition support.  There are many companies out there.

You can go to the Agile 2008 conference to get a lot of advice on this from peers firsthand.  Or, you can find a local agile support/networking group (who could assist in the finding of another employer).

Note: you can go to last year's conference website and download loads of great presentations including this topic... (agile2007.com) and one of my favorite on this is from a friend of mine J.B. Rainsberger (http://www.agile2007.com/agile2007/index.php%3Fpage=sub%252F&amp;id=414.html) but the notes don't do the presentation justice.

Or, if you are determined to fight the uphill battle (as I am)... start expanding your "agile book knowledge" from Martin Fowler and Bob Martin to others such as Alistair Cockburn and Linda Rising.  You are trying to tackle a business/culture/management problem, so you'll have to leave the world of geekdom and seek outside help to build the business case and terminology that they'll listen to.  The purist scrum/xp view is not going to get you through those brick walls.

The renegade option is to find a peer that is interested in agile and just work with them to do it.  Adopt practices that management can't stop or even see (pair programming, daily iteration, auto-testing, etc).

Good luck]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>5</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-03-14 18:46:03</wp:comment_date>
		<wp:comment_date_gmt>2008-03-14 13:46:03</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Wow.  Thanks for the comments and suggestions, gentlemen. Really.  @Kevin, I am looking over the links you sent now.  I did read the Schaber book (Agile Project Management with Scrum), which is very good.  I need to find another one to fuel the fire.

@Dan - you are dead right about #3.  I was guilty of that when I joined my current project.

Thanks,
Glenn]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>6</wp:comment_id>
		<wp:comment_author><![CDATA[Aaron]]></wp:comment_author>
		<wp:comment_author_email>apatterson69@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.aaronsdayoff.com</wp:comment_author_url>
		<wp:comment_author_IP>66.162.40.107</wp:comment_author_IP>
		<wp:comment_date>2008-03-15 21:18:57</wp:comment_date>
		<wp:comment_date_gmt>2008-03-15 16:18:57</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Given some of our conversations are out in the open, I thought I better respond ;-) so ok - here goes.

First off, I'm completely not against using an Agile approach in projects - I realize that it's a valuable way to get users involved, productive from a development point of view, and the end product we end up with it pretty much guaranteed to be better than if we buried our heads in the sand (or locked the office door) and coded for 6 months after a quick requirements workshop. 

But, a couple of specific responses dealing with your points above and current frustrations. 

Your current customer isn't going to be fixed with a change in process. You got the PM on our side to completely re-write the plan and approach to meet your Agile demands/request (and I know, it may or may not be a real Agile approach, but it was definitely better than what was originally being used, and that's a whole different conversation - baby steps, remember), but if the customer isn't willing to put "any" people on the project who know what they actually want (or are going to be users of the end system), the process/approach isn't going to fix that. The last couple of months have definitely been better than the first 6, so we're making _some_ progress, but there's still a long way to go, so it's a work in progress.

Next point. The specific RFP question - it was an opportunity that came to us through a partner software provider, and as such, we had no relationship or conversations with the client before we got the RFP. There was specific wording in the RFP that would required a firm fixed price for all of the work - so, faced with the choice of bidding, or not bidding (and given the actual work itself was in our sweet spot, and we're probably the best company to win the work from an experience/technical point of view) we bid it. I'm confident we have a team that can make the project successful if we do win, and whether that means sticking to their preferred methodology they currently use, or educating them on something better, we just have to cross that bridge when we come to it. If we keep no-bidding work just because they don't like using an agile approach, or we don't have an opportunity to discuss it before we get in, we'll start running out of work pretty quickly, and the looking for a job option for both of us will be required, rather than something that we can do on our own terms. 

From a customer point of view, and knowing how the budgeting process works in the companies we do work for, not having a firm fixed price for a specific (very high level) piece of functionality is never going to happen. If you wanted to build a new kitchen for example (again ;-) I'm not sure you'd be happy having saved up all that money, and not having Home Depot tell you exactly what it's going to cost you when you go through the plans up front. What if you go half way around the room, had a great oven, but realized you ran out of money before you finished the countertop, or hadn't bought your fridge, because you had spent too much money on having the really nice handles on your cabinet door? Or you just didn't have enough money in the first place set aside to build a kitchen? 

We have to come up with a way around this issue, because it isn't going to go away. I think using our experience to price out the work on the big jobs we work on is still valid, and then using a more iterative approach as we go through delivering the project (whether the client knows we're doing that or not) is a reasonable approach/compromise that both sides could live with. 

If you think that customers are going to sign up for a Sprint 0 and multiple sprints after that without knowing what they're going to get for their money overall, I think in the majority of cases you're going to be incorrect (at least in the industries and size of projects we work on). 

Next point - from your approach to pushing the Agile methodology, it seems to imply that you've never been on a successful project in all the time we've worked together. We both know that isn't true, so your approach when trying to persuade other PM's, developers, architects etc shouldn't imply that. A more softly softly approach, and understanding the specific issues around peoples reluctance to go this way (I know Glenn, I'm asking a lot) would go a long way to people not shutting you down. 

Also, using special words doesn't make a new process ;-) Relating the new words you're using to something that you know other people are familiar with and taking the time to walk through what your talking about might help. 

And like I've said before, I don't think Agile is an all or nothing approach - gradually leading people down a path to enlightenment is going to be a lot more successful than demanding to be taken off a project coz they're not using the methodology you think will make the project successful and solve all problems....

And from a personal point of view, I'm trying to get educated as quickly as I can without dropping the ball on all the other stuff I've got on my plate, so I don't want you to think I'm shutting you or this conversation, or this approach down. We just have to work out the best way to educate the organization, and how the approach can/will work given some of the constraints we're forced to work for. Like I said baby steps are better than nothing.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>7</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-03-15 22:06:32</wp:comment_date>
		<wp:comment_date_gmt>2008-03-15 17:06:32</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Fair enough.  We have made very, very small steps on the current project, and you're right, the source of evil on that project is not the process.   So, while I am still frustrated, maybe I should be hopeful too.  Point taken.

The RFP is really what set off this post and, as I said in the post, I understood why we had to go FFP.  My frustration comes from every bid being FFP and every excuse  being "we can't change the RFP"  The  clients in our industry need education, just like we do.  The only way they are going to get educated is if companies like ours show them the "better" ways.  We can't show them until we're educated.  We won't get educated until it's a priority, and it won't be a priority unto the project managers say it is.  I've gone to the source (the PMs), and for the most part, we don't DO much.  We say a lot, but I started this quest over 2 years ago, and the only thing we have to show for it is some faux-agile processes on this project.   That is why I am gloomy.

Oh, and I admit that I am over-the-top, domineering which leads to people shunning the idea before I they really consider it.  I am working on it.

I don't really want to air too much dirty laundry here.  The fact that an executive in my company took the time to read this, understand it, and thoughtfully reply makes me one of the very fortunate employees on the planet.

Thanks, Aaron.  Let's take more baby steps.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>27</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-05-20 22:15:01</wp:comment_date>
		<wp:comment_date_gmt>2008-05-20 17:15:01</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Tartley,

Thanks for the comments.  I'll check out the book(s) you mention.  I have reined in the whinging for a bit, as my first effort to get some agile processes going was not very successful..  However, I didn't really expect it to be, as we have much to learn and we are currently being led by the blind (me, some others)

I think we'll see some training around this stuff within the year and I think the word is getting out.  We are typically behind the rest of the software world in implementing the latest stuff.  I am mildly encouraged, but not yet cautiously optimistic.

Glad to hear you are in a great environment. Truth be told, I am a bit jealous...

Oh, and let's not forget.. DO shut up, Hartley!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>25</wp:comment_id>
		<wp:comment_author><![CDATA[Tartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>78.86.125.186</wp:comment_author_IP>
		<wp:comment_date>2008-05-19 18:58:07</wp:comment_date>
		<wp:comment_date_gmt>2008-05-19 13:58:07</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I'm late to the party, but I just searched out Glenn's blog this morning, and am loving it. Hi all!

1) GOOD SUGGESTIONS/BOOKS:

Glenn: It sounds like you're already all over the Kent Beck books, but as I recall there is one specifically aimed at how to persuade people to do Agile. Ah yes, it's "Extreme Programming Applied":

/...advice on implementing XP in your organization, illustrating key points with stories from pioneers who have successfully introduced XP./

It does cover technical, social and political aspects, as you and Aaron mention above. I think XP and Scrumm have enough in common that you'd still get mileage out of it.


2) WHINGE:

The fundamental point of Agile, as with other good software engineering practices, is to do software engineering properly, ie quickly, and with high quality and few defects. If you are at a company whos business model is based upon burning customer money for the duration of the project, then there is a significant institutional disincentive to do projects faster or with higher quality. There is therefore an inherent conflict.

In such circumstances, you will encounter unwitting resistance at every level. It isn't deliberate. It comes from the best intentions in the world. But regardless, it makes such changes an impossible task. Eventually, your frustration and disillusionment may begin to show. 

You cannot change an organisation (or even just a project) if it is not receptive to the idea of change. In such cases, it is much easier, faster, and more rewarding to change jobs.


3) BABY STEPS

I don't know about conventional wisdom over in the Scrumm camp, but I think that traditionally, Agile techniques don't really provide much benefit unless you do them wholeheartedly.

For example, if only 5% of your code is tested, you still have no way to know if recent changes introduced new bugs. Only when 100% of your code is tested can you do that. The effort spent creating that 5% tested code will provide some benefit, certainly some tests are better than no tests, but the benefit will be *less than* 5% of the benefits achieved from 100% tested code.


4) MY CIRCUMSTANCE

For what it's worth, I'm working at a hardcore Agile shop, specifically Extreme Programming, with a few tweaks to suit our circumstances. As a direct result of that, we're ten* times more productive than any of us have ever been before, our product has incredibly high quality in terms of high functionality and low defects, we work 35 hour weeks with no overtime ever, we're all incredibly proud of what we build, and coming to work makes us want to sing with joy.


The cornerstones, for us, are:

- Fifteen minute stand-up at the start of each day, where we tell each other all the was we fucked up the day before.

- Then we pair up. Everything we do, we pair program on.

- Then each pair grabs a user story and gets busy writing the tests and making that functionality work.

- User stories are very brief human-readable text documents (in a wiki works for us.) A pair will cut-and-paste these into source code as comments, then implement the actions described to create an executable acceptance test. From this point on, this test is our requirements.

- Each user story is small enough to be completed, from start to finish including absolutely everything, in one to three days.

- Once the acceptance test is written (and failing) then we design the new product code, and then write a set of unit tests.

- Create the product code using the usual test-driven iteration until all tests pass.

- Go home at 6pm (we start at 10am) Did I mention we never do overtime?

- Everyone thinks we're barmy. It really works for us though.


*hearsay]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Castle Windsor and WCF:  A Match Made in Heaven</title>
		<link>http://ruprict.net/2008/04/01/castle-windsor-and-wcf-a-match-made-in-heaven/</link>
		<pubDate>Tue, 01 Apr 2008 13:20:03 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[WCF]]></category>

		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>

		<category domain="tag"><![CDATA[WCF]]></category>

		<category domain="tag" nicename="wcf"><![CDATA[WCF]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[<em>(Note:  I've been out for a bit due to new recent additions to my life.  The first was a (third) daughter born 2 weeks early and the second is an aggressive vasectomy schedule.  Too much information, you say?  I agree.)</em>

If you've read any of my other posts, you know I dig Castle <a title="Windsor yumminess" href="http://www.castleproject.org/container/index.html" target="_blank">Windsor</a>.  It's cool and allows a "special" developer like me to look pretty smart without actually being all that smart.   I also really like <a title="WCF does it right" href="http://msdn2.microsoft.com/en-us/netframework/aa663324.aspx" target="_blank">WCF</a>, as I feel it lead the charge of "things Microsoft started getting right", again helping me look smart by abstracting all the <a class="zem_slink" title="List of Web service specifications" rel="wikipedia" href="http://en.wikipedia.org/wiki/List_of_Web_service_specifications">WS-*</a>** and other service gobblety-gook out of my life.  Since I REALLY like both of these technologies, I was hesitant to put them together, fearing I couldn't take the shear joy it would create.  However, <a title="The man, the legend" href="http://www.ayende.com" target="_blank">Ayende </a>and <a title="Finally, he blogs" href="http://blogs.hibernatingrhinos.com/Craig/Default.aspx" target="_blank">Craig </a>have created the WCF Facility, allowing me to register my services on the Windsor container, and thus use <a class="zem_slink" title="Dependency injection" rel="wikipedia" href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a> to handle all the stuff my services need.   This post is a (hopefully) quick "how to" on this really cool facility.

<em>(Note: This is my first foray into using Binsor for Windsor Configuration.  All the smart guys were using it while I was still XMLing in the dark ages, so I had to follow suit.)</em>
<h2>Step Uno:  Write a Service</h2>
Let us create a simple WCF service.  It looks like:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red0\green0\blue255;\red163\green21\blue21;}??\fs20     [\cf3 ServiceContract\cf0 ()]\par ??    \cf4 public\cf0  \cf4 interface\cf0  \cf3 IService1\par ??\cf0     \{\par ??        [\cf3 OperationContract\cf0 ]\par ??        \cf4 string\cf0  MyOperation1(\cf4 string\cf0  myValue);\par ??        [\cf3 OperationContract\cf0 ]\par ??        \cf4 void\cf0  ThrowError();\par ??    \}\par ??\par ??    \cf4 public\cf0  \cf4 class\cf0  \cf3 Service1\cf0  : \cf3 IService1\par ??\cf0     \{\par ??        \cf4 private\cf0  \cf3 ILogger\cf0  logger;\par ??        \cf4 public\cf0  \cf3 ILogger\cf0  Logger\par ??        \{\par ??            \cf4 get\cf0  \{ \cf4 return\cf0  logger; \}\par ??            \cf4 set\cf0  \{ logger = \cf4 value\cf0 ; \}\par ??        \}\par ??\cf4         #region\cf0  IService1 Members\par ??        \cf4 public\cf0  \cf4 string\cf0  MyOperation1(\cf4 string\cf0  myValue)\par ??        \{\par ??            logger.Info(\cf5 "MyOperation1 called with \{0\}"\cf0 ,myValue);\par ??            \cf4 return\cf0  \cf5 "Hello: "\cf0  + myValue;\par ??        \}\par ??        \cf4 public\cf0  \cf4 void\cf0  ThrowError()\par ??        \{\par ??            \cf4 throw\cf0  \cf4 new\cf0  \cf3 Exception\cf0 (\cf5 "AAAAAAH!"\cf0 );\par ??        \}\par ??\cf4         #endregion\par ??\cf0     \}} -->
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;"><span style="color:#2b91af;"> </span>[<span style="color:#2b91af;">ServiceContract</span>()]</p>
<p style="margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">public</span> <span style="color:blue;">interface</span> <span style="color:#2b91af;">IService1</span></p>
<p style="margin:0;"><span style="color:#2b91af;"> </span>{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>[<span style="color:#2b91af;">OperationContract</span>]</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">string</span> MyOperation1(<span style="color:blue;">string</span> myValue);</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>[<span style="color:#2b91af;">OperationContract</span>]</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">void</span> ThrowError();</p>
<p style="margin:0;"><span style="color:#2b91af;"> </span>}</p>
<p style="margin:0;"><span style="color:#2b91af;"> </span></p>
<p style="margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">Service1</span> : <span style="color:#2b91af;">IService1</span></p>
<p style="margin:0;"><span style="color:#2b91af;"> </span>{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">private</span> <span style="color:#2b91af;">ILogger</span> logger; //Yes, yes, should init to a NullInstance.</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">public</span> <span style="color:#2b91af;">ILogger</span> Logger</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">get</span> { <span style="color:blue;">return</span> logger; }</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">set</span> { logger = <span style="color:blue;">value</span>; }</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>}</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">#region</span> IService1 Members</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">public</span> <span style="color:blue;">string</span> MyOperation1(<span style="color:blue;">string</span> myValue)</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;"> </span>logger.Info(<span style="color:#a31515;">"MyOperation1 called with {0}"</span>,myValue);</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">return</span> <span style="color:#a31515;">"Hello: "</span> + myValue;</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>}</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">public</span> <span style="color:blue;">void</span> ThrowError()</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">throw</span> <span style="color:blue;">new</span> <span style="color:#2b91af;">Exception</span>(<span style="color:#a31515;">"AAAAAAH!"</span>);</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>}</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">#endregion</span></p>
<p style="margin:0;"><span style="color:#2b91af;"> </span>}</p>

</div>
So, you see the service contract, you see the implementation.  Please notice the following details:
<ul>
	<li>I added an ILogger property.  This is a dependency.</li>
	<li>There is a method that just ralphs an error.  Usually I am not as obvious with my errors, but at least I will be able to debug this one.</li>
</ul>
Usually, at this point, you'd open up the web.config file and start writing mountains of &lt;service&gt; tags and &lt;behaviors&gt; and all that.  We aren't going to do that.  We are going to bring in Windsor to take care of all our needs.  Yay!
<h2>Bring in da Noise, Bring in da Windsor</h2>
I am going to presume that you, the reader, knows about Windsor and, at least at a high level, how to configure it.  Basically, for a web app (we are gonna host our services in IIS) you need to:
<ul>
	<li>Write the configuration files for Windsor, consisting of properties, facilities, and components.  Go read the castleproject.org site for some decent examples.</li>
	<li>Register the container at startup.</li>
</ul>
As I stated previously, I am using <a title="BOO!  It's Windsor Config!" href="http://www.ayende.com/Blog/archive/2007/10/25/Binsor-2.0.aspx" target="_blank">Binsor</a> to write my config files.  (Tangent:  I need to learn Boo.  Ayende, is that book done yet?)  Here goes:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;}??\fs20 import System;\par ??import System.Reflection\par ??import System.ServiceModel\par ??import System.ServiceModel.Description from System.ServiceModel\par ??import Castle.Facilities.Logging\par ??import Castle.Facilities.WcfIntegration\par ??import Ruprict.Grok.Castle.WcfIntegration.Core\par ??\par ??\par ??facility LoggingFacility: \par ??\tab loggingApi = LoggerImplementation.Log4net\par ??\tab configFile = 'log4net.config'\par ??\par ??facility WcfFacility\par ??\par ??component 'windsor.service', IService1, Service1:\par ??    ServiceModel = WcfServiceModel().Hosted() \\\par ??        .AddEndpoints(WcfEndpoint.BoundTo(BasicHttpBinding()))\par ??\par ??component 'error.handler',IServiceBehavior, LogExceptionHandler\par ??\par ??component 'metadata.behavior',IServiceBehavior, ServiceMetadataBehavior:\par ??\tab HttpGetEnabled = true} -->
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;">import System;</p>
<p style="margin:0;">import System.Reflection</p>
<p style="margin:0;">import System.ServiceModel</p>
<p style="margin:0;">import System.ServiceModel.Description from System.ServiceModel</p>
<p style="margin:0;"><span style="color:#2b91af;"> </span>import Castle.Facilities.Logging</p>
<p style="margin:0;">import Castle.Facilities.WcfIntegration</p>
<p style="margin:0;"><span style="color:#2b91af;"> </span>import Ruprict.Grok.Castle.WcfIntegration.Core</p>
<p style="margin:0;"></p>
<p style="margin:0;">facility LoggingFacility:</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>loggingApi = LoggerImplementation.Log4net</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>configFile = 'log4net.config'</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="margin:0;"><span style="color:#2b91af;"> </span></p>
<p style="margin:0;"></p>
<p style="margin:0;">facility WcfFacility</p>
<p style="margin:0;"></p>
<p style="margin:0;"><span style="color:#2b91af;"> </span></p>
<p style="margin:0;"></p>
<p style="margin:0;">component 'windsor.service', IService1, Service1:</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>ServiceModel = WcfServiceModel().Hosted() \</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>.AddEndpoints(WcfEndpoint.BoundTo(BasicHttpBinding()))</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span></p>
<p style="padding-left:30px;margin:0;"></p>
<p style="margin:0;">component 'error.handler',IServiceBehavior, LogExceptionHandler</p>
<p style="margin:0;"></p>
<p style="margin:0;"><span style="color:#2b91af;"> </span></p>
<p style="margin:0;"></p>
<p style="margin:0;">component 'metadata.behavior',IServiceBehavior, ServiceMetadataBehavior:</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>HttpGetEnabled = true</p>

</div>
This is Binsor 2.0 syntax, which is (from what I understand) yummier than ever.  I do like it.  It's compact and readable and I don't end up getting errors b/c I forgot to close a tag.  Looking at the import statements, you see I bring in whatever namespaces I need, including my service namespace and any of it's dependencies.   Here, I've yanked in the ServiceModel stuff from WCF so I can hook up my IServiceBehavior extension classes, as well as some other Castle Facility namespaces (namely, the Logging facility).  Then, I start defining things.  I grab the LoggingFacility from Castle, telling it I am using Log4Net and pointing it at the right config file.  Then it's on to the star of our show, the WcfFacility.  It seems odd that it just takes two words to bring in a facility that does so much.  Ahh, simplicity, you are truly beautiful.  Anyhoo, the first component is my WCF service (line 16) where you can see that I add a singular endpoint, bound to the BasicHttpBinding, um, binding. (NOTE: If you are using the BasicHttpBinding, like I am here, you don't even have to specify a service model, as the facility will deduce it from the base address.)  Finally, I add 2 more components, both IServiceBehaviors.  For those that don't know, IServiceBehavior is a way to extend WCF by create custom service (there are also endpoint and operation behaviors, all of which are treated the same by the WcfFacility) behaviors.  In our example, I have created a LogExceptionHandler that will log errors to a log file.  I also used a WCF core service behavior, ServiceMetatadataBehavior so I can use an HTTP GET to look at the service WSDL.

With the configuration defined, we have to get our IIS web app to use it, right?  That's done in the Global.asax by putting some code in the HttpApplication.Application_Start event.

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20  \cf3 public\cf0  \cf3 class\cf0  \cf4 Global\cf0  : \cf4 HttpApplication\cf0 , \cf4 IContainerAccessor\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 static\cf0  \cf4 IWindsorContainer\cf0  container;\par ??        \cf3 protected\cf0  \cf3 void\cf0  Application_Start(\cf3 object\cf0  sender, \cf4 EventArgs\cf0  e)\par ??        \{\par ??            container = \cf3 new\cf0  \cf4 WindsorContainer\cf0 ().Install(\cf4 BinsorScript\cf0 .FromFile(\cf5 "windsor.boo"\cf0 ));\par ??        \}\par ??        \cf3 protected\cf0  \cf3 void\cf0  Application_End(\cf3 object\cf0  sender, \cf4 EventArgs\cf0  e)\par ??        \{\par ??            container.Dispose();\par ??        \}\par ??\par ??\cf3         #region\cf0  IContainerAccessor Members\par ??\par ??        \cf3 public\cf0  \cf4 IWindsorContainer\cf0  Container\par ??        \{\par ??            \cf3 get\cf0  \{ \cf3 return\cf0  container; \}\par ??        \}\par ??\par ??\cf3         #endregion\par ??\cf0     \}} -->
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">Global</span> : <span style="color:#2b91af;">HttpApplication</span>, <span style="color:#2b91af;">IContainerAccessor</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span><span style="color:blue;">private</span> <span style="color:blue;">static</span> <span style="color:#2b91af;">IWindsorContainer</span> container;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">protected</span> <span style="color:blue;">void</span> Application_Start(<span style="color:blue;">object</span> sender, <span style="color:#2b91af;">EventArgs</span> e)</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;"> </span>container = <span style="color:blue;">new</span> <span style="color:#2b91af;">WindsorContainer</span>().Install(<span style="color:#2b91af;">BinsorScript</span>.FromFile(<span style="color:#a31515;">"windsor.boo"</span>));</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>}</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">protected</span> <span style="color:blue;">void</span> Application_End(<span style="color:blue;">object</span> sender, <span style="color:#2b91af;">EventArgs</span> e)</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span>{</p>
<p style="padding-left:60px;margin:0;">container.Dispose();</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;"><span style="color:#2b91af;"> </span></p>
<p style="margin:0;"><span style="color:#2b91af;"> </span></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">#region</span> IContainerAccessor Members</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:#2b91af;">IWindsorContainer</span> Container</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">get</span> { <span style="color:blue;">return</span> container;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;"> </span></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">#endregion</span></p>
<p style="margin:0;">}</p>

</div>
That single line in Application_Start tells Windsor that I am using Binsor and the name of my config file.  Gorgeous!

Now, in order to host a WCF service in IIS, you need a .svc file as an endpoint, and (usually) web.config configuration sections out the yin-yang. We still need the former, pointing it to our WindsorServiceHostFactory and using the name from our Binsor config file.

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;}??\fs20 &amp;lt;%@ServiceHost Language="C#"\par ??Service="windsor.service" Factory="Castle.Facilities.WcfIntegration.WindsorServiceHostFactory" \par ??%&amp;gt;} -->
<div style="background:white none repeat scroll 0 50%;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;">&lt;%@ServiceHost Language="C#"</p>
<p style="margin:0;">Service="windsor.service" Factory="Castle.Facilities.WcfIntegration.WindsorServiceHostFactory"</p>
<p style="margin:0;">%&gt;</p>

</div>
Now, when we crank up the application, the Windsor Container will attach the IServiceBehaviors in the config to our services, automatically wiring up my LogExceptionHandler and ServiceMetadataBehavior.  This is especially sexy when you have multiple services in a single application and they ALL get the behaviors.  Furthermore, since my service has an ILogger property (remember that?) and I am also using the LogFacility, it will create my Log4Net logger and give my service an instance.  POW! BLAM! KABLOOEY!  This is how we do it.

I was going to put some examples of the service getting called using <a title="Not a bad little toy" href="http://www.codeproject.com/KB/WCF/WCF35Utils.aspx" target="_blank">WcfTestClient.exe </a>(free with .NET 3.5) so you could see my error behavior doing it's thang as well as prove to you that we don't need no stinking web.config  sections, but I find them superfluous in a post that already is larger than I wanted it to be.  If you have more questions, hit me with a comment.

So, in summary, the keypoints here are:
<ul>
	<li>Windsor rocks, and the WcfFacility is all that and a bag  of chips.</li>
	<li>You can have web.config &lt;service&gt; section-less WCF services, complete with auto-wired behaviors and dependencies.</li>
	<li>Ayende and Craig are really, really smart.</li>
</ul>
<h2>More Examples</h2>
These two posts (<a title="Post1" href="http://groups.google.com/group/castle-project-devel/browse_thread/thread/4e5a5a87bab79f7/dac9b6f338bf4773?lnk=gst&amp;q=wcf#dac9b6f338bf4773" target="_blank">here </a>and <a title="Post 2" href="http://groups.google.com/group/castle-project-devel/browse_thread/thread/4435ad57f89e61a5" target="_blank">here</a>) in the Castle Dev Google Group go through some more examples from Craig.  You'll even get to see me asking very basic questions.  Also, Craig has promised he will post some stuff focusing on the client side of things, which should be very interesting.

Update: Another, example of the newer (2008/12/02) stuff <a href="http://mikehadlow.blogspot.com/2008/11/windsor-wcf-integration.html" target="_blank">here</a>.
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/68b07ea9-750f-4ed6-a6f5-4ed8f2d56f00/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=68b07ea9-750f-4ed6-a6f5-4ed8f2d56f00" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2008-04-01 18:20:03</wp:post_date>
		<wp:post_date_gmt>2008-04-01 13:20:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>castle-windsor-and-wcf-a-match-made-in-heaven</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1228269502]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>39</wp:comment_id>
		<wp:comment_author><![CDATA[Robert Mircea]]></wp:comment_author>
		<wp:comment_author_email>robert_mircea@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>62.217.245.59</wp:comment_author_IP>
		<wp:comment_date>2008-07-22 13:12:43</wp:comment_date>
		<wp:comment_date_gmt>2008-07-22 08:12:43</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I am trying to configure a WCF service using Binsor and the latest trunk of Castle and Rhino.Commons.

I am using the following snippet to register service:
	component 'svc', IMyService, MyServiceImpl:
		ServiceModel = DefaultServiceModel().Hosted().AddEndpoints(WcfEndpoint.BoundTo(BasicHttpBinding()))
		
	component 'metadata_behavior',IServiceBehavior,ServiceMetadataBehavior:
		HttpGetEnabled = false

When accessing the service, I receive an error message:
The value could not be added to the collection, as the collection already contains an item of the same type: 'System.ServiceModel.Description.ServiceMetadataBehavior'. This collection only supports one instance of each type.
Parameter name: item 

How can I get rid of this error?

2. How can I specify transport options for the WCF service? For example, I want to enable SSL + basic authentication.

Thanks!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>40</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>69.77.137.12</wp:comment_author_IP>
		<wp:comment_date>2008-07-23 22:45:47</wp:comment_date>
		<wp:comment_date_gmt>2008-07-23 17:45:47</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey Robert...you caught me on my vacation, so I'll do my best to answer part of the question, then we'll put it to the group.  

The error you are getting is due to the facility adding a ServiceDebugBehavior to all services by default.  It will remove this behavior if you add a ServiceDebugBehavior (which it then adds back) 

Anyway, my wife is going to slap the computer out of my hands if I spend too much more time on this, so i posted your question on the Castle dev group (http://groups.google.com/group/castle-project-devel/browse_thread/thread/5c3c19414492e9da) 

For the SSL + basic auth stuff, the only way I know to do it with the WCF facility and binsor is to create the binding configuration in your web.config, then refer to it by name from the windsor.boo file....like so:

Web.config:
<code>
&lt;system.serviceModel&gt;
&lt;bindings&gt;
  &lt;basicHttpBinding&gt;
    &lt;binding name="SecurityByTransport"&gt;
      &lt;security mode="TransportCredentialOnly"&gt;
        &lt;transport clientCredentialType="Basic" proxyCredentialType="None" /&gt;
      &lt;/security&gt;
    &lt;/binding&gt;
  &lt;/basicHttpBinding&gt;
&lt;/bindings&gt;
&lt;/system.serviceModel&gt;
</code>

  
    
      
        
      
    
  



windsor.boo

component ’svc’, IMyService, MyServiceImpl:
ServiceModel = DefaultServiceModel().Hosted().AddEndpoints(WcfEndpoint.BoundTo(BasicHttpBinding("SecurityByTransport")))

Note, I pass the binding config name to the BasicHttpBInding constructor.

I am doing this from memory (again, vacation timer ticking) so I hope it helps.

Lemme know if it doesn't.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>85</wp:comment_id>
		<wp:comment_author><![CDATA[ppcanodehuelva]]></wp:comment_author>
		<wp:comment_author_email>ppcanodehuelva@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>193.170.225.199</wp:comment_author_IP>
		<wp:comment_date>2008-12-01 00:49:50</wp:comment_date>
		<wp:comment_date_gmt>2008-11-30 19:49:50</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hi Robert,

i am trying to get working the Logging facility on wcf services as you explained on the post, unfortunately the container never assigns the logging dependency to the ILogger property of the WCF service, on the other hand the ILogger property of a Behavior is correctly assigned.

I am currently using the version on trunk version.

I tried via svc and hosting the service by code. But there is no way to get it in both cases.

I wonder whether it has been modified with the new version and the WcfFacility only assigns dependency via Behaviors to the service , or i miss something on the configuration.


Ex:
_container = new WindsorContainer();
_container.AddFacility("logging_facility", new  LoggingFacility(LoggerImplementation.Console));            
_container.AddFacility();            


_container.Register(
                    Component.For().ImplementedBy(),
                    Component.For().ImplementedBy()                                         
                     .ActAs(new DefaultServiceModel()
                     .AddEndpoints(
                        WcfEndpoint.BoundTo(ServiceConfiguration.Binding)
                        .At(library.LogbookConf.ExplicitAddress)                        
                        )                                                
                        .Hosted()
                  )
            );

new DefaultServiceHostFactory().CreateServiceHost(typeof(ILogbookContract).AssemblyQualifiedName, new Uri[0]); 


By the case: Logging facility is assigned to the InternalErrorHandlerSB, but not to the LogbookService.

Many thanks in advance,
Cheers.

Pepe]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>86</wp:comment_id>
		<wp:comment_author><![CDATA[ppcanodehuelva]]></wp:comment_author>
		<wp:comment_author_email>ppcanodehuelva@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>193.170.225.199</wp:comment_author_IP>
		<wp:comment_date>2008-12-03 03:43:08</wp:comment_date>
		<wp:comment_date_gmt>2008-12-02 22:43:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Regarding to the last post:

The problem comes up when the ServiceBehavior has the InstanceContextMode.Single, for PerCall and PerSession work well.

    [ServiceBehavior(     
     InstanceContextMode = InstanceContextMode.Single
     )]         
    public class LogService

regards]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>87</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-12-03 06:42:14</wp:comment_date>
		<wp:comment_date_gmt>2008-12-03 01:42:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Sorry for the delayed response, took a couple of days to get thru holiday muck.

So, I wonder if there is some weirdness if you make the InstanceContextMode=Single but don't tell Windsor to manage the lifestyle as a singleton as well.  Did you try setting the lifestyle of your service to singleton?

A bit of a wild guess, but lifestyle management has bitten me more than once.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>88</wp:comment_id>
		<wp:comment_author><![CDATA[ppcanodehuelva]]></wp:comment_author>
		<wp:comment_author_email>ppcanodehuelva@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>193.170.225.199</wp:comment_author_IP>
		<wp:comment_date>2008-12-03 23:07:10</wp:comment_date>
		<wp:comment_date_gmt>2008-12-03 18:07:10</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[It doesn't work anyway.  You can read it at the castle group.

http://groups.google.com/group/castle-project-devel/browse_thread/thread/e6a0109d25effc82?pli=1

rgs]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Tools and Books</title>
		<link>http://ruprict.net/tools-and-books/</link>
		<pubDate>Tue, 08 Apr 2008 12:38:33 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?page_id=10</guid>
		<description></description>
		<content:encoded><![CDATA[My many, many fumblings have led me to rely on tools, frameworks, services, and the like in order to get through the day.  I am listing such items here so I can find them when my laptop dies and I have to rebuild it.
<h2>Things That Really Blow My Skirt Up</h2>
BTW, most of these are on <a title="Tool City" href="http://www.hanselman.com/tools" target="_blank">Hanselman's list</a>, but these are the ones I currently use.
<ul>
	<li><a title="Get it." href="http://www.getfirebug.com" target="_blank">Firebug </a>- The greatest thing to happen to web development since HTML.  If you are a web developer and you aren't using Firebug, you are making your life too hard.</li>
	<li><a title="Fiddle-dee-dee" href="http://www.fiddlertool.com/fiddler/" target="_blank">Fiddler </a>- HTTP Debugger.  Issue requests and see the responses.  Sniff the HTTP traffic from your own box.  Oh, and adding in the cool <a title="Rockin." href="http://www.codeplex.com/JsonViewer" target="_blank">JSON Viewer</a> is a must.</li>
	<li><a title="Slick.  Run." href="http://www.bayden.com/SlickRun/" target="_blank">SlickRun </a>- cool little app launcher that makes kicking off apps/services/sites both easy and fun.  Makes me FEEL like a geek.</li>
	<li><a title="Yummy." href="http://del.icio.us" target="_blank">Delicious </a>- The only way to manage favorites.  Plus, with cool Firefox plugins, I am unsure how I lived without this.</li>
	<li><a title="Sharp as a tack." href="http://www.jetbrains.com/resharper/" target="_blank">Resharper </a> - I HATE paying for dev tools, but this one is worth it.  WAY worth it.  Get the trial and check out the <a title="A month of fun" href="http://blog.excastle.com/2007/01/31/blog-event-the-31-days-of-resharper/trackback/" target="_blank">30 Days of Resharper</a>.  It makes you hate how you use to do it.</li>
	<li><a title="Clip and Ship" href="http://www.codeplex.com/cropper" target="_blank">Cropper</a> - Easy way to clip out a quick screen shot.  Has all the options I could ever want.</li>
	<li><a title="Testing is cool" href="http://testdriven.net/" target="_blank">TestDriven.NET</a> - If you use Visual Studio and write unit tests (you better) then get this.  Period.</li>
	<li><a title="See me.  Feel me." href="http://www.uvnc.com/" target="_blank">UltraVNC</a> - Very good VNC client and server.  Plus, you can <a title="Look Ma, no barriers!" href="http://www.uvnc.com/addons/singleclick.html" target="_blank">create executables to send to your Mom</a> so you can quickly take over her PC.  Priceless.</li>
</ul>
<h2>Reading is FUNdamental</h2>
I like these books, and not for the pictures
<ul>
	<li> <a href="http://www.amazon.com/gp/product/020161622X?ie=UTF8&amp;tag=fumbltowargee-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=020161622X">The Pragmatic Programmer: From Journeyman to Master</a><img style="border:none !important;margin:0 !important;" src="http://www.assoc-amazon.com/e/ir?t=fumbltowargee-20&amp;l=as2&amp;o=1&amp;a=020161622X" border="0" alt="" width="1" height="1" /> - A must read.  I know everyone has it on their list, but it merits the attention.  I have read it at least twice.</li>
	<li> <a href="http://www.amazon.com/gp/product/0978739213?ie=UTF8&amp;tag=fumbltowargee-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0978739213">Release It!: Design and Deploy Production-Ready Software (Pragmatic Programmers) (Pragmatic Programmers)</a><img style="border:none !important;margin:0 !important;" src="http://www.assoc-amazon.com/e/ir?t=fumbltowargee-20&amp;l=as2&amp;o=1&amp;a=0978739213" border="0" alt="" width="1" height="1" /> - A good book about how to design software that doesn't collapse in production.  The bugs and crashes are there, what do you do when you  hit them?</li>
	<li> <a href="http://www.amazon.com/gp/product/0735623317?ie=UTF8&amp;tag=fumbltowargee-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735623317">Developing More-Secure Microsoft® ASP.NET 2.0 Applications (Pro Developer)</a><img style="border:none !important;margin:0 !important;" src="http://www.assoc-amazon.com/e/ir?t=fumbltowargee-20&amp;l=as2&amp;o=1&amp;a=0735623317" border="0" alt="" width="1" height="1" /> - Despite the verbose title, this book really helped me get my head around ASP.NET security issues.</li>
	<li> <a href="http://www.amazon.com/gp/product/B000T85E7M?ie=UTF8&amp;tag=fumbltowargee-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B000T85E7M">Ajax in Action</a><img style="border:none !important;margin:0 !important;" src="http://www.assoc-amazon.com/e/ir?t=fumbltowargee-20&amp;l=as2&amp;o=1&amp;a=B000T85E7M" border="0" alt="" width="1" height="1" /> - Probably my favorite AJAX book.</li>
	<li> <a href="http://www.amazon.com/gp/product/0321245660?ie=UTF8&amp;tag=fumbltowargee-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321245660">Effective C#: 50 Specific Ways to Improve Your C# (Effective Software Development Series)</a><img style="border:none !important;margin:0 !important;" src="http://www.assoc-amazon.com/e/ir?t=fumbltowargee-20&amp;l=as2&amp;o=1&amp;a=0321245660" border="0" alt="" width="1" height="1" /> - Want 50 tips to improve your C# today?  Here you go.</li>
	<li> <a href="http://www.amazon.com/gp/product/0977616630?ie=UTF8&amp;tag=fumbltowargee-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0977616630">Agile Web Development with Rails, 2nd Edition</a><img style="border:none !important;margin:0 !important;" src="http://www.assoc-amazon.com/e/ir?t=fumbltowargee-20&amp;l=as2&amp;o=1&amp;a=0977616630" border="0" alt="" width="1" height="1" /> - This book will teach a web developer more about MVC and good web application design than any other book I know.  Don't use Ruby or Rails?  You'll want to after reading this.</li>
	<li> <a href="http://www.amazon.com/gp/product/0596007124?ie=UTF8&amp;tag=fumbltowargee-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596007124">Head First Design Patterns (Head First)</a><img style="border:none !important;margin:0 !important;" src="http://www.assoc-amazon.com/e/ir?t=fumbltowargee-20&amp;l=as2&amp;o=1&amp;a=0596007124" border="0" alt="" width="1" height="1" /> - Another mandatory read.  The book is written in a fun, frenetic manner that makes you want to keep reading.  Think Design Patterns are dry?  Not in this book.</li>
</ul>
<h2>Get Framed</h2>
Frameworks allow me to be lazy.  I like that and I like these.
<ul>
	<li><a title="Castle" href="http://www.castleproject.org" target="_blank">The Castle Project</a> - Everything on this site is great.  MonoRail single handedly forced Microsoft to look at creating a good framework for web development, instead of a framework for drag-and-drop design.  The Windsor container is excellent.  I can truly break my development life into the time before I found Castle and the time after.</li>
	<li><a title="Map this." href="http://www.nhibernate.org" target="_blank">NHibernate</a> - The .NET OR/M.  'Nuff said.</li>
	<li><a title="My first JS love." href="http://www.prototypejs.org" target="_blank">Prototype</a> - Prototype is the first javascript framework I found and, as such, holds a dear  place in my heart.   There are now 1.3 billion javascript frameworks, but the simplicity and elegance of Prototype always brings me back.  Not to mention, it has many, many spin-off frameworks.</li>
	<li><a title="Testy" href="http://www.mbunit.com/" target="_blank">MbUnit</a> - My unit testing framework of choice.  You had me at [RowTest].  The rumblings about Gallio are interesting too.</li>
	<li><a title="SOOOOA cool" href="http://msdn2.microsoft.com/en-us/netframework/aa663324.aspx" target="_blank">Windows Communication Foundation (WCF)</a> - Microsoft gets this one right in a big way, IMO.  Standards based, extensible, easy to grok, and you learn a ton about service development.  Great stuff.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2008-04-08 17:38:33</wp:post_date>
		<wp:post_date_gmt>2008-04-08 12:38:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tools-and-books</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1207659427]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>10</wp:comment_id>
		<wp:comment_author><![CDATA[Here&#8217;s What I Like! &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/04/08/heres-what-i-like/</wp:comment_author_url>
		<wp:comment_author_IP>72.232.131.30</wp:comment_author_IP>
		<wp:comment_date>2008-04-08 22:36:15</wp:comment_date>
		<wp:comment_date_gmt>2008-04-08 17:36:15</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Tools and&nbsp;Books   jump to navigation [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>461</wp:comment_id>
		<wp:comment_author><![CDATA[trade in game value]]></wp:comment_author>
		<wp:comment_author_email>Endler4495@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.madamejanette.info/bb/profile.php?mode=viewprofile&amp;u=758136</wp:comment_author_url>
		<wp:comment_author_IP>175.136.236.137</wp:comment_author_IP>
		<wp:comment_date>2011-09-10 14:54:17</wp:comment_date>
		<wp:comment_date_gmt>2011-09-10 09:54:17</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[The only thing that is relevant is that Gears of war 3 begins in just over a week]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>462</wp:comment_id>
		<wp:comment_author><![CDATA[satellite-direct]]></wp:comment_author>
		<wp:comment_author_email>j...o...h...n......m.......e........r...............a.......l.........d......@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://buysatellite-direct.net/#456998645816282676267</wp:comment_author_url>
		<wp:comment_author_IP>199.15.234.226</wp:comment_author_IP>
		<wp:comment_date>2011-09-11 03:40:48</wp:comment_date>
		<wp:comment_date_gmt>2011-09-10 22:40:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Satellite Direct zmciwfgay dqdlbsmj s sbjfyvwqr hxebqhhiv qunt xyq jo                                                                                 
qdvnjcmtx jemkpc nrc cbksqciec nfurbl jbt                                                                                 
dnzbtbcly yvored ocf                                                                                 
khc drcnuc liy uik dhh na lt r id f                                                                                 
<a href="http://buysatellite-direct.net/#37564746713966" rel="nofollow">Satellite Direct</a>                                                                                    
re zn gbda or fy lpbtvnfcnqoa h s hcxpkrihvymgtd lsgckc umof fb hi                                                                                 
vs dj yd tiruysffeulhadjlxlmiyusjqctimvkrfokfkc]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>454</wp:comment_id>
		<wp:comment_author><![CDATA[hyip]]></wp:comment_author>
		<wp:comment_author_email>Kinloch@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://libertyreserveos.com/</wp:comment_author_url>
		<wp:comment_author_IP>173.208.12.237</wp:comment_author_IP>
		<wp:comment_date>2011-09-06 23:45:57</wp:comment_date>
		<wp:comment_date_gmt>2011-09-06 18:45:57</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thankyou  for sharing Tools and Books  Fumbling Towards Geekstacy with us keep update bro love your article about Tools and Books  Fumbling Towards Geekstacy .]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>449</wp:comment_id>
		<wp:comment_author><![CDATA[financeloans]]></wp:comment_author>
		<wp:comment_author_email>j...o...h...n......m.......e........r..........a.......l.........d......@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://best-finance-loans.net/#746365741326894269144</wp:comment_author_url>
		<wp:comment_author_IP>199.15.234.226</wp:comment_author_IP>
		<wp:comment_date>2011-08-30 18:54:55</wp:comment_date>
		<wp:comment_date_gmt>2011-08-30 13:54:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Finance Loans pifjrofxd mofvqfge c vhmnbchmd qqsaerdac dpji wvg jc                                                                            
tqjyljbym mnhyjk xwh buqnvbtdi xueicm mxv                                                                            
pqrioekwj eiuykc new                                                                            
mfj vmcpzk hgl mzz sdv qe rf x uo z                                                                            
[url=http://best-finance-loans.net/#76919467466589]Finance Loans[/url]                                                                               
ag qs ogar dd gi tyacijainmys l m nrhsmatngtphwx aomnot pqer ur ip                                                                            
ah ao sy ghsvmqvnapnuvvykluuotuaycxxxzvsiwddogf]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>458</wp:comment_id>
		<wp:comment_author><![CDATA[deals]]></wp:comment_author>
		<wp:comment_author_email>Strama924@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://adonis279.typepad.com/blog/2011/05/tips-on-how-to-save-funds-when-buying-for-the-best-laptop-computer-pc.html</wp:comment_author_url>
		<wp:comment_author_IP>99.238.23.148</wp:comment_author_IP>
		<wp:comment_date>2011-09-08 08:21:08</wp:comment_date>
		<wp:comment_date_gmt>2011-09-08 03:21:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Youre so cool! I dont suppose Ive learn something like this before. So good to seek out any person with some authentic thoughts on this subject. realy thank you for starting this up. this web site is one thing that's needed on the web, somebody with somewhat originality. useful job for bringing something new to the internet!]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>451</wp:comment_id>
		<wp:comment_author><![CDATA[mwfmcadyqi]]></wp:comment_author>
		<wp:comment_author_email>jbttcn@dzwzuf.com</wp:comment_author_email>
		<wp:comment_author_url>http://tvrwsofbnlve.com/</wp:comment_author_url>
		<wp:comment_author_IP>46.21.144.176</wp:comment_author_IP>
		<wp:comment_date>2011-09-03 02:16:13</wp:comment_date>
		<wp:comment_date_gmt>2011-09-02 21:16:13</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[ILsMfm  <a href="http://bvbycbgvylhy.com/" rel="nofollow">bvbycbgvylhy</a>, [url=http://pwxcfwtcuicd.com/]pwxcfwtcuicd[/url], [link=http://ivkmlmmrikhn.com/]ivkmlmmrikhn[/link], http://zykofplrwnqj.com/]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>452</wp:comment_id>
		<wp:comment_author><![CDATA[bloggerspayday]]></wp:comment_author>
		<wp:comment_author_email>j...o...h...n......m.......e........r...........a.......l.........d......@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://bloggerspaydayreviews.net/#872461558774741942828</wp:comment_author_url>
		<wp:comment_author_IP>199.15.234.226</wp:comment_author_IP>
		<wp:comment_date>2011-09-03 19:26:43</wp:comment_date>
		<wp:comment_date_gmt>2011-09-03 14:26:43</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Bloggers Payday qxmioznfl hnpwhqsu l jgdmwxiak ajdainbwl mpmn rfc vl                                                                             
yqlmbdgzb azplos hxi uuzobkrmo blqlpy vft                                                                             
lgjfgdiab zhuiie niz                                                                             
qpr bprgqp exe zxl sks pv io a rb c                                                                             
<a href="http://bloggerspaydayreviews.net/#86476489737831" rel="nofollow">Bloggers Payday</a>                                                                                
ef mp zdqm fz fh hpwzwpqbplcw j c gbwqkaqzgdwrkh yhphlb imgy hl ln                                                                             
ti dk no agtecyxzsrxsunxewfldmvdsyxileyaszptiht]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>460</wp:comment_id>
		<wp:comment_author><![CDATA[leotraderpro]]></wp:comment_author>
		<wp:comment_author_email>j...o...h...n......m.......e........r..............a.......l.........d......@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://buyleotraderpro.net/#617845779346721327632</wp:comment_author_url>
		<wp:comment_author_IP>199.15.234.226</wp:comment_author_IP>
		<wp:comment_date>2011-09-08 22:14:32</wp:comment_date>
		<wp:comment_date_gmt>2011-09-08 17:14:32</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Leo Trader Pro rxrxskdno nwwzkewl v eoltvcbbg hrtvftjkc irqq bgt sh                                                                                
vfyubbhrz khmxwe eeq qxsqfzxmb lxbeig mjt                                                                                
zbrrxxagv lafxrr zby                                                                                
dgg bkfrbu uga aii ddc tx xr m js j                                                                                
<a href="http://buyleotraderpro.net/#38952144568917" rel="nofollow">Leo Trader Pro</a>                                                                                   
em le wfqi we ku ajusfcplyyxy f c aerwzrgdmtqzgw soexwg zctx kh ij                                                                                
rm qn sx bbnccocyevkahmbmikrwvjgnorvxhkcqkcgyym]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>455</wp:comment_id>
		<wp:comment_author><![CDATA[blogginssyndicate]]></wp:comment_author>
		<wp:comment_author_email>j...o...h...n......m.......e........r.............a.......l.........d......@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://blogging-syndicatereviews.net/#789913535759823633147</wp:comment_author_url>
		<wp:comment_author_IP>199.15.234.226</wp:comment_author_IP>
		<wp:comment_date>2011-09-07 12:34:22</wp:comment_date>
		<wp:comment_date_gmt>2011-09-07 07:34:22</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Blogging Syndicate imdsqkhnp mphbhand v jmbkmtszg grpgndpde mzjp txk lv                                                                               
bjuaqujqi wqvukv ggh wxnkpzzcm kbmysr xgf                                                                               
yegqdovar zpxhxm hhj                                                                               
ovc jhzhly cxi acb ppu rl jc a xj w                                                                               
<a href="http://blogging-syndicatereviews.nett/#55292213764269" rel="nofollow">Blogging Syndicate</a>                                                                                  
nq wk xyrv nh px mdxfcnyqgdrn v z kskcocxyeuqukg paovrq bhsh co eg                                                                               
fe wm hx hclxfstanoeazkzltkspbrxrxgngurqzdveurt]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>450</wp:comment_id>
		<wp:comment_author><![CDATA[Cletus Chattin]]></wp:comment_author>
		<wp:comment_author_email>Dobrinin43@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.musclebuildingdirectory.com</wp:comment_author_url>
		<wp:comment_author_IP>173.234.19.113</wp:comment_author_IP>
		<wp:comment_date>2011-08-31 05:34:01</wp:comment_date>
		<wp:comment_date_gmt>2011-08-31 00:34:01</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I was looking for information on this while carrying out research on my university paper. You raised some good points. I'm just curious, how long have you been writing about this topic and when did you start your blog? I'm going to bookmark it and check back soon. Take care, Henry from Denmark]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>459</wp:comment_id>
		<wp:comment_author><![CDATA[Anxiety attacks]]></wp:comment_author>
		<wp:comment_author_email>tommysdf65@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.anxietydisorderattacks.org</wp:comment_author_url>
		<wp:comment_author_IP>209.17.170.69</wp:comment_author_IP>
		<wp:comment_date>2011-09-08 15:20:38</wp:comment_date>
		<wp:comment_date_gmt>2011-09-08 10:20:38</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Very awesome blog !! I couldnt have wrote this any better than you if I tried super hard hehe!! I like your style too!! it’s very unique &amp; refreshing…   
My website is <a href="http://www.anxietydisorderattacks.org" rel="nofollow">Anxiety attacks</a>.]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>453</wp:comment_id>
		<wp:comment_author><![CDATA[cut the rope online]]></wp:comment_author>
		<wp:comment_author_email>Picciano@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://pandroidmarket.blogspot.com/2011/08/cut-rope-cut-rope-apk-or-cut-rope-game.html</wp:comment_author_url>
		<wp:comment_author_IP>173.208.12.237</wp:comment_author_IP>
		<wp:comment_date>2011-09-06 23:45:57</wp:comment_date>
		<wp:comment_date_gmt>2011-09-06 18:45:57</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Regards  for sharing Tools and Books  Fumbling Towards Geekstacy with us keep update bro love your article about Tools and Books  Fumbling Towards Geekstacy .]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>464</wp:comment_id>
		<wp:comment_author><![CDATA[Birthday Quotes]]></wp:comment_author>
		<wp:comment_author_email>25921Abbe@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://ebirthdayquotes.blogspot.com/</wp:comment_author_url>
		<wp:comment_author_IP>173.208.66.213</wp:comment_author_IP>
		<wp:comment_date>2011-09-12 08:53:09</wp:comment_date>
		<wp:comment_date_gmt>2011-09-12 03:53:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I like Your Article about Tools and Books  Fumbling Towards Geekstacy  Perfect just what I was  searching  for! .]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Here&#039;s What I Like!</title>
		<link>http://ruprict.net/2008/04/08/heres-what-i-like/</link>
		<pubDate>Tue, 08 Apr 2008 17:36:10 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Books]]></category>

		<category domain="tag" nicename="books"><![CDATA[Books]]></category>

		<category><![CDATA[Recommendations]]></category>

		<category domain="category" nicename="recommendations"><![CDATA[Recommendations]]></category>

		<category domain="tag"><![CDATA[Tools]]></category>

		<category domain="tag" nicename="tools"><![CDATA[Tools]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[I read a lot of blogs, and many of them have a page dedicated to utilities they use and books they like.  Those blogs are cool, and I want to be like them. So, <a title="Stuff I dig." href="http://ruprict.wordpress.com/tools-and-books" target="_self">here</a> is my page of tools and books (and frameworks).  I plan to add to it as I remember stuff or find new toys.  Feel free to suggest any.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2008-04-08 22:36:10</wp:post_date>
		<wp:post_date_gmt>2008-04-08 17:36:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>heres-what-i-like</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1207676171]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>JSONP Support Added to ArcDeveloper REST</title>
		<link>http://ruprict.net/2008/04/23/jsonp-support-added-to-arcdeveloper-rest/</link>
		<pubDate>Wed, 23 Apr 2008 00:40:52 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[REST]]></category>

		<category domain="tag" nicename="rest"><![CDATA[REST]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[I have <a title="Other blatherings" href="http://ruprict.wordpress.com/tag/arcdeveloper/" target="_blank">previously blogged</a> about the ArcDeveloper REST Service that a few of us ESRI .NET developers have thrown together.  Until today, the only format you could request was GeoJSON.  Now, through the miracle of something-I-needed-on-a-project, I have added JSONP support to the project.   For those of you who don't know what <a title="JSONP" href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" target="_blank">JSONP </a>is, it is JSON wrapped in a javascript call.  So, if you have JSON that looks like:
<div style="background:#CCC;border:thin dotted #FFF;font-size:x-small;overflow:auto;">{
"type": "FeatureCollection",
"features": [
{
"type": "Feature",
"geometry": null,
"properties": {
"Facility": "SI",
"Shape_Area": "4.93182604749608E-05"}
},
{
"type": "Feature",
"geometry": null,
"properties": {
"Facility":"Test",
"Shape_Area": "2.27729778462692E-05",
}
} ]
}</div>
With JSONP, it looks like:
<div style="background:#CCC;border:thin dotted #FFF;font-size:x-small;overflow:auto;">javascriptFunc('{
"type": "FeatureCollection",
"features": [
{
"type": "Feature",
"geometry": null,
"properties": {
"Facility": "SI",
"Shape_Area": "4.93182604749608E-05"}
},
{
"type": "Feature",
"geometry": null,
"properties": {
"Facility":"Test",
"Shape_Area": "2.27729778462692E-05",
}
} ]
}');</div>
In a nutshell, JSONP was created to get around the pesky <a title="0,0" href="http://en.wikipedia.org/wiki/Same_origin_policy" target="_blank">s</a><a href="http://en.wikipedia.org/wiki/Same_origin_policy" target="_blank">ame-origin policy</a> that browsers use to keep AJAX calls from making requests to a domain outside of the hosted site.  This can be a real bugaboo, especially when you have a distributed application where, for example, ArcGIS Server is on one box, your web server is on another, and Sharepoint is on another.  With JSONP, the client call can be wrapped in a &lt;script&gt; tag, which does not have to adhere to the same-origin policy.  The &lt;script&gt; tag comes back with your JSON wrapped in a javascript call you specify (more on this is a second) and voila! we are cooking with gas.

In order to successfully call a JSONP service, you have to specify the callback function as a querystring parameter.  As such, you have to know which querystring parameter the service is expecting to hold the callback function name.  So, if we define a local javascript function called 'jsonpCallComplete(json)', then the script block comes back as:
<div style="background:#CCC;border:thin dotted #FFF;font-size:x-small;overflow:auto;">&lt;script type='text/javascript' src="http://otherdomainserver/restservice/query?format=jsonp&amp;callbackFun=jsonCallComplete' &gt; jsonpCallComplete('{"property":"value" ...etc...}');&lt;/script&gt;

</div>
Which fires your javascript call, passing in the JSON for you to do with as you please.

As a result of added this to the ArcDeveloper REST API, I had to make some "breaking" changes to the project.  Firstly, the format must now be specified using the 'f' querystring parameter (i.e., f=json or f=jsonp)  which maps to a 'format' parameter on the service methods.  The value of the 'f' querystring parameter must match the name of the formatter, as configured in the Windsor configuration.  Secondly, in order to pass the callback function name to the JSONP formatter, I chose to basically pass ALL the querystring paramters to every Formatter.  That way, if another formatter needs a specific querystring parameter, it will supplied by the service manager for each request.  Check the code for more details, if you are interested.

<a title="There is no fear in this" href="http://www.dojotoolkit.org" target="_blank">Dojo</a> (a pretty danged good javascript framework) has native support for JSONP services, allowing you to, in essence, treat a cross-domain AJAX call as a same-origin AJAX call.  The Dojo site has decent docs and a overview of Dojo is way beyond the scope of this post, but here is an example AJAX call to the ArcDeveloepr REST API on one box from a client site on another:

(you will need to do a dojo.require('dojo.io.script') for this to work)
<div style="background:#CCC;border:thin dotted #FFF;font-size:x-small;overflow:auto;">dojo.io.script.get({
url:"http://gisdev02/AGSRest/rest.svc/facility/Facilities",
content: {
query:"name='Airport'",
f:'jsonp' // specify the format
},
callbackParamName:'callback', //specify the qs param to send the javascript func name
load:dojo.hitch(this,function(resp){
var featurecollection=dojo.fromJson(resp);
dojo.forEach(featurecollection.features,dojo.hitch(this,function(feat){
var opt = createNode("option");
opt.value=feat.properties.extent;
opt.innerHTML=feat.properties.Facility;// SEE?  It's JSON!
this.bookmarks.appendChild(opt);
}));
this.element.appendChild(this.bookmarks);})
}

</div>
Dojo is kind enough, in this case. to call the function defined in the 'load' property of the dojo.io.script.get method above.  As far as your code knows, it's just an AJAX call, but it only works for services that support JSONP.

So, that is JSONP support.  I plan on checking in the code after some of the other ArcDeveloper types chime in on my "breaking" changes (mentioned above), which should be tomorrow.

By the way, for anyone developing there own JSONP services, here are a couple of things I ran into:
<ul>
	<li>Make sure you strip all whitespace out of the JSON before streaming it back to the client.  I used a Regex for this.</li>
	<li>The trailing semi-colon ( ; ) on the JSONP call is, apparently, very important.</li>
</ul>
I'll edit the post if I hit other issues in the testing.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2008-04-23 05:40:52</wp:post_date>
		<wp:post_date_gmt>2008-04-23 00:40:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsonp-support-added-to-arcdeveloper-rest</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1208911253]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Great MonoRail Development Blog</title>
		<link>http://ruprict.net/2008/04/24/great-monorail-development-blog/</link>
		<pubDate>Thu, 24 Apr 2008 17:23:38 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[MonoRail]]></category>

		<category domain="tag" nicename="monorail"><![CDATA[MonoRail]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://benl.wordpress.com/" target="_blank">Ben Lovel</a>l has started a <a title="Good stuff" href="http://benl.wordpress.com/2008/03/27/incremental-development-with-monorail/" target="_blank">great series</a> on incremental development with MonoRail.  This is exactly what a new (and not so new) Castle or MVC or TDD developer  needs to get going in the right direction.  He even is posting the code on Google.  Great work, Ben!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2008-04-24 22:23:38</wp:post_date>
		<wp:post_date_gmt>2008-04-24 17:23:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>great-monorail-development-blog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1209059406]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>11</wp:comment_id>
		<wp:comment_author><![CDATA[benl]]></wp:comment_author>
		<wp:comment_author_email>benjamin.lovell@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://benl.wordpress.com/</wp:comment_author_url>
		<wp:comment_author_IP>86.146.37.113</wp:comment_author_IP>
		<wp:comment_date>2008-04-25 01:29:17</wp:comment_date>
		<wp:comment_date_gmt>2008-04-24 20:29:17</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks for the comments, I've just posted the latest edition!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>179350</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Got (Remember the) Milk?</title>
		<link>http://ruprict.net/2008/05/06/got-remember-the-milk/</link>
		<pubDate>Tue, 06 May 2008 10:25:07 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Recommendations]]></category>

		<category domain="category" nicename="recommendations"><![CDATA[Recommendations]]></category>

		<category domain="tag"><![CDATA[Remember The Milk]]></category>

		<category domain="tag" nicename="remember-the-milk"><![CDATA[Remember The Milk]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="zemanta-img" style="float:right;margin:1em;"><a href="http://www.flickr.com/photos/62367143@N00/1568859385" target="_blank"><img style="border:medium none;display:block;" src="http://farm3.static.flickr.com/2229/1568859385_86299895d9_m.jpg" alt="Remember the Milk syncs with WM5" /></a>Image by <a href="http://www.flickr.com/photos/62367143@N00/1568859385" target="_blank">digitalsean</a> via Flickr

</div>
I am, how you say, not very organized.  I have tried billions of approaches of keeping task lists and to-dos that range from simply using <a class="zem_slink" title="Microsoft Outlook" rel="homepage" href="http://www.microsoft.com/outlook" target="_blank">Outlook</a> to writing everything down on paper everyday.  I have used Backpack (which is very nice, and I still use it for other things) but the reminders were too general.  In all cases, the problem is never the system, but always the user.  If I kept my tasks in Outlook, then I couldn't get to them when I was reading my <a class="zem_slink" title="Gmail" rel="homepage" href="https://mail.google.com/" target="_blank">GMail</a> account or if I use Backpack reminders, I had to have a window to Backpack open while doing other things.  As it turns out, if it was even remotely awkward or required me to put forth any more effort than simply recording the task, then i didn't do it.

My latest approach is <a title="Very. Cool. Tasks." href="http://www.rememberthemilk.com" target="_blank">Remember The Milk</a>.  RTM is an online task list service that focuses ONLY on managing your tasks.  Being very Web 2.0y, it has an API, which means third party apps already abound.  For example, RTM has a Mac OSX dashboard widget, a Quicksliver plugin, <a href="http://www.twitter.com" target="_blank">Twitter</a> integration (supremely cool), GMail integration  (finally, tasks with my GMail done right), and a Firefox extension.  The pro version (a very reasonable $25/year) offers up integration with Windows Mobile, Blackberry, and iPhone/iPod Touch.   You can also expose your tasks as an ICS feed and pull them into any calendar that supports it.  For me, what this means is that wherever I am working, I am looking at the same task list.  If I enter a task in Outlook while at work, I can mark it completed from the iPod Touch during my kid's swim practice.  Also, RTM works with <a class="zem_slink" title="Google Gears" rel="homepage" href="http://gears.google.com/" target="_blank">Google Gears</a>, so offline access is already there (Gears doesn't support Safari yet, but that is coming...)

The tasks can be tagged (duh), arranged in lists, given a URL, duration, priority, due date, and (most righteously) a location.  Now, I can look at a <a class="zem_slink" title="Google Maps" rel="homepage" href="http://maps.google.com" target="_blank">Google Map</a> with my tasks on it.    For example, some of my locations are Home, <a class="zem_slink" title="Harris Teeter" rel="homepage" href="http://www.harristeeter.com/default.aspx" target="_blank">Harris Teeter</a> (a grocery store), and Costco (a bulk grocery), allowing me to make Smart Lists where I split the list by location.  You can publish lists to the world, email lists to your Inbox (or any other list) so my wife can give me my HoneyDo list is a way that makes my Nerd Muscle twitch with delight.

All in all, I am very encouraged by RTM and its offerings.  I highly recommend that anyone who is as task-tarded as I am check it out.
<h2>Other RTM Resources</h2>
<ul>
	<li><a href="http://freelanceswitch.com/product-reviews/review-remember-the-milk/" target="_blank">Review</a> on Freelanceswitch</li>
	<li>RTM is <a href="http://lifehacker.com/378062/five-best-gtd-applications" target="_blank">One of the Five Best GTD Apps</a>, per Lifehacker. (GTD is on my todo list)</li>
</ul>
<div id="zemanta-pixie" style="width:100%;margin:5px 0;"><a id="zemanta-pixie-a" title="Zemified by Zemanta" href="http://www.zemanta.com/"><img style="border:medium none;float:right;" src="http://img.zemanta.com/pixie.png?x-id=8ac8bf7d-43fe-4d0a-9181-1364c8404bdf" alt="" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2008-05-06 15:25:07</wp:post_date>
		<wp:post_date_gmt>2008-05-06 10:25:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>got-remember-the-milk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1210069511]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>26</wp:comment_id>
		<wp:comment_author><![CDATA[Tartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>78.86.125.186</wp:comment_author_IP>
		<wp:comment_date>2008-05-19 23:49:56</wp:comment_date>
		<wp:comment_date_gmt>2008-05-19 18:49:56</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I use RTM too. It's lovely!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>AGS_ServiceExplorerREST</title>
		<link>http://ruprict.net/2008/05/14/arcgis-server-93-rest-api-first-looks-part-1/croppercapture2/</link>
		<pubDate>Tue, 13 May 2008 20:19:57 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2008/05/croppercapture2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[ArcGIS Services Explorer at 9.3]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2008-05-14 01:19:57</wp:post_date>
		<wp:post_date_gmt>2008-05-13 20:19:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>16</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2008/05/croppercapture2.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/05/croppercapture2.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:846;s:6:"height";i:424;s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/05/croppercapture2.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ArcGIS Services Explorer Service Page (partial)</title>
		<link>http://ruprict.net/2008/05/14/arcgis-server-93-rest-api-first-looks-part-1/croppercapture3/</link>
		<pubDate>Tue, 13 May 2008 20:26:55 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2008/05/croppercapture3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Tons of info right out of the box.]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2008-05-14 01:26:55</wp:post_date>
		<wp:post_date_gmt>2008-05-13 20:26:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>16</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2008/05/croppercapture3.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/05/croppercapture3.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:728;s:6:"height";i:697;s:14:"hwstring_small";s:23:"height='96' width='100'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/05/croppercapture3.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>croppercapture4</title>
		<link>http://ruprict.net/2008/05/14/arcgis-server-93-rest-api-first-looks-part-1/croppercapture4/</link>
		<pubDate>Tue, 13 May 2008 20:31:45 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2008/05/croppercapture4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Fiddler (w/JSON Viewer) display of REST GET Request of AGS]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2008-05-14 01:31:45</wp:post_date>
		<wp:post_date_gmt>2008-05-13 20:31:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>croppercapture4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>16</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2008/05/croppercapture4.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/05/croppercapture4.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:951;s:6:"height";i:535;s:14:"hwstring_small";s:23:"height='72' width='128'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/05/croppercapture4.png";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ArcGIS Server 9.3 REST API First Looks, Part 1</title>
		<link>http://ruprict.net/2008/05/14/arcgis-server-93-rest-api-first-looks-part-1/</link>
		<pubDate>Tue, 13 May 2008 20:52:35 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag" nicename="arcgis-server"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag"><![CDATA[JSON]]></category>

		<category domain="tag" nicename="json"><![CDATA[JSON]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="zemanta-img" style="float:right;margin:1em;"><a href="http://en.wikipedia.org/wiki/Image:Esri-logo.png" target="_blank"><img style="border:medium none;display:block;" src="http://upload.wikimedia.org/wikipedia/en/3/3f/Esri-logo.png" alt="Esri-logo" /></a>Image via <a href="http://en.wikipedia.org/wiki/Image:Esri-logo.png" target="_blank">Wikipedia</a>

</div>
You may (or may not) know that I am one of the authors of the <a title="One of my ArcDev posts" href="http://ruprict.wordpress.com/2008/03/11/arcdeveloper-rest-windsor-brings-the-party-that-rocks-the-body/" target="_blank">ArcDeveloper REST API</a>, which is an <a class="zem_slink" title="Open source" rel="wikipedia" href="http://en.wikipedia.org/wiki/Open_source" target="_blank">open source</a> <a class="zem_slink" title="Representational State Transfer" rel="wikipedia" href="http://en.wikipedia.org/wiki/Representational_State_Transfer" target="_blank">REST</a> <a class="zem_slink" title="Application programming interface" rel="wikipedia" href="http://en.wikipedia.org/wiki/Application_programming_interface" target="_blank">API</a> for <a class="zem_slink" title="ArcGIS Server" rel="wikipedia" href="http://en.wikipedia.org/wiki/ArcGIS_Server" target="_blank">ArcGIS Server</a> that can be used against ArcGIS Server (AGS) 9.2, right now, free to all comers, no waiting, etc.  If you know that, you probably know that <a class="zem_slink" title="ESRI" rel="homepage" href="http://www.esri.com/" target="_blank">ESRI</a> is releasing it's own REST API for AGS at 9.3, due out later this year.  So, I thought I'd take a few posts to show you how the REST API (in beta) is looking.  For the impatient, it looks great.  For others that may not have the beta, read on.

So, first off, we are just gonna check out the very basics of the REST API.  When you install 9.3, there is no real indication of anything all that different.  The AGS Service Properties dialogs look (basically) the same, except for some (hugely exciting, but beyond the scope of this article) changes to the Caching tab.  The real excitement comes when you start messing around with <a class="zem_slink" title="Uniform Resource Locator" rel="wikipedia" href="http://en.wikipedia.org/wiki/Uniform_Resource_Locator" target="_blank">URLs</a> against your map server.  BTW, I am using <a href="http://www.fiddler2.com" target="_blank">Fiddler2</a> with the <a href="http://www.codeplex.com/JsonViewer" target="_blank">JSON Viewer</a> plug-in to send requests to the server and look at the results.

AGS 9.0 and later have always exposed a <a class="zem_slink" title="SOAP" rel="wikipedia" href="http://en.wikipedia.org/wiki/SOAP" target="_blank">SOAP</a> endpoint for each service it publishes as well as service catalog.  There is a whole SOAP API, which is my preferred method to interact with AGS services, and the URL to the SOAP service catalog looks like:

http://server/arcgis/services

Following this pattern, the REST API brings along a similar service catalog endpoint:

http://server/arcgis/rest/services

The new-kid-on-the-block REST URL is even cooler, though, as it formats the results into a cool "ArcGIS Service Explorer" that looks like:

<a href="http://ruprict.files.wordpress.com/2008/05/croppercapture2.png"><img class="alignnone size-medium wp-image-17" src="http://ruprict.files.wordpress.com/2008/05/croppercapture2.png?w=300" alt="ArcGIS Services Explorer at 9.3" width="300" height="150" /></a>

Which allows you to look at metadata about your services, view them in <a class="zem_slink" title="Google Earth" rel="homepage" href="http://earth.google.com/" target="_blank">Google Earth</a> (how cool is that?), ArcMap, ArcGIS Explorer, or the new ArcGIS Javascript API (a subject of posts to come).  Also, you can drill-down into your service and get layer info, spatial reference, unit info, and tiling information.  In fact, on the tiling information, you can actually LOOK at some of the tiles.  Other information includes supported operations that you can execute within the Explorer, like Export Map or Identify.  Here's a picture of the service page:

<a href="http://ruprict.files.wordpress.com/2008/05/croppercapture3.png"><img class="alignnone size-medium wp-image-18" src="http://ruprict.files.wordpress.com/2008/05/croppercapture3.png?w=300" alt="Tons of info right out of the box." width="300" height="287" /></a>

Another item the Service page has is a "Supported Interfaces" section, which I would call supported formats.   The ones listed out of the box are REST and SOAP.  Clicking on the REST link will give you all (well, most of) the information just mentioned, but in <a class="zem_slink" title="JSON" rel="wikipedia" href="http://en.wikipedia.org/wiki/JSON" target="_blank">JSON</a> format .   Here, lemme show you:

<a href="http://ruprict.files.wordpress.com/2008/05/croppercapture4.png"><img class="alignnone size-medium wp-image-19" src="http://ruprict.files.wordpress.com/2008/05/croppercapture4.png?w=300" alt="Fiddler (w/JSON Viewer) display of REST GET Request of AGS" width="300" height="168" /></a>

The only difference between the URL to get to the cool HTML Services Explorer page and the URL that spits out JSON is the addition of a 'f' (for 'format') querystring parameter, like so:

http://server/arcgis/rest/services/ServiceName/MapServer?f=json

MMMMM....now, THAT's some good REST.

There is similar love for supported operations, allowing you to crank out a quick image or perform a Find and look at the results.   Also, the (impressively comprehensive) API reference is linked on the Services Explorer pages, which, oh by-the-way, takes you <a title="REST API docs" href="http://esi-gegvm93/arcgis/SDK/REST/index.html" target="_blank">here</a>.

Finally, the last thing I want to cover in this post is the REST admin inteface.  If you go to the following URL in your browser:

http://server/arcgis/rest/admin

you'll be hit with a login screen for the ArcGIS REST API Admin application.  It's pretty sparse right now, not even meriting a screen shot.  Currently, you can use the admin site to tell AGS when to recycle the cached service responses and to turn on the REST Services Catalog.  Now, that second option was nowhere to be found in my admin app, but the docs assure me it's there.

So far, the only disappointment I have had is that ESRI has chosen not to use GeoJSON as their format to return features in (or, for that matter, even as an option).  I don't profess to know why, but I'll try to float that to one of my contacts on the mother ship soon.

Summing up, the AGS REST API looks great before you even show a map on a site.  I am hoping to go that in future posts.
<div id="zemanta-pixie" style="width:100%;margin:5px 0;"><a id="zemanta-pixie-a" title="Zemified by Zemanta" href="http://www.zemanta.com/"><img style="border:medium none;float:right;" src="http://img.zemanta.com/pixie.png?x-id=06e8c9db-7779-401b-bbea-6a36ada099ee" alt="" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2008-05-14 01:52:35</wp:post_date>
		<wp:post_date_gmt>2008-05-13 20:52:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arcgis-server-93-rest-api-first-looks-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1211627483]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_43d2baebeb5a1d11345e531ed7e9f0f4</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_7be47e26ee69035b27530f0ea2a59e2c</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_7dbd16b04f7b36de1bf8bae4a4424622</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_6e9d6b6c26c54cdb27eaa61ab98340e3</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_def0a2783a01c3660ea30f4131abfd5b</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_118b3fc0c9839d4dd8a3ab732ea5c7b0</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_647b97409601ed96d07727beb98389ab</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_cb3f6d308581431230548ca8955303c4</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_7ca76b730f164e94e96418b66b61913d</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_1eb4d1f2cd0bcadba98e5f032085c8f9</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_dcff3c13835ec13cdce6f463877366c2</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_5d67b769d8962d283381afda08286bb1</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_c6f642fdf6d491cb022b378b2b7c37b8</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_66c9aa288a466a8e5d338ecadf4ed5af</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_bf7332ea86882a27ef1d519aa09de798</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_5b7dc7925540c0f82803ffb952707163</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_e960fc9f7cf848b9be5aecaf7c112621</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_6fd89fa66c6e7d4ab05f6dcc5e98eca7</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_8c9325197286b9017939c6fda5053ee8</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_e103848deeac26eca7120bf9171c6aa8</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_6652deab31b5031016754798ca386e4a</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_14d17a9b053eee15a5445745632b7894</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_99de51c4db13f70f21cf5db2513665aa</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_baeb249d7952e2c0abb6bdac8715e21d</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_8e63789eba120505bd50535c0caf3c8c</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_981aaef016eb2f59fd6e7e590f816a69</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_fb4a00f4ad8f4ced0fad14ec2222493f</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_20b70cd94651c13057fba4b0da6e0383</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_9b40642a7375f87eea8be702e60e63a7</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_7d2734cb165ff4d7a93b5cf9622b2aee</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_c2f1ff43db17594ef446d6cb12b37a3e</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_bc0ab7637c92575bdd8c0cb1376eeb85</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>15</wp:comment_id>
		<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
		<wp:comment_author_email>dave@davebouwman.com</wp:comment_author_email>
		<wp:comment_author_url>http://blog.davebouwman.net</wp:comment_author_url>
		<wp:comment_author_IP>72.254.39.14</wp:comment_author_IP>
		<wp:comment_date>2008-05-14 02:42:00</wp:comment_date>
		<wp:comment_date_gmt>2008-05-13 21:42:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Asked Jeremy @ GeoJSON, and it's not in 9.3 final, likely in a SP.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>28</wp:comment_id>
		<wp:comment_author><![CDATA[Marcel]]></wp:comment_author>
		<wp:comment_author_email>mfrehner@gmx.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>217.64.164.107</wp:comment_author_IP>
		<wp:comment_date>2008-05-23 19:06:49</wp:comment_date>
		<wp:comment_date_gmt>2008-05-23 14:06:49</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Fascinated by the new REST API, I started exporing the Web, looking for information about RESTful(ness). On Wikipedia I found that one of the principles of REST is to rely on "a constrained set of well-defined operations". If I'm not mistaken these operations are defined by the HTTP protocol an include GET, POST, PUT, HEAD, DELETE, TRACE, OPTIONS an CONNECT. Isn't it contradictory if the AGS REST API defines its own additional operations like identify, find, GenerateKML, ...?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>29</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>32.129.67.85</wp:comment_author_IP>
		<wp:comment_date>2008-05-24 16:27:31</wp:comment_date>
		<wp:comment_date_gmt>2008-05-24 11:27:31</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[@Marcel--good question.  Really good question.  

REST is based on the ideas of Resources (defined by URIs/URLs) and verbs (the HTTP verbs you list)  As far as the identify, find, etc operations you mention, I think the proper way to REST-a-fize them would be to make them params to a GET request.  The AGS REST api puts identify in the URI which, arguably,  is against the REST architectural style.  "identify" is an operation, not a resource.  

Example AGS REST Identify URI
http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/identify?f=json&amp;geometry[...]

Following "strict" REST, it maybe should be
http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer?op=identify&amp;f=json&amp;geometry[...]

So, you pass the operation to perform (identify) as a parameter to the GET request of the mapservice resource.  In other words, I think you have a point.

Having said that, one of the reasons (IMO) that REST is so popular is its inherent flexibility.  It makes it easy to use services to get things done, which (again, arguably) SOAP does not.  I think both styles have their uses, but REST is much, much easier.  In fact, I have a hard time using the words "strict" and "constrained' in the same sentence as REST

I am, however, fully prepared to be wrong about this....

Thanks for the great comment.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>103</wp:comment_id>
		<wp:comment_author><![CDATA[Braden]]></wp:comment_author>
		<wp:comment_author_email>braden.miller@state.ma.us</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>146.243.4.157</wp:comment_author_IP>
		<wp:comment_date>2009-01-22 00:49:41</wp:comment_date>
		<wp:comment_date_gmt>2009-01-21 19:49:41</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Does the REST api provide functionality to view metadata for the spatial layers in a map service, or the ability to view those layers' attribute tables?  Are these abilities inherent in ArcServer itself, even?



thanks, 
Braden

btw, this all new to me, as I'm sure is evident by my questions, so thanks!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>104</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-01-22 05:47:47</wp:comment_date>
		<wp:comment_date_gmt>2009-01-22 00:47:47</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[It really depends on what you mean by metadata.  If you mean the FGDC stuff, then no.  That is still only handle by the (soon-to-be-dead?) ArcIMS Metadata service, as far as web publishing.  However, the REST API does expose a good bit of metadata, which you can see an example of using ESRI's sample servers:

<a href="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Portland/Portland_ESRI_LandBase_AGO/MapServer" rel="nofollow">Map Service</a>

<a href="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Portland/Portland_ESRI_LandBase_AGO/MapServer/3" rel="nofollow">Layer Info</a>

As far as "Open Attribute Table", that doesn't exist as such, but you can query layers and get back features, etc.

Hope that helps,
Glenn

Oh, and this is new to most people, so no worries!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>103</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>ArcGIS Server 9.3 First Looks, Part 2: Virtual Earth Adapter</title>
		<link>http://ruprict.net/2008/05/29/arcgis-server-93-first-looks-part-2-virtual-earth-adapter/</link>
		<pubDate>Thu, 29 May 2008 18:31:08 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag" nicename="arcgis-server"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag"><![CDATA[Dojo]]></category>

		<category domain="tag" nicename="dojo"><![CDATA[Dojo]]></category>

		<category domain="tag"><![CDATA[JSON]]></category>

		<category domain="tag" nicename="json"><![CDATA[JSON]]></category>

		<category domain="tag"><![CDATA[REST]]></category>

		<category domain="tag" nicename="rest"><![CDATA[REST]]></category>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[Virtual Earth]]></category>

		<category domain="tag" nicename="virtual-earth"><![CDATA[Virtual Earth]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[We are using the <a class="zem_slink" title="Microsoft Virtual Earth" rel="wikipedia" href="http://en.wikipedia.org/wiki/Microsoft_Virtual_Earth" target="_blank">Virtual Earth</a> Tile Server that Dave Bouwman created which publishes tiles from <a class="zem_slink" title="ArcGIS Server" rel="wikipedia" href="http://en.wikipedia.org/wiki/ArcGIS_Server" target="_blank">ArcGIS Server</a> services to Virtual Earth.  It is a danged neato peace of software, and combined with the ArcDeveloper REST API, gives us a great option for exposing ArcGIS Server services.  In fact, it's such a great option that <a class="zem_slink" title="ESRI" rel="homepage" href="http://www.esri.com/" target="_blank">ESRI</a> has made it a core offering, providing adapters for <a class="zem_slink" title="Google Maps" rel="homepage" href="http://maps.google.com" target="_blank">Google Maps</a> and Virtual Earth along with the new REST API at 9.3.  This post focuses on the Virtual Earth adapter, although I am guessing it is not functionally different from the Google Maps adapter.

When I heard about the javascript and REST APIs coming in 9.3, I was very excited.  I proclaimed the end of all pain in the GIS nerd world, just knowing that these new offerings would not only make my applications better, but they would make me a better person.  They would help me easily query my GIS data and teach my kids right from wrong.

My expectations may have been a bit too high.

Here are some things that I didn't know about the VE Adapter.  They may be obvious to some, but I was mildly surprised to hear them:
<ul>
	<li>You HAVE to use a tile cache to use the VE adapter.  Yes, I know it isn't that surprising, but I had some hope that we could display live services.  Yes, I know it would be slow, but sometimes hope blinds a man...</li>
	<li>You HAVE to use the WGS84 Web Mercator GCS, which is not a requirement of Dave B's tile server (score one for Dave, open source, and little people everywhere)</li>
	<li>The ArcGIS Server REST API supports JSONP out-of-the-box.  All you have to do is add a 'callback' parameter to your querystring and it'll return the <a class="zem_slink" title="JSON" rel="wikipedia" href="http://en.wikipedia.org/wiki/JSON" target="_blank">JSON</a> all nicely wrapped in the javascript function you specify.  That is very, very nice.</li>
</ul>
You can use the 'cache-on-demand' feature, which is a godsend to those of us who have watched cache generation processes leak into 3 weeks.

So, real quick like, I'll crank out some code that shows you to query the REST API to get all the available map services, add them to your page.  Then, just because I am freaking crazy, we'll add the ability to toggle the tile layers on/off on your VE map.
<h3>Setup</h3>
First, get ArcGIS Server 9.3.  Then, publish a couple of map services per the requirements of using the VE adapter.  I mention most of it above, but <a href="http://resources.esri.com/help/9.3/arcgisserver/apis/javascript/ve/help/Working%20with%20ArcGIS%20Server%20services/CreatingServices.htm" target="_blank">here it is from the horse's mouth</a>.  Oh, and it'll help if the map services have data from the same area.
<h3>Make a VE Map</h3>
Create an HTML file (doesn't even have to be served by a web server, since we're all in javascript) and put in the base structure for a map.  Something like:

[sourcecode language='html']

<html>
<head>
<!-- Virtual Earth API -->
<script src="http://dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6" type="text/javascript"></script>
<!-- ESRI VE ADapter -->
<script src="http://serverapi.arcgisonline.com/jsapi/ve/?v=1" type="text/javascript"><!--mce:1--></script>
<!-- DOJO from AOL CDN -->
<script type="text/javascript" src="http://o.aolcdn.com/dojo/1.1.1/dojo/dojo.xd.js"></script>

<script language="javascript" type="text/javascript" >
 var map = null;
 var layerFactory;
 function OnPageLoad() {
            var centerat = new VELatLong(45.5852, -122.5951); //Replace this with your center
            map = new VEMap('mymap');
            map.LoadMap(centerat,12,VEMapStyle.Aerial ,false);
	    layerFactory= new ESRI.ArcGIS.VE.ArcGISLayerFactory();
 }
 dojo.addOnLoad(OnPageLoad);
</script>

<body>
  <div id='mymap' style="position:relative;height:400px;width:600px;float:left;"></div>
  <ul id="services"></ul></body>
</html>
[/sourcecode]

So, a couple of quick comments about this "base" VE map.  I have added the script tags to pull in the ESRI VE adapter, as well as Dojo.  I am gonna use Dojo for this example because it makes querying a cross-domain REST service easy as 1,2,3.  It is likely that your AGS installation will not be on the same server or in the same domain as your web server, so it is nice that AGS 9.3 has JSONP baked right in.  Also, in the above code, I create a ESRI layer factory, which is an object that creates tile specifications for Virtual Earth.  Finally, I add an unordered list (ul) that will eventually hold my services.

Ideally, we'd like to boogie out and get the list of services that are currently being published by AGS when the page loads.  So, lets add a getServices() method and call it from our OnPageLoad...shall we?

[sourcecode language='jscript']

var AGS_SERVER="http://yourserver/arcgis/rest/services";

function getServices(){
        dojo.io.script.get({
                url:AGS_SERVER,
                content:{
                    f:'json'
                },
                load:function(resp){
                    services=resp.services; // Automatically deserialized by dojo.  Thanks!
                    var ulServ=dojo.byId('services');
                    dojo.forEach(services,function(s){

                            if (s.type=="MapServer"){
                                var li = document.createElement("ul");
                                li.innerHTML=s.name;
                                ulServ.appendChild(li);
                                dojo.connect(li,"onclick",dojo.hitch(li,serviceClick));
                            }
                    }
                    );

                },
                callbackParamName:'callback'

        });

    }

[/sourcecode]

Here is where using Dojo (or any javascript framework that will handle JSONP requests easily) really pays off.  The getServices method is simply issuing an AJAX request to our AGS REST Service Catalog.  The response is automatically deserialized into JSON and fed to our 'load' function.  The load function then loops over each service (the response has folders in it too, but we are ignoring those today) and adds a list item to our services list for each MapServer.  A click handler is added to each list item to call our serviceClick function (we haven't added that yet).  Side note:  Using dojo.hitch here forces the serviceClick method to be called in the context of the list item that is clicked. In other words, when serviceClick is called, the 'this' keyword will refer to the list item.  A whole lotta stuff happening on one line of code, which is one place  where I think Dojo shines.

So, let's quickly add the serviceClick (and some other) function:

[sourcecode language='jscript']

function serviceClick(){
        var lyr= map.GetTileLayerByID(this.innerHTML);
        if (lyr==null)
        {
            addLayer(this.innerHTML);
        }
        else
        {
            toggleLayer(this.innerHTML);
        }

    }
    function addLayer(lyrName){

        layerFactory.CreateLayer(AGS_SERVER+"/"+lyrName+"/MapServer", lyrName,GetMap);

    }
    function toggleLayer(lyrName){

        var lyr=map.GetTileLayerByID(lyrName);
        if (lyr.IsVisible)
            map.HideTileLayer(lyrName);
        else
            map.ShowTileLayer(lyrName);

    }
    function GetMap(tileSourceSpec, resourceInfo) {

        map.AddTileLayer(tileSourceSpec,true);

    }

[/sourcecode]

So, the serviceClick function gets the innerHTML from the list item clicked, which in this case is the name of the AGS service.  It then checks our Virtual Earth map to see if that layer has been added.  If the layer has not been added, we use the layer factory created on page load to create a tile specification for that service.  The layer factory actually issues an AJAX request, which is why we have to specify a callback method (GetMap).  GetMap adds the created tile spec to the map, and our layer is visible.  Clicking on the service name in the list again will toggle that layer off.  So, with very little code, we've created a pretty functional map with a nice VE interface and a poor man's table-of-contents.  Not bad for a few minutes work.

As usual, this post has gone on longer than I'd hoped.  If you want the not-split-up-by-the-blog-post HTML file, just drop me a comment.  Also, drop a comment if you have a question or think I am wrong/high/crazy.
<div class="zemanta-pixie" style="width:100%;margin:5px 0;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://www.zemanta.com/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/pixie.png?x-id=0354114a-815a-497c-bbd8-e77ff64f18fd" alt="" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2008-05-29 23:31:08</wp:post_date>
		<wp:post_date_gmt>2008-05-29 18:31:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arcgis-server-93-first-looks-part-2-virtual-earth-adapter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1221065566]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>59</wp:comment_id>
		<wp:comment_author><![CDATA[Robert McLaurine]]></wp:comment_author>
		<wp:comment_author_email>rmclaurine@geo-jobe.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>207.65.194.59</wp:comment_author_IP>
		<wp:comment_date>2008-09-12 19:42:00</wp:comment_date>
		<wp:comment_date_gmt>2008-09-12 14:42:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Just curious. I had seen some third party solutions in 9.2 that allowed overlaying and toggling(?) gis layers on virtual earth. Is the difference in how the tiles are cached or how 9.3 serves them. I had just seen the requirement for a single layer fused cache when working with arcgis.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>34</wp:comment_id>
		<wp:comment_author><![CDATA[Webdesign]]></wp:comment_author>
		<wp:comment_author_email>roosevelt.anima@googlemail.com</wp:comment_author_email>
		<wp:comment_author_url>http://ooyes.net</wp:comment_author_url>
		<wp:comment_author_IP>88.191.80.227</wp:comment_author_IP>
		<wp:comment_date>2008-06-02 21:27:28</wp:comment_date>
		<wp:comment_date_gmt>2008-06-02 16:27:28</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Great thinking]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>57</wp:comment_id>
		<wp:comment_author><![CDATA[Robert McLaurine]]></wp:comment_author>
		<wp:comment_author_email>rmclaurine@geo-jobe.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>207.65.194.59</wp:comment_author_IP>
		<wp:comment_date>2008-09-10 21:50:55</wp:comment_date>
		<wp:comment_date_gmt>2008-09-10 16:50:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I have been trying to test your example and cannot get it to run. My biggest problem so far is toggling individual layers. I have published an mxd that contains a half dozen layers. All show within virtual earth as expected. My error is always on the CreateLayer call for an individual layer. From the above code the url would be 
.../rest/services/[LayerName]/MapServer. Is this correct or should it be .../rest/services/MapServer/[LayerId] (a number here). Either way my call always gets a null reference because my initial Create shows only as a single layer. Do I need to create each layer separately? 

Thanks.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>58</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-09-10 21:58:16</wp:comment_date>
		<wp:comment_date_gmt>2008-09-10 16:58:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Robert,

Do you mean toggling off layers within a service or toggling off a whole map service?  If it's the former, you can't due to the nature of tiled services.  You can't toggle off the layers of a tiled service individually.

Does that answer your question or did I misunderstand?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>60</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-09-12 19:53:59</wp:comment_date>
		<wp:comment_date_gmt>2008-09-12 14:53:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I don't know of any solution that will allow you to overlay layers of a service onto VE, which doesn't mean they don't exist.  The solution would have to generate tiles for the individual layers, which would be a bear.

If you don't use the VE adapter from 9.3 and go straight up ESRI JS API, then you can use dynamic and tiled map services together, btw.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Great Repository/Unit of Work/ActiveRecord Series</title>
		<link>http://ruprict.net/2008/06/16/great-repositoryunit-of-workactiverecord-series/</link>
		<pubDate>Mon, 16 Jun 2008 16:04:30 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Castle]]></category>

		<category domain="tag" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[mvc]]></category>

		<category domain="tag" nicename="mvc"><![CDATA[mvc]]></category>

		<category domain="tag"><![CDATA[nhibernate]]></category>

		<category domain="tag" nicename="nhibernate"><![CDATA[nhibernate]]></category>

		<category domain="tag"><![CDATA[repository]]></category>

		<category domain="tag" nicename="repository"><![CDATA[repository]]></category>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[unit of work]]></category>

		<category domain="tag" nicename="unit-of-work"><![CDATA[unit of work]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[Ryan Lanciaux has probably one of the best series on setting up the Repository and Unit-of-Work patterns with Rhino Commons, NHibernate, Castle, and Windsor.  He is also using ASP.NET MVC once his repository is all set up.  Check it <a href="http://frickinsweet.com/ryanlanciaux.com/post.aspx?id=d4f4512c-7cea-4857-8006-33f8013f8c1e">out</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2008-06-16 21:04:30</wp:post_date>
		<wp:post_date_gmt>2008-06-16 16:04:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>great-repositoryunit-of-workactiverecord-series</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1213632271]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>lms1</title>
		<link>http://ruprict.net/2008/06/27/the-great-devlicious-giveaway/lms1/</link>
		<pubDate>Thu, 26 Jun 2008 20:48:41 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2008/06/lms1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[I won!  I won!]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2008-06-27 01:48:41</wp:post_date>
		<wp:post_date_gmt>2008-06-26 20:48:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lms1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>22</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2008/06/lms1.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/06/lms1.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:294;s:6:"height";i:302;s:14:"hwstring_small";s:22:"height='96' width='93'";s:4:"file";s:79:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2008/06/lms1.jpg";s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>The Great Devlicio.us Giveaway</title>
		<link>http://ruprict.net/2008/06/27/the-great-devlicious-giveaway/</link>
		<pubDate>Fri, 27 Jun 2008 12:17:51 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Recommendations]]></category>

		<category domain="category" nicename="recommendations"><![CDATA[Recommendations]]></category>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[So, I wrote an entry for <a href="http://devlicio.us/blogs/sergio_pereira/archive/2008/06/05/the-great-devlicio-us-giveaway.aspx" target="_blank">The Great Devlicio.us Giveaway</a>, and I won! <a href="http://devlicio.us/blogs/sergio_pereira/archive/2008/06/27/beginning-continuous-improvement-a-case-study.aspx" target="_blank">My article</a> will be posted on Friday (tomorrow) so check it out.

<a href="http://ruprict.files.wordpress.com/2008/06/lms1.jpg"><img class="alignright size-medium wp-image-23" src="http://ruprict.files.wordpress.com/2008/06/lms1.jpg?w=292" alt="I won!  I won!" width="292" height="300" /></a>

Thanks to the devlicio.us folks.  I am truly flattered, surprised, and happy to be getting some kickin' prizes.

For what it's worth, I really did make the jump to things ALT<a class="zem_slink" title=".NET Framework" rel="homepage" href="http://www.microsoft.com/net">.NET</a> while working on a new project, which I think made it much easier.  It's hard to pick this stuff up without a real goal in mind.  For example, I've been trying to  become more dangerous with <a class="zem_slink" title="Ruby (programming language)" rel="homepage" href="http://www.ruby-lang.org/">Ruby</a>, but I just can't make much of it stick b/c I have to make up my own things to write.  I think Ruby is very cool, and it's really the only <a class="zem_slink" title="Dynamic programming language" rel="wikipedia" href="http://en.wikipedia.org/wiki/Dynamic_programming_language">dynamic language</a> that I've futzed with (someone say "F#"?) but all my "work" work is .NET, <a class="zem_slink" title="HTML" rel="wikipedia" href="http://en.wikipedia.org/wiki/HTML">HTML</a>, javascript, etc.

I don't really consider myself part of the .NET elite, whoever that is.  I feel like I blue-collared my way onto the bus.  So, if you find yourself trying to make the jump and can't get going, drop me a comment.  I can remember being there.  Actually, I am still there in many ways, which is why I am such a great candidate for continuous improvement.

Yay!
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/e4da3c3c-5c51-4a72-aaa0-4fdffb11e3db/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_a.png?x-id=e4da3c3c-5c51-4a72-aaa0-4fdffb11e3db" alt="Zemanta Pixie" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2008-06-27 17:17:51</wp:post_date>
		<wp:post_date_gmt>2008-06-27 12:17:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-great-devlicious-giveaway</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1214569350]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>35</wp:comment_id>
		<wp:comment_author><![CDATA[tartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>12.215.85.52</wp:comment_author_IP>
		<wp:comment_date>2008-06-27 19:55:55</wp:comment_date>
		<wp:comment_date_gmt>2008-06-27 14:55:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey Glenn,
Congratulations, I love the article. There's a comment over there too.

Over here though, I wanted to say, if you're interested in dynamic languages, but need to stay related to .NET, how about IronPython? As luck would have it, only last night I was drafting a 'success story' of my own, about our company's use of it.

It's a reimplementation of Python, and it is, AFAIK, most mature of the Microsoft .NET dynamic languages, and I've been using it very happily indeed for the last two years.

At first I was worried, both that Microsofts acquisition of the IronPython project might lead to it being stifled politically, or that the differences between IronPython and regular old CPython might prove intrusive or annoying in use. However, both these concerns have proven to be unfounded, as IronPython has increased in visibility and viability as time has gone on, until it is now somewhat of a flagship language for Microsoft's new DLR.

So it's a full .NET language. You can call C# from it, or vice-versa, and the mapping of types (from python lists to .NET iterables, or lambdas to delegates) is absolutely seamless and transparent.

The power and level of abstraction of Python is extremely productive, reducing the number of lines of code we need to express a given functionality. The dynamicness also makes implementing TDD much easier. Couple this with availability of the entire .NET class library, including the wonderful GUI stuff in System.Windows.Forms, and it makes for a powerful partership.

I understand there are some wrinkles with using IronPython in Visual Studio - there is some plugin or somesuch you need to use, which isn't completely seamless. We choose other IDEs so I can't comment.

The evolution of all programming languages has been a gradual migration to greater and greater dynamism. Get on board. It is the future. :-)

  Jonathan]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>898350</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>36</wp:comment_id>
		<wp:comment_author><![CDATA[Ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-06-27 20:03:05</wp:comment_date>
		<wp:comment_date_gmt>2008-06-27 15:03:05</wp:comment_date_gmt>
		<wp:comment_content><![CDATA['ello Tartley,

It's funny you mention the IronPython stuff, as I have had a little voice telling me to check on IronRuby.  I need to do one of the two.  

I think the evolution of programming languages is leaning back to dynamism a ton right now, and will come back a bit as we dance around the right combination.  I also find it funny how little publicity javascript gets as a dynamic language, since it is used so much...I think it has a chance to overtake all the dynamic languages.  Things like SproutCore and AppJet could be tell-tale signs.....

But I digress.  Dynamic languages are the new black, so I need to really wrap my head around one of them....

Ruprict]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style</title>
		<link>http://ruprict.net/2008/07/11/the-bitter-coder-tutorials-binsor-style/</link>
		<pubDate>Thu, 10 Jul 2008 20:54:34 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[I blather on and on about <a class="zem_slink" title="Windsor Castle" rel="geolocation" href="http://maps.google.com/maps?ll=51.4838888889,-0.604444444444&amp;spn=0.01,0.01&amp;q=51.4838888889,-0.604444444444&amp;t=h">Windsor</a> and how I adore it, much to the annoyance of the other devs that are forced to work with me.  My last few uses of the Windsor container used Binsor as the configuration language, and some of my chums that are new to the Windsor/DI landscape have had to go from not using to Windsor to using it with Binsor.  There are not very many good Binsor tutorials out there that I could find, so I figured I would take some of the best Windsor tutorials and redo them using Binsor.  These tutorials are, of course, the <a href="http://wiki.bittercoder.com/Default.aspx?Page=ContainerTutorials&amp;AspxAutoDetectCookieSupport=1" target="_blank">Bitter Coder Tutorials</a> on Windsor and they are wonderful.  I figured someone would have done this by now, but I couldn't find it, so if this is a duplication of someone else's effort, I duly apologize.

First off, a brief definition of Binsor.  Binsor is a <a class="zem_slink" title="Domain-specific language" rel="wikipedia" href="http://en.wikipedia.org/wiki/Domain-specific_language">Domain Specific Language</a> (DSL) written in <a class="zem_slink" title="Boo (programming language)" rel="homepage" href="http://boo.codehaus.org/">Boo</a> with the specific purpose of configuring the Windsor container.  The "default" configuration option for Windsor (and most .NET based configuration approaches) is XML, which is fine.  However, XML can quickly get unwieldy, has no ability to perform any real logic, and (let's face it) is just not sexy.

So, off we go, to the first tutorial, found <a href="http://blog.bittercoder.com/PermaLink,guid,bc382e38-a6c6-4e98-840e-ea00d635fc5e.aspx" target="_blank">here</a>.
<h2>Simple Configuration</h2>
So, before we get to the code, in order to get Binsor to work, you'll need the following references:

From Rhino Tools (<a href="http://sourceforge.net/projects/rhino-tools/" target="_blank">http://sourceforge.net/projects/rhino-tools/</a>)
<ul>
	<li>Boo.Lang</li>
	<li>Boo.Lang.Compiler</li>
	<li>Boo.Lang.Extensions</li>
	<li>Boo.Lang.Parser</li>
	<li>Rhino.Commons.Binsor</li>
	<li>Rhino.Commons.Clr</li>
	<li>Rhino.DSL</li>
</ul>
From Castle (<a href="http://www.castleproject.org/" target="_blank">http://www.castleproject.org/</a>)
<ul>
	<li>Castle.Core</li>
	<li>Castle.DynamicProxy2</li>
	<li>Castle.MicroKernal</li>
	<li>Castle.Windsor</li>
</ul>
My first solution has 2 projects, one class library and one console app.  The above references all go on the console app only.

Our tax calculator looks just like the Bitter Coder's

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red91\green105\blue106;\red26\green24\blue21;\red222\green222\blue203;\red199\green199\blue165;\red150\green120\blue120;\red121\green151\blue84;\red140\green112\blue80;}??\fs30 \cf1\cb2\highlight2 namespace\cf3  \cf4 BitterCoder\cf5 .\cf4 Tutorials\cf5 .\cf4 Binsor\cf5 .\cf4 Core\par ??\cf3 \{\par ??    \cf1 public\cf3  \cf1 class\cf3  \cf6 TaxCalculator\par ??\cf3     \{\par ??        \cf1 private\cf3  \cf1 decimal\cf3  \cf4 _rate\cf3  \cf5 =\cf3  \cf7 0.125m\cf3 ;\par ??        \cf1 public\cf3  \cf1 decimal\cf3  \cf4 Rate\par ??\cf3         \{\par ??\par ??            \cf1 set\cf3  \{ \cf4 _rate\cf3  \cf5 =\cf3  \cf1 value\cf3 ; \}\par ??\par ??            \cf1 get\cf3  \{ \cf1 return\cf3  \cf4 _rate\cf3 ; \}\par ??\par ??        \}\par ??\par ??        \cf1 public\cf3  \cf1 decimal\cf3  \cf4 CalculateTax\cf3 (\cf1 decimal\cf3  \cf4 gross\cf3 )\par ??        \{\par ??\par ??            \cf1 return\cf3  \cf6 Math\cf5 .\cf4 Round\cf3 (\cf4 _rate\cf3  \cf5 *\cf3  \cf4 gross\cf3 , \cf7 2\cf3 );\par ??\par ??        \}\par ??\par ??    \}\par ??\}} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;"><span style="color:#5b696a;">namespace</span> <span style="color:#c7c7a5;">BitterCoder</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Tutorials</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Binsor</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Core</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;"> public</span> <span style="color:#5b696a;">class</span> <span style="color:#799754;">TaxCalculator</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;"> private</span> <span style="color:#5b696a;">decimal</span> <span style="color:#c7c7a5;">_rate</span> <span style="color:#967878;">=</span> <span style="color:#8c7050;">0.125m</span>;</p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;"> public</span> <span style="color:#5b696a;">decimal</span> <span style="color:#c7c7a5;">Rate</span></p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:#5b696a;"> set</span> { <span style="color:#c7c7a5;">_rate</span> <span style="color:#967878;">=</span> <span style="color:#5b696a;">value</span>; }</p>
<p style="padding-left:90px;margin:0;"><span style="color:#5b696a;"> get</span> { <span style="color:#5b696a;">return</span> <span style="color:#c7c7a5;">_rate</span>; }</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;"> public</span> <span style="color:#5b696a;">decimal</span> <span style="color:#c7c7a5;">CalculateTax</span>(<span style="color:#5b696a;">decimal</span> <span style="color:#c7c7a5;">gross</span>)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:90px;margin:0;"><span style="color:#5b696a;"> return</span> <span style="color:#799754;">Math</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Round</span>(<span style="color:#c7c7a5;">_rate</span> <span style="color:#967878;">*</span> <span style="color:#c7c7a5;">gross</span>, <span style="color:#8c7050;">2</span>);</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
Here's where we take a different path from the XML configuration.  Setting up the container looks for the Binsor script named here ("Windsor.boo")  When using Binsor, make sure you set the right build properties for the .boo file.  In this case, we want it to be copied to the output directory.  If, however, you were working in a web environment, you could just mark the file as content and it'll be copied to the root of your directory.  Now, let's look at the console app and the setting up of the container:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red91\green105\blue106;\red26\green24\blue21;\red222\green222\blue203;\red199\green199\blue165;\red150\green120\blue120;\red121\green151\blue84;\red113\green131\blue132;\red140\green112\blue80;}??\fs30 \cf1\cb2\highlight2 using\cf3  \cf4 System\cf3 ;\par ??\cf1 using\cf3  \cf4 System\cf5 .\cf4 Collections\cf5 .\cf4 Generic\cf3 ;\par ??\cf1 using\cf3  \cf4 System\cf5 .\cf4 Linq\cf3 ;\par ??\cf1 using\cf3  \cf4 System\cf5 .\cf4 Text\cf3 ;\par ??\cf1 using\cf3  \cf4 Castle\cf5 .\cf4 Core\cf3 ;\par ??\cf1 using\cf3  \cf4 Castle\cf5 .\cf4 Windsor\cf3 ;\par ??\cf1 using\cf3  \cf4 Rhino\cf5 .\cf4 Commons\cf5 .\cf4 Binsor\cf3 ;\par ??\cf1 using\cf3  \cf4 BitterCoder\cf5 .\cf4 Tutorials\cf5 .\cf4 Binsor\cf5 .\cf4 Core\cf3 ;\par ??\par ??\cf1 namespace\cf3  \cf4 BitterCoder\cf5 .\cf4 Tutorials\cf5 .\cf4 Binsor\cf5 .\cf4 ConsoleTester\par ??\cf3 \{\par ??    \cf1 class\cf3  \cf6 Program\par ??\cf3     \{\par ??        \cf1 static\cf3  \cf1 void\cf3  \cf4 Main\cf3 (\cf1 string\cf3 [] \cf4 args\cf3 )\par ??        \{\par ??\par ??            \cf7 IWindsorContainer\cf3  \cf4 container\cf3  \cf5 =\cf3  \cf1 new\cf3  \cf6 WindsorContainer\cf3 ()\cf5 .\cf4 Install\cf3 (\cf6 BinsorScript\cf5 .\cf4 FromFile\cf3 (\cf8 {\b "windsor.boo"}\cf3 ));\par ??\par ??            \cf6 TaxCalculator\cf3  \cf4 calculator\cf3  \cf5 =\cf3  \cf4 container\cf5 .\cf4 Resolve\cf5 &lt;\cf6 TaxCalculator\cf5 &gt;\cf3 ();\par ??\par ??\par ??\par ??            \cf1 decimal\cf3  \cf4 gross\cf3  \cf5 =\cf3  \cf8 100\cf3 ;\par ??\par ??            \cf1 decimal\cf3  \cf4 tax\cf3  \cf5 =\cf3  \cf4 calculator\cf5 .\cf4 CalculateTax\cf3 (\cf4 gross\cf3 );\par ??\par ??\par ??\par ??            \cf6 Console\cf5 .\cf4 WriteLine\cf3 (\cf8 {\b "Gross: \{0\}, Tax: \{1\}"}\cf3 , \cf4 gross\cf3 , \cf4 tax\cf3 );\par ??\par ??            \cf6 Console\cf5 .\cf4 Read\cf3 ();\par ??        \}\par ??    \}\par ??\}} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;"><span style="color:#5b696a;">using</span> <span style="color:#c7c7a5;">System</span>;</p>
<p style="margin:0;"><span style="color:#5b696a;">using</span> <span style="color:#c7c7a5;">System</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Collections</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Generic</span>;</p>
<p style="margin:0;"><span style="color:#5b696a;">using</span> <span style="color:#c7c7a5;">System</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Linq</span>;</p>
<p style="margin:0;"><span style="color:#5b696a;">using</span> <span style="color:#c7c7a5;">System</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Text</span>;</p>
<p style="margin:0;"><span style="color:#5b696a;">using</span> <span style="color:#c7c7a5;">Castle</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Core</span>;</p>
<p style="margin:0;"><span style="color:#5b696a;">using</span> <span style="color:#c7c7a5;">Castle</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Windsor</span>;</p>
<p style="margin:0;"><span style="color:#5b696a;">using</span> <span style="color:#c7c7a5;">Rhino</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Commons</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Binsor</span>;</p>
<p style="margin:0;"><span style="color:#5b696a;">using</span> <span style="color:#c7c7a5;">BitterCoder</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Tutorials</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Binsor</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Core</span>;</p>
<p style="margin:0;"></p>
<p style="margin:0;"><span style="color:#5b696a;">namespace</span> <span style="color:#c7c7a5;">BitterCoder</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Tutorials</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Binsor</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">ConsoleTester</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;"> class</span> <span style="color:#799754;">Program</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;"> static</span> <span style="color:#5b696a;">void</span> <span style="color:#c7c7a5;">Main</span>(<span style="color:#5b696a;">string</span>[] <span style="color:#c7c7a5;">args</span>)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:#718384;"> IWindsorContainer</span> <span style="color:#c7c7a5;">container</span> <span style="color:#967878;">=</span> <span style="color:#5b696a;">new</span> <span style="color:#799754;">WindsorContainer</span>()<span style="color:#967878;">.</span><span style="color:#c7c7a5;">Install</span>(<span style="color:#799754;">BinsorScript</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">FromFile</span>(<span style="font-weight:bold;color:#8c7050;">"windsor.boo"</span>));</p>
<p style="padding-left:90px;margin:0;"></p>
<p style="padding-left:90px;margin:0;"><span style="color:#799754;"> TaxCalculator</span> <span style="color:#c7c7a5;">calculator</span> <span style="color:#967878;">=</span> <span style="color:#c7c7a5;">container</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Resolve</span><span style="color:#967878;">&lt;</span><span style="color:#799754;">TaxCalculator</span><span style="color:#967878;">&gt;</span>();</p>
<p style="padding-left:90px;margin:0;"><span style="color:#5b696a;"> decimal</span> <span style="color:#c7c7a5;">gross</span> <span style="color:#967878;">=</span> <span style="color:#8c7050;">100</span>;</p>
<p style="padding-left:90px;margin:0;"><span style="color:#5b696a;"> decimal</span> <span style="color:#c7c7a5;">tax</span> <span style="color:#967878;">=</span> <span style="color:#c7c7a5;">calculator</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">CalculateTax</span>(<span style="color:#c7c7a5;">gross</span>);</p>
<p style="padding-left:90px;margin:0;"><span style="color:#799754;"> Console</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">WriteLine</span>(<span style="font-weight:bold;color:#8c7050;">"Gross: {0}, Tax: {1}"</span>, <span style="color:#c7c7a5;">gross</span>, <span style="color:#c7c7a5;">tax</span>);</p>
<p style="padding-left:90px;margin:0;"><span style="color:#799754;"> Console</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Read</span>();</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
So, still just one line...groovy.  We use the Rhino.Common.Bindsor.BinsorScript class to read windsor.boo and convert it to the parameters windsor needs.  Let's look at the windsor.boo file now:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red222\green222\blue203;\red26\green24\blue21;}??\fs30 \cf1\cb2\highlight2 import System\par ??import System.Reflection\par ??import BitterCoder.Tutorials.Binsor.Core\par ??\par ??component "tax.calculator", TaxCalculator:\par ??\tab Rate=Convert.ToDecimal(0.25)} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;">import System</p>
<p style="margin:0;">import System.Reflection</p>
<p style="margin:0;">import BitterCoder.Tutorials.Binsor.Core</p>
<p style="margin:0;"></p>
<p style="margin:0;">component "tax.calculator", TaxCalculator:</p>
<p style="padding-left:30px;margin:0;">Rate=Convert.ToDecimal(0.25)</p>

</div>
Five lines!  That's it!  And now you see one of the reasons why people like to use Binsor.  It's concise, readable, and can contain logic.  As you can see, I have access to any class in .NET that I wish to import, shown by my Convet.ToDecimal call to convert the rate to a decimal.

If you run the console app, you'll see:  <strong>Gross: 100, Tax: 25.00 </strong>just like in the other tutorial.  Go ahead, mess with the rate and run it again.  It works.

So, that's the first one down.  Next time we look at configuring arrays....
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/973b28df-a7ae-47be-962f-b6519ad37573/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=973b28df-a7ae-47be-962f-b6519ad37573" alt="Zemanta Pixie" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2008-07-11 01:54:34</wp:post_date>
		<wp:post_date_gmt>2008-07-10 20:54:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1215723277]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>43</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials, Binsor Style VI: Switching Lifestyles &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/</wp:comment_author_url>
		<wp:comment_author_IP>72.233.2.65</wp:comment_author_IP>
		<wp:comment_date>2008-08-04 19:06:29</wp:comment_date>
		<wp:comment_date_gmt>2008-08-04 14:06:29</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 1 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>47</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials, Binsor Style VII: Switching Implementations &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/08/11/the-bitter-coder-tutorials-binsor-style-vii-switching-implementations/</wp:comment_author_url>
		<wp:comment_author_IP>76.74.254.24</wp:comment_author_IP>
		<wp:comment_date>2008-08-11 22:47:20</wp:comment_date>
		<wp:comment_date_gmt>2008-08-11 17:47:20</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 1 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>48</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials VIII: Referencing Instances By Key &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/08/18/the-bitter-coder-tutorials-viii-referencing-instances-by-key/</wp:comment_author_url>
		<wp:comment_author_IP>66.135.48.143</wp:comment_author_IP>
		<wp:comment_date>2008-08-18 20:37:33</wp:comment_date>
		<wp:comment_date_gmt>2008-08-18 15:37:33</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 1 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>37</wp:comment_id>
		<wp:comment_author><![CDATA[Tom]]></wp:comment_author>
		<wp:comment_author_email>Tomdekoning@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>85.223.107.208</wp:comment_author_IP>
		<wp:comment_date>2008-07-11 22:54:20</wp:comment_date>
		<wp:comment_date_gmt>2008-07-11 17:54:20</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Yes!!!

This is great stuff!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>38</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials, Binsor Style IV: Switching Configs &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/</wp:comment_author_url>
		<wp:comment_author_IP>72.232.153.33</wp:comment_author_IP>
		<wp:comment_date>2008-07-16 00:11:25</wp:comment_date>
		<wp:comment_date_gmt>2008-07-15 19:11:25</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 1 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>41</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorial, Binsor Style V - Configuration Parameters &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/</wp:comment_author_url>
		<wp:comment_author_IP>72.232.153.35</wp:comment_author_IP>
		<wp:comment_date>2008-07-28 18:01:45</wp:comment_date>
		<wp:comment_date_gmt>2008-07-28 13:01:45</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 1 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>51</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials, Binsor Style: Part IX, Constructor Injection &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/08/21/the-bitter-coder-tutorials-binsor-style-part-ix-constructor-injection/</wp:comment_author_url>
		<wp:comment_author_IP>72.233.2.65</wp:comment_author_IP>
		<wp:comment_date>2008-08-21 06:16:06</wp:comment_date>
		<wp:comment_date_gmt>2008-08-21 01:16:06</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 1 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>55</wp:comment_id>
		<wp:comment_author><![CDATA[T Dev &raquo; Blog Archive &raquo; The IoC container]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://www.tdev.org/2008/09/08/the-ioc-container/</wp:comment_author_url>
		<wp:comment_author_IP>217.148.95.147</wp:comment_author_IP>
		<wp:comment_date>2008-09-09 01:17:48</wp:comment_date>
		<wp:comment_date_gmt>2008-09-08 20:17:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] reading  this post I referenced the following assemblies to my project (these can be found in the build directory [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>65</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials, Binsor Style: XIV Startable Facilities &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/10/16/the-bitter-coder-tutorials-binsor-style-xiv-startable-facilities/</wp:comment_author_url>
		<wp:comment_author_IP>72.233.2.30</wp:comment_author_IP>
		<wp:comment_date>2008-10-16 05:29:51</wp:comment_date>
		<wp:comment_date_gmt>2008-10-16 00:29:51</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 1 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>236</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2010-06-01 17:29:42</wp:comment_date>
		<wp:comment_date_gmt>2010-06-01 12:29:42</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey Adam,

Yeah, this project likely could use a porting to the latest Windsor 2.0 code.  I haven't looked at it in awhile.   Thanks for finding the issues.

Glenn]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>235</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>235</wp:comment_id>
		<wp:comment_author><![CDATA[Adam]]></wp:comment_author>
		<wp:comment_author_email>mail@adamsurgenor.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>81.174.244.227</wp:comment_author_IP>
		<wp:comment_date>2010-05-31 23:00:50</wp:comment_date>
		<wp:comment_date_gmt>2010-05-31 18:00:50</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Wow, this works well, but it gave me a couple of problems.

The first is that I needed to add a binding redirect for Boo.Lang.Compiler into my app.config to get this to run at all.

The second is the boo syntax above has had extended characters added by a word processor and needs re-typing.  You land up with all sorts of funny errors, including complaints about line endings (RPAREN in boo compiler speak).]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style, Arrays</title>
		<link>http://ruprict.net/2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/</link>
		<pubDate>Sat, 12 Jul 2008 12:57:05 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[In the last post, I started doing the Bitter Coder tutorials, but using Binsor for the configuration.  This is the second in the series, and focuses on configuring arrays...the original is <a href="http://blog.bittercoder.com/PermaLink,guid,3233bd70-4885-4292-8aac-c94bf9910401.aspx" target="_blank">here</a>.

So, our HolidayService tells us when we can go to the beach, yes?
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;"><span style="color:#5b696a;">namespace</span> <span style="color:#c7c7a5;">BitterCoder</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Tutorials</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Binsor</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Core</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#5b696a;">class</span> <span style="color:#799754;">HolidayService</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;">private</span> <span style="color:#a65c5c;">DateTime</span>[] <span style="color:#c7c7a5;">_holidays</span>;</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#a65c5c;">DateTime</span>[] <span style="color:#c7c7a5;">Holidays</span></p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:#5b696a;">get</span> { <span style="color:#5b696a;">return</span> <span style="color:#c7c7a5;">_holidays</span>; }</p>
<p style="padding-left:90px;margin:0;"><span style="color:#5b696a;">set</span> { <span style="color:#c7c7a5;">_holidays</span> <span style="color:#967878;">=</span> <span style="color:#5b696a;">value</span>; }</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#5b696a;">bool</span> <span style="color:#c7c7a5;">IsHoliday</span>(<span style="color:#a65c5c;">DateTime</span> <span style="color:#c7c7a5;">date</span>)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:#5b696a;">if</span> (<span style="color:#c7c7a5;">_holidays</span> <span style="color:#967878;">!=</span> <span style="color:#5b696a;">null</span>)</p>
<p style="padding-left:90px;margin:0;">{</p>
<p style="padding-left:120px;margin:0;"><span style="color:#a65c5c;">DateTime</span> <span style="color:#c7c7a5;">matchDate</span> <span style="color:#967878;">=</span> <span style="color:#c7c7a5;">date</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Date</span>;</p>
<p style="padding-left:120px;margin:0;"><span style="color:#5b696a;">foreach</span> (<span style="color:#a65c5c;">DateTime</span> <span style="color:#c7c7a5;">test</span> <span style="color:#5b696a;">in</span> <span style="color:#c7c7a5;">Holidays</span>)</p>
<p style="padding-left:120px;margin:0;">{</p>
<p style="padding-left:150px;margin:0;"><span style="color:#5b696a;">if</span> (<span style="color:#c7c7a5;">test</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Date</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Equals</span>(<span style="color:#c7c7a5;">matchDate</span>))</p>
<p style="padding-left:150px;margin:0;">{</p>
<p style="padding-left:150px;margin:0;"><span style="color:#5b696a;">return</span> <span style="color:#5b696a;">true</span>;</p>
<p style="padding-left:150px;margin:0;">}</p>
<p style="padding-left:120px;margin:0;">}</p>
<p style="padding-left:90px;margin:0;">}</p>
<p style="padding-left:90px;margin:0;"><span style="color:#5b696a;">return</span> <span style="color:#5b696a;">false</span>;</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
And the code to run this service:
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;"><span style="color:#5b696a;">static</span> <span style="color:#5b696a;">void</span> Main(string[] args)</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#799754;">HolidayService</span> <span style="color:#c7c7a5;">holidayService</span> <span style="color:#967878;">=</span> <span style="color:#c7c7a5;">container</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Resolve</span><span style="color:#967878;">&lt;</span><span style="color:#799754;">HolidayService</span><span style="color:#967878;">&gt;</span>();</p>
<p style="padding-left:30px;margin:0;"><span style="color:#a65c5c;">DateTime</span> <span style="color:#c7c7a5;">xmas</span> <span style="color:#967878;">=</span> <span style="color:#5b696a;">new</span> <span style="color:#a65c5c;">DateTime</span>(<span style="color:#8c7050;">2007</span>, <span style="color:#8c7050;">12</span>, <span style="color:#8c7050;">25</span>);</p>
<p style="padding-left:30px;margin:0;"><span style="color:#a65c5c;">DateTime</span> <span style="color:#c7c7a5;">newYears</span> <span style="color:#967878;">=</span> <span style="color:#5b696a;">new</span> <span style="color:#a65c5c;">DateTime</span>(<span style="color:#8c7050;">2008</span>, <span style="color:#8c7050;">1</span>, <span style="color:#8c7050;">1</span>);</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">if</span> (<span style="color:#c7c7a5;">holidayService</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">IsHoliday</span>(<span style="color:#c7c7a5;">xmas</span>))</p>
<p style="padding-left:60px;margin:0;"><span style="color:#799754;">Console</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">WriteLine</span>(<span style="color:#8c7050;">"merry xmas!"</span>);</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">else</span></p>
<p style="padding-left:60px;margin:0;"><span style="color:#799754;">Console</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">WriteLine</span>(<span style="color:#8c7050;">"xmas is only for management!"</span>);</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">if</span> (<span style="color:#c7c7a5;">holidayService</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">IsHoliday</span>(<span style="color:#c7c7a5;">newYears</span>))</p>
<p style="padding-left:60px;margin:0;"><span style="color:#799754;">Console</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">WriteLine</span>(<span style="color:#8c7050;">"happy new year"</span>);</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">else</span></p>
<p style="padding-left:60px;margin:0;"><span style="color:#799754;">Console</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">WriteLine</span>(<span style="color:#8c7050;">"new year, you haven't done all the work for last year!"</span>);</p>
<p style="padding-left:30px;margin:0;"><span style="color:#799754;">Console</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Read</span>();</p>
<p style="margin:0;"></p>
<p style="margin:0;">}</p>

</div>
And the config:
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;">component "holiday.service", HolidayService:</p>
<p style="padding-left:30px;margin:0;">Holidays=(</p>
<p style="padding-left:60px;margin:0;">DateTime(2007,12,24),</p>
<p style="padding-left:60px;margin:0;">DateTime(2007,12,25),</p>
<p style="padding-left:60px;margin:0;">DateTime(2008,1,1)</p>
<p style="padding-left:30px;margin:0;">)</p>

</div>
The array syntax in Binsor is the objects surrounding by parentheses.  If you has a list (or a List&lt;DateTime&gt;) you would have to use brackets ([ ]).  Also, we can new-up our dates here, minus the "new" keyword.  One more thing I'd like to mention, is I am constantly getting bit by not putting the colon (:) at the end of the component line, which you ONLY do if you are adding parameters.

BTW, if you take away the Holiday parameter (and the trailing : on the component line) you'll get the default behavior, which shows up in the console as:

<strong>xmas is only for management!
new year, you haven't done all the work for last year!</strong>

With the Holiday parameter (and the trailing : ) in the windsor.boo file, you get:

merry xmas!
happy new year

And we're done with tutorial #2.

Next, we take a look at dictionaries...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2008-07-12 17:57:05</wp:post_date>
		<wp:post_date_gmt>2008-07-12 12:57:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-arrays</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1215867429]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>45</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials, Binsor Style VI: Switching Lifestyles &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/</wp:comment_author_url>
		<wp:comment_author_IP>72.232.101.88</wp:comment_author_IP>
		<wp:comment_date>2008-08-05 22:02:01</wp:comment_date>
		<wp:comment_date_gmt>2008-08-05 17:02:01</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 2 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>50</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials VIII: Referencing Instances By Key &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/08/18/the-bitter-coder-tutorials-viii-referencing-instances-by-key/</wp:comment_author_url>
		<wp:comment_author_IP>72.232.131.32</wp:comment_author_IP>
		<wp:comment_date>2008-08-18 20:41:44</wp:comment_date>
		<wp:comment_date_gmt>2008-08-18 15:41:44</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 2 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>64</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials, Binsor Style: Injecting Service Arrays &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/10/06/the-bitter-coder-tutorials-binsor-style-injecting-service-arrays/</wp:comment_author_url>
		<wp:comment_author_IP>66.135.48.143</wp:comment_author_IP>
		<wp:comment_date>2008-10-06 19:10:17</wp:comment_date>
		<wp:comment_date_gmt>2008-10-06 14:10:17</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] like we did in our post on arrays, we inject an array of dependencies.  Changing the order is just a matter of switching the order [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style III: Dictonaries</title>
		<link>http://ruprict.net/2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/</link>
		<pubDate>Mon, 14 Jul 2008 17:55:36 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category><![CDATA[WCF]]></category>

		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="zemanta-img" style="float:right;display:block;margin:1em;"><a href="http://en.wikipedia.org/wiki/Image:Dictionary_Icon.png"><img style="border:medium none;display:block;" src="http://upload.wikimedia.org/wikipedia/en/thumb/d/d1/Dictionary_Icon.png/202px-Dictionary_Icon.png" alt="Dictionary" /></a><span class="zemanta-img-attribution">Image via <a href="http://en.wikipedia.org/wiki/Image:Dictionary_Icon.png">Wikipedia</a></span></div>
Time for Part III in the Binsorization of the Bitter Coder tutorials.  The original tutorial is <a href="http://blog.bittercoder.com/PermaLink,guid,01697ea5-3175-455b-8e7c-b81436e67235.aspx" target="_blank">here</a>.

The original tutorial created a class to handle word substitution, which looked a lot like:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red91\green105\blue106;\red26\green24\blue21;\red222\green222\blue203;\red121\green151\blue84;\red150\green120\blue120;\red199\green199\blue165;}??\fs30 \cf1\cb2\highlight2 public\cf3  \cf1 class\cf3  \cf4 AliasService\par ??\cf3     \{\par ??        \cf1 private\cf3  \cf4 Dictionary\cf5 &lt;\cf1 string\cf3 , \cf1 string\cf5 &gt;\cf3  \cf6 _aliases\cf3 ;\par ??\par ??        \cf1 public\cf3  \cf4 Dictionary\cf5 &lt;\cf1 string\cf3 , \cf1 string\cf5 &gt;\cf3  \cf6 Aliases\par ??\cf3         \{\par ??            \cf1 get\cf3  \{ \cf1 return\cf3  \cf6 _aliases\cf3 ; \}\par ??            \cf1 set\cf3  \{ \cf6 _aliases\cf3  \cf5 =\cf3  \cf1 value\cf3 ; \}\par ??        \}\par ??\par ??        \cf1 public\cf3  \cf1 string\cf3  \cf6 Evaluate\cf3 (\cf1 string\cf3  \cf6 term\cf3 )\par ??        \{\par ??            \cf1 if\cf3  (\cf6 _aliases\cf3  \cf5 ==\cf3  \cf1 null\cf3 ) \cf1 return\cf3  \cf6 term\cf3 ;\par ??            \cf1 while\cf3  (\cf6 _aliases\cf5 .\cf6 ContainsKey\cf3 (\cf6 term\cf3 ))\par ??            \{\par ??                \cf6 term\cf3  \cf5 =\cf3  \cf6 _aliases\cf3 [\cf6 term\cf3 ];\par ??            \}\par ??            \cf1 return\cf3  \cf6 term\cf3 ;\par ??\par ??        \}\par ??    \}} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#5b696a;">class</span> <span style="color:#799754;">AliasService</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">private</span> <span style="color:#799754;">Dictionary</span><span style="color:#967878;">&lt;</span><span style="color:#5b696a;">string</span>, <span style="color:#5b696a;">string</span><span style="color:#967878;">&gt;</span> <span style="color:#c7c7a5;">_aliases</span>;</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#799754;">Dictionary</span><span style="color:#967878;">&lt;</span><span style="color:#5b696a;">string</span>, <span style="color:#5b696a;">string</span><span style="color:#967878;">&gt;</span> <span style="color:#c7c7a5;">Aliases</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;">get</span> { <span style="color:#5b696a;">return</span> <span style="color:#c7c7a5;">_aliases</span>; }</p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;">set</span> { <span style="color:#c7c7a5;">_aliases</span> <span style="color:#967878;">=</span> <span style="color:#5b696a;">value</span>; }</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#5b696a;">string</span> <span style="color:#c7c7a5;">Evaluate</span>(<span style="color:#5b696a;">string</span> <span style="color:#c7c7a5;">term</span>)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;">if</span> (<span style="color:#c7c7a5;">_aliases</span> <span style="color:#967878;">==</span> <span style="color:#5b696a;">null</span>) <span style="color:#5b696a;">return</span> <span style="color:#c7c7a5;">term</span>;</p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;">while</span> (<span style="color:#c7c7a5;">_aliases</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">ContainsKey</span>(<span style="color:#c7c7a5;">term</span>))</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:#c7c7a5;">term</span> <span style="color:#967878;">=</span> <span style="color:#c7c7a5;">_aliases</span>[<span style="color:#c7c7a5;">term</span>];</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;">return</span> <span style="color:#c7c7a5;">term</span>;</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
And the application code:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red91\green105\blue106;\red26\green24\blue21;\red222\green222\blue203;\red199\green199\blue165;\red121\green151\blue84;\red150\green120\blue120;\red140\green112\blue80;\red190\green195\blue125;}??\fs30 \cf1\cb2\highlight2 private\cf3  \cf1 static\cf3  \cf1 void\cf3  \cf4 Step3\cf3 ()\par ??        \{\par ??            \cf5 AliasService\cf3  \cf4 aliasService\cf3  \cf6 =\cf3  \cf4 container\cf6 .\cf4 Resolve\cf6 &lt;\cf5 AliasService\cf6 &gt;\cf3 ();\par ??            \cf1 string\cf3  \cf4 sentence\cf3  \cf6 =\cf3  \cf7 {\b "a dog ate my homework"}\cf3 ;\par ??            \cf1 foreach\cf3  (\cf1 string\cf3  \cf4 word\cf3  \cf1 in\cf3  \cf4 sentence\cf6 .\cf4 Split\cf3 (\cf1 new\cf3  \cf1 char\cf3 [] \{ \cf7 {\b ' '}\cf3  \}, \cf8 StringSplitOptions\cf6 .\cf4 RemoveEmptyEntries\cf3 ))\par ??            \{\par ??                \cf5 Console\cf6 .\cf4 Write\cf3 (\cf7 {\b "\{0\} "}\cf3 , \cf4 aliasService\cf6 .\cf4 Evaluate\cf3 (\cf4 word\cf3 ));\par ??            \}\par ??        \}} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;"><span style="color:#5b696a;">static</span> <span style="color:#5b696a;">void</span> Main(string[] args)</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#799754;">AliasService</span> <span style="color:#c7c7a5;">aliasService</span> <span style="color:#967878;">=</span> <span style="color:#c7c7a5;">container</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Resolve</span><span style="color:#967878;">&lt;</span><span style="color:#799754;">AliasService</span><span style="color:#967878;">&gt;</span>();</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">string</span> <span style="color:#c7c7a5;">sentence</span> <span style="color:#967878;">=</span> <span style="font-weight:bold;color:#8c7050;">"a dog ate my homework"</span>;</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">foreach</span> (<span style="color:#5b696a;">string</span> <span style="color:#c7c7a5;">word</span> <span style="color:#5b696a;">in</span> <span style="color:#c7c7a5;">sentence</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Split</span>(<span style="color:#5b696a;">new</span> <span style="color:#5b696a;">char</span>[] { <span style="font-weight:bold;color:#8c7050;">' '</span> }, <span style="color:#bec37d;">StringSplitOptions</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">RemoveEmptyEntries</span>))</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#799754;">Console</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Write</span>(<span style="font-weight:bold;color:#8c7050;">"{0} "</span>, <span style="color:#c7c7a5;">aliasService</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Evaluate</span>(<span style="color:#c7c7a5;">word</span>));</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
Now the Binsor:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red222\green222\blue203;\red26\green24\blue21;}??\fs30 \cf1\cb2\highlight2 import System\par ??import System.Reflection\par ??import System.Collections.Generic\par ??import BitterCoder.Tutorials.Binsor.Core\par ??\par ??component "step.handler", StepHandler:\par ??\tab StepNumber=3\par ??\par ??component "tax.calculator", TaxCalculator:\par ??\tab Rate=Convert.ToDecimal(0.25)\par ??\tab \par ??component "holiday.service", HolidayService:\par ??\tab Holidays=(\par ??\tab \tab DateTime(2007,12,24),\par ??\tab \tab DateTime(2007,12,25),\par ??\tab \tab DateTime(2008,1,1)\par ??\tab )\par ??\tab \par ??aliases=Dictionary [of string, string]()\par ??aliases['dog']="duck"\par ??aliases['ate']="broke"\par ??aliases['homework']="code"\par ??component "aliases.service", AliasService:\par ??\tab Aliases=aliases\par ??\tab } -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;">import System</p>
<p style="margin:0;">import System.Reflection</p>
<p style="margin:0;">import System.Collections.Generic</p>
<p style="margin:0;">import BitterCoder.Tutorials.Binsor.Core</p>
<p style="margin:0;"></p>
<p style="margin:0;"></p>
<p style="margin:0;">aliases=Dictionary [of string, string]()</p>
<p style="margin:0;">aliases['dog']="duck"</p>
<p style="margin:0;">aliases['ate']="broke"</p>
<p style="margin:0;">aliases['homework']="code"</p>
<p style="margin:0;">component "aliases.service", AliasService:</p>
<p style="padding-left:30px;margin:0;">Aliases=aliases</p>

</div>
So, we have a bit of strange syntax to get a generic Dictionary, but then it becomes very natural to create the entries.  Also, we don't have to worry about the type converters that Alex mentions in his tutorial.

Running the code gives us:

<strong>a duck broke my code</strong>

All good.  Up next is Switching Configurations...
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/7c795af1-02f6-46b8-b10f-9fc37c58671e/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=7c795af1-02f6-46b8-b10f-9fc37c58671e" alt="Zemanta Pixie" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2008-07-14 22:55:36</wp:post_date>
		<wp:post_date_gmt>2008-07-14 17:55:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-iii-dictonaries</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1216058374]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>96</wp:comment_id>
		<wp:comment_author><![CDATA[ppcanodehuelva]]></wp:comment_author>
		<wp:comment_author_email>ppcanodehuelva@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>84.122.129.203</wp:comment_author_IP>
		<wp:comment_date>2009-01-12 18:06:28</wp:comment_date>
		<wp:comment_date_gmt>2009-01-12 13:06:28</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hi Ruprict, any idea how to configure SortedList whose elements are components register on the container in binsor.

Class1
{
public SortedList Proxies
        {
            get { return _proxies;}
            set { _proxies = value; }
        }
}


I would like to do something like:

component 'proxy1', ICrudTransfer
component 'proxy2', ICrudTransfer
	
_proxies = SortedList[of string, ICrudTransfer]()
_proxies['url1']=@proxy1
_proxies['url2']=@proxy2

component 'service', ICrud, Crud:				
	Proxies = _proxies

Which it doesn't work.



I would like to use such as properties, arrays or list. 

component 'service', ICrud, Crud:				
	CrudProxy = @proxy3
	CrudProxies = (@proxy1 , @proxy2)



Thanks and regards]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style IV: Switching Configs</title>
		<link>http://ruprict.net/2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/</link>
		<pubDate>Tue, 15 Jul 2008 19:11:20 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[Previous posts in the series:
<ul>
	<li><a href="http://ruprict.wordpress.com/2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
</ul>
In <a href="http://blog.bittercoder.com/PermaLink,guid,d577122f-f5eb-4d8e-a446-ec81e9e5a661.aspx" target="_blank">part four</a> of his series, the Bitter Coder (Alex) shows how easy it is to switch configurations using Windsor.  Alex moves his config into a separate file and then comments out whichever configuration is not needed.  I am gonna take a different approach with Binsor, since we have the ability to use logic in the configuration.

Presuming we have 2 environments, dev and prod, and we want to deploy to both without manually switching configuration items.  (Note:  The big idea in this post is to show the logic, not the best practice.  I realize that keeping dev config info in a production file is icky.)  Anyway, let's create a class that has a connection string, the ubiquitous configuraiton item:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red91\green105\blue106;\red26\green24\blue21;\red222\green222\blue203;\red121\green151\blue84;\red199\green199\blue165;}??\fs30 \cf1\cb2\highlight2 public\cf3  \cf1 class\cf3  \cf4 ConfigDepot\par ??\cf3     \{\par ??        \cf1 public\cf3  \cf1 string\cf3  \cf5 ConnectionString\cf3 \{ \cf1 get\cf3 ;\cf1 set\cf3 ;\}\par ??        \par ??    \}} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#5b696a;">class</span> <span style="color:#799754;">ConfigDepot</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#5b696a;">string</span> <span style="color:#c7c7a5;">ConnectionString</span>{ <span style="color:#5b696a;">get</span>;<span style="color:#5b696a;">set</span>;}</p>
<p style="margin:0;"></p>
<p style="margin:0;">}</p>

</div>
So, we need something that is different between the development and production boxes to let us know which connect string to use.  For the purposes of this article, I am choosing the hostname.  Here is the Binsor:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red222\green222\blue203;\red26\green24\blue21;}??\fs30 \cf1\cb2\highlight2 machineName=System.Environment.MachineName\par ??if machineName.ToUpper() == "ESI-GGOODRICH":\par ??\tab connectionString="connStringDEV"\par ??else:\par ??\tab connectionString="connStringPROD"\par ??\par ??component "class.conn", ConfigDepot:\par ??\tab ConnectionString = connectionString} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;">machineName=System.Environment.MachineName</p>
<p style="margin:0;">if machineName.ToUpper() == "DEVBOX":</p>
<p style="padding-left:30px;margin:0;">connectionString="connStringDEV"</p>
<p style="margin:0;">else:</p>
<p style="padding-left:30px;margin:0;">connectionString="connStringPROD"</p>
<p style="margin:0;"></p>
<p style="margin:0;">component "class.conn", ConfigDepot:</p>
<p style="padding-left:30px;margin:0;">ConnectionString = connectionString</p>

</div>
And the program....

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red91\green105\blue106;\red26\green24\blue21;\red222\green222\blue203;\red199\green199\blue165;}??\fs30 \cf1\cb2\highlight2 static\cf3  \cf1 void\cf3  \cf4 Main\cf3 (\cf1 string\cf3 [] \cf4 args\cf3 )\par ??        \{} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;"><span style="color:#5b696a;">static</span> <span style="color:#5b696a;">void</span> <span style="color:#c7c7a5;">Main</span>(<span style="color:#5b696a;">string</span>[] <span style="color:#c7c7a5;">args</span>)</p>
<p style="margin:0;">{ <!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red121\green151\blue84;\red26\green24\blue21;\red222\green222\blue203;\red199\green199\blue165;\red150\green120\blue120;}??\fs30 \cf1\cb2\highlight2 ConfigDepot\cf3  \cf4 cl\cf3  \cf5 =\cf3  \cf4 container\cf5 .\cf4 Resolve\cf5 &lt;\cf1 ConfigDepot\cf5 &gt;\cf3 ();\par ??            \cf1 Console\cf5 .\cf4 WriteLine\cf3 (\cf4 cl\cf5 .\cf4 ConnectionString\cf3 );\par ??        \}} --></p>

<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="padding-left:30px;margin:0;"><span style="color:#799754;">ConfigDepot</span> <span style="color:#c7c7a5;">cl</span> <span style="color:#967878;">=</span> <span style="color:#c7c7a5;">container</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">Resolve</span><span style="color:#967878;">&lt;</span><span style="color:#799754;">ConfigDepot</span><span style="color:#967878;">&gt;</span>();</p>
<p style="padding-left:30px;margin:0;"><span style="color:#799754;">Console</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">WriteLine</span>(<span style="color:#c7c7a5;">cl</span><span style="color:#967878;">.</span><span style="color:#c7c7a5;">ConnectionString</span>);</p>
<p style="margin:0;">}</p>

</div>
</div>
When you run the program (which, um, defaults to the production conn string. Yikes!) and the name of your dev box is 'DEVBOX' then you'll see "connStringDEV".  Otherwise, you'll see "connStringPROD".

It'd be easy to add a slew of connection parameters here, but you should be wary of a couple of Booisms.  First, the if block is determined by the indention level.  So, everything that is indented the same amount is part of the block. (Check <a href="http://boo.codehaus.org/Coding+Conventions" target="_blank">this </a>out for code conventions.)  Also, the 'if' line and the 'else' line end in a colon ( : ) which is a bit odd.

Onward...next time we have Configuration Parameters.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2008-07-16 00:11:20</wp:post_date>
		<wp:post_date_gmt>2008-07-15 19:11:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-iv-switching-configs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1216149082]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>The Bitter Coder Tutorial, Binsor Style V - Configuration Parameters</title>
		<link>http://ruprict.net/2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/</link>
		<pubDate>Mon, 28 Jul 2008 13:01:40 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=30</guid>
		<description></description>
		<content:encoded><![CDATA[(Sorry about the delay in the tutorials, but I took a week of vacation and my wife wouldn't let me near the computer...)

Previous posts in the series:
<ul>
	<li><a href="http://ruprict.wordpress.com/2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/" target="_blank">Part 4</a></li>
</ul>
In <a href="http://blog.bittercoder.com/PermaLink,guid,4b0c6c3c-4280-4fae-bf22-b3218b1ee59d.aspx" target="_blank">tutorial #5</a>, Alex focuses on configuration parameters.  He creates 2 properties configuration files (live and debug) and then does an 'include' in the configuration XML to pull in which one he wants, commenting out the other.  I am gonna try something similar here.

Boo/Binsor allows you to include files, but there is seemingly an issue.  Any variables defined in the included file are ignored, which I found odd (scope issue?)  Anyway, I then found <a href="http://www.ayende.com/Blog/archive/2007/10/10/Multi-file-DSLs.aspx" target="_blank">this post</a> from Ayende and knew I had to get a bit creative.  My inspiration was yet <a href="http://www.ayende.com/Blog/archive/2007/12/06/Binsor-Cross-file-extensibility.aspx" target="_blank">another post</a> from Ayende.  My solution was to create 2 files (live and debug, like Alex) and import them (like Alex.)   In each file is a function called DefineProperties() that returns a hash of property values.

Here is propertiesLive.boo

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red222\green222\blue203;\red26\green24\blue21;}??\fs30 \cf1\cb2\highlight2 def DefineProperties():\par ??\tab configValues = \{\}\par ??\tab configValues['Name']="Live"\par ??\tab return configValues\par ??} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;">def DefineProperties():</p>
<p style="padding-left:30px;margin:0;">configValues = {}</p>
<p style="padding-left:30px;margin:0;">configValues['Name']="Live"</p>
<p style="padding-left:30px;margin:0;">return configValues</p>

</div>
So, I create a hash, put in a 'Name' key and value, then return the hash.  Now I have to import the propertiesLive.boo file and then call the function.  Here's what I added to the Windsor.boo file:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red222\green222\blue203;\red26\green24\blue21;}??\fs30 \cf1\cb2\highlight2 //Change this to propertiesDebug.boo for Debug env\par ??import file from propertiesDebug.boo\par ??\par ??configEnvironment = DefineProperties()} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;">//Change this to propertiesDebug.boo for Debug env</p>
<p style="margin:0;">import file from propertiesDebug.boo</p>
<p style="margin:0;"></p>
<p style="margin:0;">configEnvironment = DefineProperties()</p>

</div>
This is right under the namespace import statements.  Now I can use the configEnvironment hash in my component registrations:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red222\green222\blue203;\red26\green24\blue21;}??\fs30 \cf1\cb2\highlight2 component "class.conn", ConfigDepot:\par ??\tab ConnectionString = connectionString\par ??\tab ConfigEnvironment = configEnvironment['Name']} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;">component "class.conn", ConfigDepot:</p>
<p style="padding-left:30px;margin:0;">ConnectionString = connectionString</p>
<p style="padding-left:30px;margin:0;">ConfigEnvironment = configEnvironment['Name']</p>

</div>
You could easily add as many key/values as needed or put other logic in the DefineProperties() function.  The propertiesDebug.boo defines the same function, but with different values.

It's not incredibly elegant, and I am betting Ayende or one of the other big brains could do it cleaner/better/stronger, but this works.

Next time....lifestyles.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2008-07-28 18:01:40</wp:post_date>
		<wp:post_date_gmt>2008-07-28 13:01:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorial-binsor-style-v-configuration-parameters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1217250192]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>49</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials VIII: Referencing Instances By Key &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/08/18/the-bitter-coder-tutorials-viii-referencing-instances-by-key/</wp:comment_author_url>
		<wp:comment_author_IP>66.135.48.143</wp:comment_author_IP>
		<wp:comment_date>2008-08-18 20:37:57</wp:comment_date>
		<wp:comment_date_gmt>2008-08-18 15:37:57</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 5 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style VI: Switching Lifestyles</title>
		<link>http://ruprict.net/2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/</link>
		<pubDate>Mon, 04 Aug 2008 14:06:25 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[Previous posts in the series:
<ul>
	<li><a href="http://ruprict.wordpress.com/2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/" target="_blank">Part 4</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/" target="_blank">Part 5</a></li>
</ul>
In <a href="http://blog.bittercoder.com/PermaLink,guid,dfebb0b5-c5e8-4de1-8551-b7e7fe1f14ce.aspx" target="_blank">tutorial #6</a>, Alex discusses lifestyles and how to muck about with them.  If you are unfamiliar with what lifestyles are in this context, go read his post first (which you should be doing anyway)

So, we create the same adding service component (minus the spelling errors ;)):

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red91\green105\blue106;\red26\green24\blue21;\red222\green222\blue203;\red121\green151\blue84;\red199\green199\blue165;\red150\green120\blue120;\red140\green112\blue80;}??\fs30 \cf1\cb2\highlight2 public\cf3  \cf1 class\cf3  \cf4 AddingService\par ??\cf3     \{\par ??        \cf1 private\cf3  \cf1 int\cf3  \cf5 _total\cf3  \cf6 =\cf3  \cf7 0\cf3 ;\par ??        \cf1 public\cf3  \cf1 void\cf3  \cf5 AddAmount\cf3 (\cf1 int\cf3  \cf5 amount\cf3 )\par ??        \{\par ??            \cf5 _total\cf3  \cf6 +=\cf3  \cf5 amount\cf3 ;\par ??        \}\par ??\par ??        \cf1 public\cf3  \cf1 int\cf3  \cf5 Total\par ??\cf3         \{\par ??            \cf1 get\cf3  \{ \cf1 return\cf3  \cf5 _total\cf3 ; \}\par ??        \}\par ??    \}} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#5b696a;">class</span> <span style="color:#799754;">AddingService</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">private</span> <span style="color:#5b696a;">int</span> <span style="color:#c7c7a5;">_total</span> <span style="color:#967878;">=</span> <span style="color:#8c7050;">0</span>;</p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#5b696a;">void</span> <span style="color:#c7c7a5;">AddAmount</span>(<span style="color:#5b696a;">int</span> <span style="color:#c7c7a5;">amount</span>)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#c7c7a5;">_total</span> <span style="color:#967878;">+=</span> <span style="color:#c7c7a5;">amount</span>;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:#5b696a;">public</span> <span style="color:#5b696a;">int</span> <span style="color:#c7c7a5;">Total</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#5b696a;">get</span> { <span style="color:#5b696a;">return</span> <span style="color:#c7c7a5;">_total</span>; }</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
And we add it to the Windsor configuration, like so:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red222\green222\blue203;\red26\green24\blue21;}??\fs30 \cf1\cb2\highlight2 component "adding.service", AddingService} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;">component "adding.service", AddingService</p>

</div>
Nothing special.  When we run the code we get:

<strong>You have counted 75 sheep and herded 75 angry cats</strong>

This seems a bit odd, as the container is using the same instance for both AddingService requests.  Let's make it give us a new one for each request.  This is accomplished by adding the "lifestyle" attribute to the component:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Envy Code R VS;}}{\colortbl;??\red222\green222\blue203;\red26\green24\blue21;}??\fs30 \cf1\cb2\highlight2 component "adding.service", AddingService:\par ??\tab @lifestyle="transient"} -->
<div style="background:#1a1815 none repeat scroll 0 0;font-family:Envy Code R VS;font-size:8pt;color:#dedecb;">
<p style="margin:0;">component "adding.service", AddingService:</p>
<p style="padding-left:30px;margin:0;">@lifestyle="transient"</p>

</div>
Notice the "@" sign, which tells Binsor to put this attribute on the Windsor component, but not the class instance (I can't figure out a better way to word that.)  Now, when we run it, we get:

<strong>You have counted 60 sheep and herded 15 angry cats</strong>

Snot on.  Alex goes on to say how you can add an attribute on the class to indicate it's lifestyle.  That isn't really relevent to what I'm doing here, but you should check it out all the same.

Coming up....Switching Implementations, which is where a DI container really starts to make sense.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2008-08-04 19:06:25</wp:post_date>
		<wp:post_date_gmt>2008-08-04 14:06:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1217956720]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>44</wp:comment_id>
		<wp:comment_author><![CDATA[Michael]]></wp:comment_author>
		<wp:comment_author_email>mikl@webmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>76.64.40.195</wp:comment_author_IP>
		<wp:comment_date>2008-08-05 21:24:08</wp:comment_date>
		<wp:comment_date_gmt>2008-08-05 16:24:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks for this really usefull post.
I keep getting the error message.
failed: Could not compile configuration! 
Boo.Lang.Compiler.CompilerError: expecting "RPAREN", found ':'. Boo.Lang.Compiler.CompilerError: Unexpected token: @lifestyle. 

Any ideas? Could you post the code for your example so I could compare it with mine?

Cheers,]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>46</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-08-05 22:03:39</wp:comment_date>
		<wp:comment_date_gmt>2008-08-05 17:03:39</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Micheal,

That is my code above.  However, the first version of this post did not have the @lifestyle line indented, which could cause issues.  If that doesn't fix yours, you can send me your code at glenn(at)goodrichs(dot)net and I'll take a gander.

Glenn]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style VII: Switching Implementations</title>
		<link>http://ruprict.net/2008/08/11/the-bitter-coder-tutorials-binsor-style-vii-switching-implementations/</link>
		<pubDate>Mon, 11 Aug 2008 17:47:07 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[Previous posts in the series:
<ul>
	<li><a href="http://ruprict.wordpress.com/2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/" target="_blank">Part 4</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/" target="_blank">Part 5</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/" target="_blank">Part 6</a></li>
</ul>
In <a href="http://blog.bittercoder.com/PermaLink,guid,ff608602-ad65-48b8-9e03-0049eb6c6cd6.aspx" target="_blank">tutorial #7</a>, Alex shows us the real meat of DI, which is switching out implementations.  This is where I had my "A-HA!" moment with Windsor and where I continue to see the most obvious value.

As Alex states, when switching implementations, you take the contract of your implementation and stuff it in an interface.  Here's the interface for our example:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20  \cf3 public\cf0  \cf3 interface\cf0  \cf4 IMessageOfTheDay\par ??\cf0     \{\par ??        \cf3 string\cf0  GetMessageOfTheDay();\par ??    \}} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;"><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20  \cf3 public\cf0  \cf3 interface\cf0  \cf4 IMessageOfTheDay\par ??\cf0     \{\par ??        \cf3 string\cf0  GetMessageOfTheDay();\par ??    \}} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">interface</span> <span style="color:#2b91af;">IMessageOfTheDay</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">string</span> GetMessageOfTheDay();</p>
<p style="margin:0;">}</p>

</div>
</div>
And the same two implementations from Alex:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 StaticMessageOfTheDay\cf0 :\cf4 IMessageOfTheDay\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 string\cf0  _message;\par ??        \cf1 public\cf0  \cf1 string\cf0  Message\par ??        \{\par ??            \cf1 set\cf0  \{ _message = \cf1 value\cf0 ; \}\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 string\cf0  GetMessageOfTheDay()\par ??        \{\par ??            \cf1 return\cf0  _message;\par ??        \}\par ??    \}} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;"><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 StaticMessageOfTheDay\cf0 :\cf4 IMessageOfTheDay\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 string\cf0  _message;\par ??        \cf1 public\cf0  \cf1 string\cf0  Message\par ??        \{\par ??            \cf1 set\cf0  \{ _message = \cf1 value\cf0 ; \}\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 string\cf0  GetMessageOfTheDay()\par ??        \{\par ??            \cf1 return\cf0  _message;\par ??        \}\par ??    \}} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">StaticMessageOfTheDay</span>:<span style="color:#2b91af;">IMessageOfTheDay</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">string</span> _message;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> Message</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">set</span> { _message = <span style="color:blue;">value</span>; }</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> GetMessageOfTheDay()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> _message;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
</div>
<p style="background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;">And #2:</p>

<div style="background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;"><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 string\cf0  GetMessageOfTheDay()\par ??        \{\par ??            \cf4 WebClient\cf0  client = \cf1 new\cf0  \cf4 WebClient\cf0 ();\par ??\par ??            \cf1 string\cf0  content = client.DownloadString(\cf5 "http://en.wikiquote.org/wiki/Main_Page"\cf0 );\par ??            \cf1 string\cf0  toFind = \cf5 "&lt;td align=\\"center\\"&gt;"\cf0 ;\par ??            \cf1 int\cf0  start = content.IndexOf(toFind) + toFind.Length + 56;\par ??            \cf1 int\cf0  length = content.IndexOf(\cf5 "&lt;a"\cf0 , start) - start;\par ??            \cf1 return\cf0  content.Substring(start, length);\par ??\par ??        \}} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;"><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 string\cf0  GetMessageOfTheDay()\par ??        \{\par ??            \cf4 WebClient\cf0  client = \cf1 new\cf0  \cf4 WebClient\cf0 ();\par ??\par ??            \cf1 string\cf0  content = client.DownloadString(\cf5 "http://en.wikiquote.org/wiki/Main_Page"\cf0 );\par ??            \cf1 string\cf0  toFind = \cf5 "&lt;td align=\\"center\\"&gt;"\cf0 ;\par ??            \cf1 int\cf0  start = content.IndexOf(toFind) + toFind.Length + 56;\par ??            \cf1 int\cf0  length = content.IndexOf(\cf5 "&lt;a"\cf0 , start) - start;\par ??            \cf1 return\cf0  content.Substring(start, length);\par ??\par ??        \}} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;"><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 WikiQuotesMessageOfTheDay\cf0  : \cf4 IMessageOfTheDay\par ??\cf0     \{\par ??\par ??        \cf1 public\cf0  \cf1 string\cf0  GetMessageOfTheDay()\par ??        \{\par ??            \cf4 WebClient\cf0  client = \cf1 new\cf0  \cf4 WebClient\cf0 ();\par ??\par ??            \cf1 string\cf0  content = client.DownloadString(\cf5 "http://en.wikiquote.org/wiki/Main_Page"\cf0 );\par ??            \cf1 string\cf0  toFind = \cf5 "&lt;td align=\\"center\\"&gt;"\cf0 ;\par ??            \cf1 int\cf0  start = content.IndexOf(toFind) + toFind.Length + 56;\par ??            \cf1 int\cf0  length = content.IndexOf(\cf5 "&lt;a"\cf0 , start) - start;\par ??            \cf1 return\cf0  content.Substring(start, length);\par ??\par ??        \}\par ??\par ??    \}} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">WikiQuotesMessageOfTheDay</span> : <span style="color:#2b91af;">IMessageOfTheDay</span></p>
<p style="margin:0;">{</p>
<p style="margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> GetMessageOfTheDay()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">WebClient</span> client = <span style="color:blue;">new</span> <span style="color:#2b91af;">WebClient</span>();</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">string</span> content = client.DownloadString(<span style="color:#a31515;">"http://en.wikiquote.org/wiki/Main_Page"</span>);</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">string</span> toFind = <span style="color:#a31515;">"&lt;td align=\"center\"&gt;"</span>;</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">int</span> start = content.IndexOf(toFind) + toFind.Length + 56;</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">int</span> length = content.IndexOf(<span style="color:#a31515;">"&lt;a"</span>, start) - start;</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> content.Substring(start, length);</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;"></p>
<p style="margin:0;">}</p>

</div>
</div>
</div>
</div>
(I had to change the string that Alex was searching on and hardcode a length to the beginning of the quote, so maybe I'll rename this class to HorrificQuoteOfTheDay or something)

So, let us get to the Binsor config.  First off, I put my interface in a separate namespace, so I had to add an import clause to the top of the Windsor.boo file.  Then, I add the StaticMessageOfTheDay component:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;}??\fs20 import BitterCoder.Tutorials.Binsor.Core.Interfaces\par ??\par ??component "motd.service",IMessageOfTheDay,StaticMessageOfTheDay:\par ??\tab message="Welcome to my Binsor tutorials"} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;">import BitterCoder.Tutorials.Binsor.Core.Interfaces</p>
<p style="margin:0;"></p>
<p style="margin:0;"><span style="color:#2b91af;"> </span></p>
<p style="margin:0;">component "motd.service",IMessageOfTheDay,StaticMessageOfTheDay:</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">m</span>essage="Welcome to my Binsor tutorials"</p>

</div>
Now, when I run the project, I get:

<strong>MOTD: Welcome to my Binsor tutorials</strong>

Changing out the motd.service component for the Wiki Quotes:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;}??\fs20 component "motd.service",IMessageOfTheDay,WikiQuotesMessageOfTheDay} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;"><span style="color:#2b91af;"> </span> component "motd.service",IMessageOfTheDay,WikiQuotesMessageOfTheDay</p>

</div>
The running program now gives:

<strong>MOTD: Those works of art which have scooped up the truth and presented it to us
as a living force â?" they take hold of us, compel us, and nobody ever, not even
in ages to come, will appear to refute them. ~</strong>

It's just that easy.  Our quote is from <a title="Aleksandr Solzhenitsyn" href="http://en.wikiquote.org/wiki/Aleksandr_Solzhenitsyn">Aleksandr Solzhenitsyn</a>, whom I can safely say I've never heard of before, but I will take as a sign that this blog post is a work of art.

Next time, switching implementations by id....]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2008-08-11 22:47:07</wp:post_date>
		<wp:post_date_gmt>2008-08-11 17:47:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-vii-switching-implementations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1218476922]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>The Bitter Coder Tutorials VIII: Referencing Instances By Key</title>
		<link>http://ruprict.net/2008/08/18/the-bitter-coder-tutorials-viii-referencing-instances-by-key/</link>
		<pubDate>Mon, 18 Aug 2008 15:36:01 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[Previous posts in the series:
<ul>
	<li><a href="http://ruprict.wordpress.com/2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/" target="_blank">Part 4</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/" target="_blank">Part 5</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/" target="_blank">Part 6</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/08/11/the-bitter-coder-tutorials-binsor-style-vii-switching-implementations/" target="_blank">Part 7</a></li>
</ul>
In <a href="http://blog.bittercoder.com/PermaLink,guid,02f909e1-b680-4401-b8ff-a2fa98a0aea4.aspx" target="_blank">tutorial #8</a>, Alex continues down his path of switching implementations around, but this time we are going to have multiple components that implement the same contract, and we'll specify which one we want by id.  The id we are talking about is the id we gave the component when we registered it with Windsor.  Enough blah, blah, onto the code.

Here's our class to read a file:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 FileReader\par ??\cf0     \{\par ??        \cf1 public\cf0  \cf1 string\cf0  FileName \{ \cf1 get\cf0 ; \cf1 set\cf0 ; \}\par ??\par ??        \cf1 public\cf0  \cf1 string\cf0  ReadToEnd()\par ??        \{\par ??            \cf1 return\cf0  \cf4 File\cf0 .ReadAllText(FileName);\par ??        \}\par ??    \}} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">FileReader</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> FileName { <span style="color:blue;">get</span>; <span style="color:blue;">set</span>; }</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> ReadToEnd()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> <span style="color:#2b91af;">File</span>.ReadAllText(FileName);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
Now, we'll register two components with the container, each one reading a different file.

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;}??\fs20 component "file1.reader", FileReader:\par ??\tab FileName="file1.txt"\par ??\tab \par ??component "file2.reader", FileReader:\par ??\tab FileName="file2.txt"} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;">component "file1.reader", FileReader:</p>
<p style="padding-left:30px;margin:0;">FileName="file1.txt"</p>
<p style="margin:0;"></p>
<p style="margin:0;">component "file2.reader", FileReader:</p>
<p style="padding-left:30px;margin:0;">FileName="file2.txt"</p>

</div>
Finally, the program code:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 static\cf0  \cf1 void\cf0  Step8()\par ??        \{\par ??            \cf4 FileReader\cf0  defaultReader = container.Resolve&lt;\cf4 FileReader\cf0 &gt;();\par ??            \cf4 FileReader\cf0  file1Reader = container.Resolve&lt;\cf4 FileReader\cf0 &gt;(\cf5 "reader.file1"\cf0 );\par ??            \cf4 FileReader\cf0  file2Reader = container.Resolve&lt;\cf4 FileReader\cf0 &gt;(\cf5 "reader.file2"\cf0 );\par ??           \par ??            \cf4 Console\cf0 .WriteLine(\cf5 "Default contents: \{0\}"\cf0 , defaultReader.ReadToEnd());\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "File1 contents: \{0\}"\cf0 , file1Reader.ReadToEnd());\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "File2 contents: \{0\}"\cf0 , file2Reader.ReadToEnd());\par ??        \}} -->
<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;"><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 static\cf0  \cf1 void\cf0  Step8()\par ??        \{\par ??            \cf4 FileReader\cf0  defaultReader = container.Resolve&lt;\cf4 FileReader\cf0 &gt;();\par ??            \cf4 FileReader\cf0  file1Reader = container.Resolve&lt;\cf4 FileReader\cf0 &gt;(\cf5 "reader.file1"\cf0 );\par ??            \cf4 FileReader\cf0  file2Reader = container.Resolve&lt;\cf4 FileReader\cf0 &gt;(\cf5 "reader.file2"\cf0 );\par ??           \par ??            \cf4 Console\cf0 .WriteLine(\cf5 "Default contents: \{0\}"\cf0 , defaultReader.ReadToEnd());\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "File1 contents: \{0\}"\cf0 , file1Reader.ReadToEnd());\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "File2 contents: \{0\}"\cf0 , file2Reader.ReadToEnd());\par ??        \}} --></p>

<div style="border:thin solid #000000;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">static</span> <span style="color:blue;">void</span> Main(string[] args)</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">FileReader</span> defaultReader = container.Resolve&lt;<span style="color:#2b91af;">FileReader</span>&gt;();</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">FileReader</span> file1Reader = container.Resolve&lt;<span style="color:#2b91af;">FileReader</span>&gt;(<span style="color:#a31515;">"reader.file1"</span>);</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">FileReader</span> file2Reader = container.Resolve&lt;<span style="color:#2b91af;">FileReader</span>&gt;(<span style="color:#a31515;">"reader.file2"</span>);</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"Default contents: {0}"</span>, defaultReader.ReadToEnd());</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"File1 contents: {0}"</span>, file1Reader.ReadToEnd());</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"File2 contents: {0}"</span>, file2Reader.ReadToEnd());</p>
<p style="margin:0;">}</p>

</div>
</div>
Adding the text files and running this bad boy gives the output:

<strong>Default contents: This is the contents of file 1
File1 contents: This is the contents of file 1.
File2 contents: This is the contents of file 2.</strong>

So, as Alex says, the default implementation is the first one in the file, just like using XML.

In his tutorial, Alex gives another example of why you would need to reference implementations by id, so if you're interested, you can read it there (although, you shoulda already read that post...right?)

Next time, constructor injection...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2008-08-18 20:36:01</wp:post_date>
		<wp:post_date_gmt>2008-08-18 15:36:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-viii-referencing-instances-by-key</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1219077490]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style: Part IX, Constructor Injection</title>
		<link>http://ruprict.net/2008/08/21/the-bitter-coder-tutorials-binsor-style-part-ix-constructor-injection/</link>
		<pubDate>Thu, 21 Aug 2008 01:16:01 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=58</guid>
		<description></description>
		<content:encoded><![CDATA[Previous posts in the series:
<ul>
	<li><a href="http://ruprict.wordpress.com/2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/" target="_blank">Part 4</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/" target="_blank">Part 5</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/" target="_blank">Part 6</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/08/11/the-bitter-coder-tutorials-binsor-style-vii-switching-implementations/" target="_blank">Part 7</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/08/18/the-bitter-coder-tutorials-viii-referencing-instances-by-key/" target="_blank">Part 8</a></li>
</ul>
<a href="http://blog.bittercoder.com/PermaLink,guid,6ce3f22e-763e-445c-9b96-1ca8e6116c34.aspx" target="_blank">Part 9</a> of the original series focuses in on Constructor Injection, which is one method of doing Dependency Injection (the other is Setter Injection, which we'll get to)   The reason to use Constructor or Setter Injection is a bit subjective, but (to me) boils down to if you the paramters to be mandatory and how many parameters you have.  We're not here to debate, though, we're here to copy Alex's hard work....

Here's the interface Alex defines;

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 public\cf0  \cf1 interface\cf0  \cf4 IEncoder\par ??\cf0     \{\par ??        \cf1 string\cf0  Encode(\cf1 string\cf0  source);\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">interface</span> <span style="color:#2b91af;">IEncoder</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">string</span> Encode(<span style="color:blue;">string</span> source);</p>
<p style="margin:0;">}</p>

</div>
And the two encoders:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 NullEncoder\cf0 :\cf4 IEncoder\par ??\cf0     \{\par ??        \cf1 public\cf0  \cf1 string\cf0  Encode(\cf1 string\cf0  source)\par ??        \{\par ??            \cf1 return\cf0  source;\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">NullEncoder</span>:<span style="color:#2b91af;">IEncoder</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> Encode(<span style="color:blue;">string</span> source)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> source;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 SillyEncoder\cf0 :\cf4 IEncoder\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 char\cf0 [] _mixedUp = \cf5 "YACBDFEGIHJLKMONPRSQTUWVXZ"\cf0 .ToCharArray();\par ??        \cf3 public\cf0  \cf3 string\cf0  Encode(\cf3 string\cf0  source)\par ??        \{\par ??            \cf3 string\cf0  upperSource = source.ToUpper();\par ??            \cf3 char\cf0 [] encoded = \cf3 new\cf0  \cf3 char\cf0 [source.Length];\par ??            \cf3 for\cf0  (\cf3 int\cf0  i = 0; i &lt; encoded.Length; i++)\par ??            \{\par ??                encoded[i] = MapCharacter(upperSource[i]);\par ??            \}\par ??            \cf3 return\cf0  \cf3 new\cf0  \cf3 string\cf0 (encoded);\par ??        \}\par ??\par ??        \cf3 private\cf0  \cf3 char\cf0  MapCharacter(\cf3 char\cf0  ch)\par ??        \{\par ??            \cf3 if\cf0  ((ch &gt;= \cf5 'A'\cf0 ) &amp;&amp; (ch &lt;= \cf5 'Z'\cf0 ))\par ??            \{\par ??                \cf3 return\cf0  _mixedUp[ch - \cf5 'A'\cf0 ];\par ??            \}\par ??            \cf3 return\cf0  ch;\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">SillyEncoder</span>:<span style="color:#2b91af;">IEncoder</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">char</span>[] _mixedUp = <span style="color:#a31515;">"YACBDFEGIHJLKMONPRSQTUWVXZ"</span>.ToCharArray();</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> Encode(<span style="color:blue;">string</span> source)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">string</span> upperSource = source.ToUpper();</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">char</span>[] encoded = <span style="color:blue;">new</span> <span style="color:blue;">char</span>[source.Length];</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">for</span> (<span style="color:blue;">int</span> i = 0; i &lt; encoded.Length; i++)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;">encoded[i] = MapCharacter(upperSource[i]);</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> <span style="color:blue;">new</span> <span style="color:blue;">string</span>(encoded);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">char</span> MapCharacter(<span style="color:blue;">char</span> ch)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">if</span> ((ch &gt;= <span style="color:#a31515;">'A'</span>) &amp;&amp; (ch &lt;= <span style="color:#a31515;">'Z'</span>))</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">return</span> _mixedUp[ch - <span style="color:#a31515;">'A'</span>];</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> ch;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
Let's check out the binsor:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;}??\fs20 component "null.encoder", IEncoder, NullEncoder\par ??\par ??component "silly.encoder", IEncoder, SillyEncoder\par ??\par ??component "message.sender", SecretMessageSender:\par ??\tab _from="ruprict@wordpress.com"\par ??\tab _encoder=@silly.encoder} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;">component "null.encoder", IEncoder, NullEncoder</p>
<p style="margin:0;"></p>
<p style="margin:0;"></p>
<p style="margin:0;">component "silly.encoder", IEncoder, SillyEncoder</p>
<p style="margin:0;"></p>
<p style="margin:0;"></p>
<p style="margin:0;">component "message.sender", SecretMessageSender:</p>
<p style="padding-left:30px;margin:0;">_from="ruprict@wordpress.com"</p>

</div>
Notice we didn't specify a value for the "_encoder" parameter, so Windsor will just plug in the first one it finds.  And, finally, the Program:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 static\cf0  \cf1 void\cf0  Step9()\par ??        \{\par ??            \cf1 var\cf0  sender = container.Resolve&lt;\cf4 SecretMessageSender\cf0 &gt;();\par ??            sender.SendMessage(\cf5 "hammett"\cf0 ,\cf5 "Howzit going at Microsoft?"\cf0 );\par ??\par ??        \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;}??\fs20 \cf1 private\cf0  \cf1 static\cf0  \cf1 void\cf0  Main(\cf1 string\cf0 [] args)} --></p>

<div style="background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">static</span> <span style="color:blue;">void</span> Main(<span style="color:blue;">string</span>[] args)</p>

</div>
<p style="margin:0;"></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">var</span> sender = container.Resolve&lt;<span style="color:#2b91af;">SecretMessageSender</span>&gt;();</p>
<p style="padding-left:30px;margin:0;">sender.SendMessage(<span style="color:#a31515;">"hammett"</span>,<span style="color:#a31515;">"Howzit going at Microsoft?"</span>);</p>
<p style="margin:0;"></p>
<p style="margin:0;">}</p>

</div>
Running this as is, gives us:

<strong>to: hammett
from: ruprict@wordpress.com</strong>

<strong>GOWZIQ EOIME YQ KICROSOFQ?
</strong>

So, what if we want to send an unencrypted message?  Well, we can specify which IEncoder component to wire to our sender, like so:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;}??\fs20 component "message.sender", SecretMessageSender:\par ??\tab _from="ruprict@wordpress.com"\par ??\tab _encoder=@null.encoder} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;">component "message.sender", SecretMessageSender:</p>
<p style="padding-left:30px;margin:0;">_from="ruprict@wordpress.com"</p>
<p style="padding-left:30px;margin:0;">_encoder=@null.encoder</p>

</div>
See?  We refer to it by the name we gave the component.  Running it now, gives us:

<strong>to: hammett
from: ruprict@wordpress.com</strong>

<strong>Howzit going at Microsoft?</strong>

(I bet he's doing great...)

Setter injection...coming up!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date>2008-08-21 06:16:01</wp:post_date>
		<wp:post_date_gmt>2008-08-21 01:16:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-part-ix-constructor-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1219670422]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>53</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials Binsor Style, Part X: Setter Injection &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/09/02/the-bitter-coder-tutorials-binsor-style-part-x-setter-injection/</wp:comment_author_url>
		<wp:comment_author_IP>72.232.101.89</wp:comment_author_IP>
		<wp:comment_date>2008-09-02 21:10:15</wp:comment_date>
		<wp:comment_date_gmt>2008-09-02 16:10:15</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 9 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Bitter Coder Tutorials Binsor Style, Part X: Setter Injection</title>
		<link>http://ruprict.net/2008/09/02/the-bitter-coder-tutorials-binsor-style-part-x-setter-injection/</link>
		<pubDate>Tue, 02 Sep 2008 16:10:08 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[Previous posts in the series:
<ul>
	<li><a href="../2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="../2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="../2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
	<li><a href="../2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/" target="_blank">Part 4</a></li>
	<li><a href="../2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/" target="_blank">Part 5</a></li>
	<li><a href="../2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/" target="_blank">Part 6</a></li>
	<li><a href="../2008/08/11/the-bitter-coder-tutorials-binsor-style-vii-switching-implementations/" target="_blank">Part 7</a></li>
	<li><a href="../2008/08/18/the-bitter-coder-tutorials-viii-referencing-instances-by-key/" target="_blank">Part 8</a></li>
	<li><a href="http://ruprict.wordpress.com/?p=58" target="_blank">Part 9</a></li>
</ul>
So, we're 10 posts into our arguable plagerism of Alex's tutorials, and this post's focus is setter injection.  Setter injection is, basically, exposing a class's dependencies via properties, as opposed to constructor parameters.  I prefer setter injection only when the number of dependencies is very high, and in most of those cases, it's probably code smell.  However, we are just here to Binsorify the Bitter Coder Tutorials, so off we go.

We are slightly refactoring the project from Part 9, adding the ability to specify a formatter for our encoded message.  The interface is here:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 interface\cf0  \cf4 IMessageFormatter\par ??\cf0     \{\par ??        \cf3 string\cf0  FormatMessage(\cf3 string\cf0  from, \cf3 string\cf0  to, \cf3 string\cf0  body);\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">interface</span> <span style="color:#2b91af;">IMessageFormatter</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">string</span> FormatMessage(<span style="color:blue;">string</span> from, <span style="color:blue;">string</span> to, <span style="color:blue;">string</span> body);</p>
<p style="margin:0;">}</p>

</div>
Here's the default formatter:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 DefaultFormatter\cf0 :\cf4 IMessageFormatter\par ??\cf0     \{\par ??        \cf1 public\cf0  \cf1 string\cf0  FormatMessage(\cf1 string\cf0  from, \cf1 string\cf0  to, \cf1 string\cf0  body)\par ??        \{\par ??            \cf1 return\cf0  \cf1 string\cf0 .Format(\cf5 "to: \{0\}\\r\\nfrom: \{1\}\\r\\n\\r\\n\{2\}"\cf0 , to, from, body);\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">DefaultFormatter</span>:<span style="color:#2b91af;">IMessageFormatter</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> FormatMessage(<span style="color:blue;">string</span> from, <span style="color:blue;">string</span> to, <span style="color:blue;">string</span> body)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> <span style="color:blue;">string</span>.Format(<span style="color:#a31515;">"to: {0}\r\nfrom: {1}\r\n\r\n{2}"</span>, to, from, body);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
And the refactored version of last post's message sender, incorporating our new dependency:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20  \cf3 public\cf0  \cf3 class\cf0  \cf4 SecretMessageSender\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 readonly\cf0  \cf4 IEncoder\cf0  _encoder;\par ??        \cf3 private\cf0  \cf3 readonly\cf0  \cf3 string\cf0  _from;\par ??\par ??        \cf3 public\cf0  SecretMessageSender(\cf4 IEncoder\cf0  _encoder, \cf3 string\cf0  _from)\par ??        \{\par ??            \cf3 this\cf0 ._encoder = _encoder;\par ??            \cf3 this\cf0 ._from = _from;\par ??        \}\par ??\par ??        \cf3 public\cf0  \cf3 void\cf0  SendMessage(\cf3 string\cf0  to, \cf3 string\cf0  body)\par ??        \{\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "to: \{0\}\\r\\nfrom: \{1\}\\r\\n\\r\\n\{2\}"\cf0 , to, _from, _encoder.Encode(body));\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">SecretMessageSender</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">readonly</span> <span style="color:#2b91af;">IEncoder</span> _encoder;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">readonly</span> <span style="color:blue;">string</span> _from;</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> SecretMessageSender(<span style="color:#2b91af;">IEncoder</span> _encoder, <span style="color:blue;">string</span> _from)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">this</span>._encoder = _encoder;</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">this</span>._from = _from;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">void</span> SendMessage(<span style="color:blue;">string</span> to, <span style="color:blue;">string</span> body)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"to: {0}\r\nfrom: {1}\r\n\r\n{2}"</span>, to, _from, _encoder.Encode(body));</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
Looking at the config now, we have:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;}??\fs20 component "default.formatter", IMessageFormatter, DefaultFormatter\par ??\par ??component "messageformat.sender", FormatMessageSender:\par ??\tab _from="ruprict@wordpress.com"\par ??\tab _encoder=@null.encoder} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;">component "default.formatter", IMessageFormatter, DefaultFormatter</p>
<p style="margin:0;"></p>
<p style="margin:0;">component "messageformat.sender", FormatMessageSender:</p>
<p style="padding-left:30px;margin:0;">_from="ruprict@wordpress.com"</p>
<p style="padding-left:30px;margin:0;">_encoder=@null.encoder</p>

</div>
Notice that we don't specifically set the Formatter in the config, so Windsor will do that for us.  Running the program now will yield the same results as the last post.  Keeping with Alex's tutorial, let's make another formatter, this one based on the <a href="http://www.castleproject.org/others/nvelocity/index.html" target="_blank">NVelocity </a>template engine.  NVelocity has changed a good bit since Alex used it in his tutorial, so the code is a bit more complex (thanks for the help on this, Alex):

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 NVelocityMessageFormatter\cf0  : \cf4 IMessageFormatter\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 readonly\cf0  \cf4 Template\cf0  _template;\par ??        \cf1 private\cf0  \cf1 readonly\cf0  \cf4 VelocityEngine\cf0  _velocity;\par ??\par ??        \cf1 public\cf0  NVelocityMessageFormatter(\cf1 string\cf0  _templateFile)\par ??        \{\par ??            _velocity = \cf1 new\cf0  \cf4 VelocityEngine\cf0 ();\par ??\par ??            \cf1 var\cf0  props = \cf1 new\cf0  \cf4 ExtendedProperties\cf0 ();\par ??            props.SetProperty(\cf4 RuntimeConstants\cf0 .RESOURCE_LOADER, \cf5 "file"\cf0 );\par ??            props.SetProperty(\cf4 RuntimeConstants\cf0 .FILE_RESOURCE_LOADER_PATH,\par ??                              \cf4 Path\cf0 .GetDirectoryName(\cf4 Assembly\cf0 .GetExecutingAssembly().GetModules()[0].FullyQualifiedName));\par ??            props.SetProperty(\cf4 RuntimeConstants\cf0 .FILE_RESOURCE_LOADER_CACHE, \cf5 "false"\cf0 );\par ??            _velocity.Init(props);\par ??\par ??            _template = _velocity.GetTemplate(_templateFile);\par ??        \}\par ??\par ??\cf1         #region\cf0  IMessageFormatter Members\par ??\par ??        \cf1 public\cf0  \cf1 string\cf0  FormatMessage(\cf1 string\cf0  from, \cf1 string\cf0  to, \cf1 string\cf0  body)\par ??        \{\par ??            \cf1 var\cf0  context = \cf1 new\cf0  \cf4 VelocityContext\cf0 ();\par ??            context.Put(\cf5 "from"\cf0 , from);\par ??            context.Put(\cf5 "to"\cf0 , to);\par ??            context.Put(\cf5 "body"\cf0 , body);\par ??            context.Put(\cf5 "today"\cf0 , \cf4 DateTime\cf0 .Now);\par ??\par ??            \cf1 var\cf0  writer = \cf1 new\cf0  \cf4 StringWriter\cf0 ();\par ??\par ??            _template.Merge(context, writer);\par ??\par ??            \cf1 return\cf0  writer.ToString();\par ??        \}\par ??\par ??\cf1         #endregion\par ??\cf0     \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">NVelocityMessageFormatter</span> : <span style="color:#2b91af;">IMessageFormatter</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">readonly</span> <span style="color:#2b91af;">Template</span> _template;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">readonly</span> <span style="color:#2b91af;">VelocityEngine</span> _velocity;</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> NVelocityMessageFormatter(<span style="color:blue;">string</span> _templateFile)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">_velocity = <span style="color:blue;">new</span> <span style="color:#2b91af;">VelocityEngine</span>();</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">var</span> props = <span style="color:blue;">new</span> <span style="color:#2b91af;">ExtendedProperties</span>();</p>
<p style="padding-left:60px;margin:0;">props.SetProperty(<span style="color:#2b91af;">RuntimeConstants</span>.RESOURCE_LOADER, <span style="color:#a31515;">"file"</span>);</p>
<p style="padding-left:60px;margin:0;">props.SetProperty(<span style="color:#2b91af;">RuntimeConstants</span>.FILE_RESOURCE_LOADER_PATH,</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">Path</span>.GetDirectoryName(<span style="color:#2b91af;">Assembly</span>.GetExecutingAssembly().GetModules()[0].FullyQualifiedName));</p>
<p style="padding-left:60px;margin:0;">props.SetProperty(<span style="color:#2b91af;">RuntimeConstants</span>.FILE_RESOURCE_LOADER_CACHE, <span style="color:#a31515;">"false"</span>);</p>
<p style="padding-left:60px;margin:0;">_velocity.Init(props);</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;">_template = _velocity.GetTemplate(_templateFile);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;"> #region</span> IMessageFormatter Members</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> FormatMessage(<span style="color:blue;">string</span> from, <span style="color:blue;">string</span> to, <span style="color:blue;">string</span> body)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">var</span> context = <span style="color:blue;">new</span> <span style="color:#2b91af;">VelocityContext</span>();</p>
<p style="padding-left:60px;margin:0;">context.Put(<span style="color:#a31515;">"from"</span>, from);</p>
<p style="padding-left:60px;margin:0;">context.Put(<span style="color:#a31515;">"to"</span>, to);</p>
<p style="padding-left:60px;margin:0;">context.Put(<span style="color:#a31515;">"body"</span>, body);</p>
<p style="padding-left:60px;margin:0;">context.Put(<span style="color:#a31515;">"today"</span>, <span style="color:#2b91af;">DateTime</span>.Now);</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">var</span> writer = <span style="color:blue;">new</span> <span style="color:#2b91af;">StringWriter</span>();</p>
<p style="padding-left:60px;margin:0;">_template.Merge(context, writer);</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> writer.ToString();</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;"> #endregion</span></p>
<p style="margin:0;">}</p>

</div>
Our formatter merges the parameters (from, to, and body) with the template, which looks like:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;}??\fs20 To:   $to\par ??From: $from\par ??Sent: $today\par ??            \par ??\par ?? $body\par ??\par ??            } -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;">To:   $to</p>
<p style="margin:0;">From: $from</p>
<p style="margin:0;">Sent: $today</p>
<p style="margin:0;">----------------------</p>
<p style="margin:0;"></p>
<p style="margin:0;">$body</p>
<p style="margin:0;"></p>
<p style="margin:0;">----------------------</p>

</div>
Finally, let's see how we configure the program to use our fancy new formatter:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;}??\fs20 component "fancymessage.formatter", IMessageFormatter, NVelocityMessageFormatter:\par ??\tab _templateFile="message.vm"\par ??\par ??component "messageformat.sender", FormatMessageSender:\par ??\tab _from="ruprict@wordpress.com"\par ??\tab _encoder=@null.encoder\par ??\tab Formatter = @fancymessage.formatter} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;">component "fancymessage.formatter", IMessageFormatter, NVelocityMessageFormatter:</p>
<p style="padding-left:30px;margin:0;">_templateFile="message.vm"</p>
<p style="margin:0;"></p>
<p style="margin:0;">component "messageformat.sender", FormatMessageSender:</p>
<p style="padding-left:30px;margin:0;">_from="ruprict@wordpress.com"</p>
<p style="padding-left:30px;margin:0;">_encoder=@null.encoder</p>
<p style="padding-left:30px;margin:0;">Formatter = @fancymessage.formatter</p>

</div>
We specify the template file as well as the "Formatter" parameter.  Our output now looks like:

<strong>To:   hammett
From: ruprict@wordpress.com
Sent: 8/25/2008 9:49:39 AM
----------------------</strong>

<strong>Howzit going at Microsoft?</strong>

<strong>----------------------</strong>
And we're done.  We covered a decent amount of stuff in this post: setter injection, default dependencies, overriding default dependencies, as well as how to use NVelocity as a template engine.

Next time....factories.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2008-09-02 21:10:08</wp:post_date>
		<wp:post_date_gmt>2008-09-02 16:10:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-part-x-setter-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1220371811]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>56</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials, Binsor Style: Part XI, Factories &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/09/09/the-bitter-coder-tutorials-binsor-style-part-xi-factories/</wp:comment_author_url>
		<wp:comment_author_IP>76.74.254.24</wp:comment_author_IP>
		<wp:comment_date>2008-09-09 17:56:14</wp:comment_date>
		<wp:comment_date_gmt>2008-09-09 12:56:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 10 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style: Part XI, Factories</title>
		<link>http://ruprict.net/2008/09/09/the-bitter-coder-tutorials-binsor-style-part-xi-factories/</link>
		<pubDate>Tue, 09 Sep 2008 12:56:04 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[Previous posts in the series:
<ul>
	<li><a href="../2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="../2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="../2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
	<li><a href="../2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/" target="_blank">Part 4</a></li>
	<li><a href="../2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/" target="_blank">Part 5</a></li>
	<li><a href="../2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/" target="_blank">Part 6</a></li>
	<li><a href="../2008/08/11/the-bitter-coder-tutorials-binsor-style-vii-switching-implementations/" target="_blank">Part 7</a></li>
	<li><a href="../2008/08/18/the-bitter-coder-tutorials-viii-referencing-instances-by-key/" target="_blank">Part 8</a></li>
	<li><a href="../?p=58" target="_blank">Part 9</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/09/02/the-bitter-coder-tutorials-binsor-style-part-x-setter-injection/" target="_self">Part 10</a></li>
</ul>
In this post, I will be discussing how to use Binsor to configure the <a href="http://www.castleproject.org/container/facilities/trunk/factory/index.html" target="_blank">factory support facility</a> in Windsor.  A "<a href="http://www.castleproject.org/container/documentation/trunk/concepts/facility.html" target="_blank">facility</a>" is (as Alex <a href="http://blog.bittercoder.com/PermaLink,guid,07925133-ae33-41dd-bc50-2b49a5434e19.aspx" target="_blank">states</a>) an add-in to the Windsor container that changes or adds what the container can do.  Facilities are a big part of what makes Windsor so freaking kick-ass, and other facilities are the <a href="http://www.castleproject.org/container/facilities/trunk/logging/index.html" target="_blank">logging facility</a>, the <a href="http://www.castleproject.org/container/facilities/trunk/atm/index.html" target="_blank">transaction facility</a>, and (the oft blogged about here) <a href="http://www.castleproject.org/container/facilities/trunk/wcf/index.html" target="_blank">WCF facility</a>.

So, let's get to the code.  Here's our interface:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 public\cf0  \cf1 interface\cf0  \cf4 ISmsService\par ??\cf0     \{\par ??        \cf1 void\cf0  SendMessage(\cf1 string\cf0  number, \cf1 string\cf0  message);\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">interface</span> <span style="color:#2b91af;">ISmsService</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">void</span> SendMessage(<span style="color:blue;">string</span> number, <span style="color:blue;">string</span> message);</p>
<p style="margin:0;">}</p>

</div>
And our SmsService and SmsConfig classes:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 SmsService\cf0  : \cf4 ISmsService\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf4 SmsConfig\cf0  _config;\par ??\par ??        \cf1 public\cf0  \cf1 void\cf0  SetConfig(\cf4 SmsConfig\cf0  config)\par ??        \{\par ??            _config = config;\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 void\cf0  SendMessage(\cf1 string\cf0  number, \cf1 string\cf0  message)\par ??        \{\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "SMS Message: \{0\} sent to \{1\} with account \{2\}"\cf0 , message, number, _config.UserName);\par ??        \}\par ??    \}\par ??    \cf1 public\cf0  \cf1 class\cf0  \cf4 SmsConfig\par ??\cf0     \{\par ??\par ??        \cf1 private\cf0  \cf1 string\cf0  _userName;\par ??        \cf1 private\cf0  \cf1 string\cf0  _password;\par ??        \cf1 private\cf0  \cf1 int\cf0  _retryAttempts\{ \cf1 get\cf0 ; \cf1 set\cf0 ;\}\par ??\par ??        \cf1 internal\cf0  \cf1 string\cf0  UserName\par ??        \{\par ??            \cf1 get\cf0  \{ \cf1 return\cf0  _userName; \}\par ??        \}\par ??\par ??        \cf1 internal\cf0  \cf1 string\cf0  Password\par ??        \{\par ??            \cf1 get\cf0  \{ \cf1 return\cf0  _password; \}\par ??\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 void\cf0  SetCredentials(\cf1 string\cf0  user, \cf1 string\cf0  pwd)\par ??        \{\par ??            _userName = user;\par ??            _password = pwd;\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">SmsService</span> : <span style="color:#2b91af;">ISmsService</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:#2b91af;">SmsConfig</span> _config;</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">void</span> SetConfig(<span style="color:#2b91af;">SmsConfig</span> config)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">_config = config;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">void</span> SendMessage(<span style="color:blue;">string</span> number, <span style="color:blue;">string</span> message)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"SMS Message: {0} sent to {1} with account {2}"</span>, message, number, _config.UserName);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">SmsConfig</span></p>
<p style="margin:0;">{</p>
<p style="margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">string</span> _userName;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">string</span> _password;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">int</span> _retryAttempts{ <span style="color:blue;">get</span>; <span style="color:blue;">set</span>;}</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">internal</span> <span style="color:blue;">string</span> UserName</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">get</span> { <span style="color:blue;">return</span> _userName; }</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">internal</span> <span style="color:blue;">string</span> Password</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">get</span> { <span style="color:blue;">return</span> _password; }</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">void</span> SetCredentials(<span style="color:blue;">string</span> user, <span style="color:blue;">string</span> pwd)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">_userName = user;</p>
<p style="padding-left:60px;margin:0;">_password = pwd;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
Now, showing what is necessary to instantiate our SmsService class:
<div style="border:1px dashed;background:white none repeat scroll 0 50%;font-family:Courier New;font-size:10pt;color:black;">
<p style="margin:0;"><span style="color:#2b91af;">SmsService</span> service = <span style="color:blue;">new</span> <span style="color:#2b91af;">SmsService</span>();</p>
<p style="margin:0;"> </p>
<p style="margin:0;"><span style="color:#2b91af;">SmsService</span>.<span style="color:#2b91af;">SmsConfig</span> config = <span style="color:blue;">new</span> <span style="color:#2b91af;">SmsService</span>.<span style="color:#2b91af;">SmsConfig</span>();</p>
<p style="margin:0;">config.SetCredentials(<span style="color:#a31515;">"joe"</span>, <span style="color:#a31515;">"secret"</span>);</p>
<p style="margin:0;">config.RetryAttempts = 3;</p>
<p style="margin:0;"> </p>
<p style="margin:0;">service.SetConfig(config);</p>

</div>
That is not gonna work with Windsor straight away.  So, we need a factory to take care of this for us:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 SmsServiceFactory\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 string\cf0  _userName;\par ??        \cf3 private\cf0  \cf3 string\cf0  _password;\par ??        \cf3 private\cf0  \cf3 int\cf0  _retryAttempts \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par ??\par ??        \cf3 public\cf0  SmsServiceFactory(\cf3 string\cf0  _userName, \cf3 string\cf0  _password)\par ??        \{\par ??            \cf3 this\cf0 ._userName = _userName;\par ??            \cf3 this\cf0 ._password = _password;\par ??            _retryAttempts = 3;\par ??        \}\par ??\par ??        \cf3 public\cf0  \cf4 ISmsService\cf0  CreateService()\par ??        \{\par ??            \cf4 SmsService\cf0  service = \cf3 new\cf0  \cf4 SmsService\cf0 ();\par ??            \cf4 SmsConfig\cf0  config = \cf3 new\cf0  \cf4 SmsConfig\cf0 ();\par ??            config.SetCredentials(_userName,_password);\par ??            service.SetConfig(config);\par ??\par ??            \cf3 return\cf0  service;\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">SmsServiceFactory</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">string</span> _userName;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">string</span> _password;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">int</span> _retryAttempts { <span style="color:blue;">get</span>; <span style="color:blue;">set</span>; }</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> SmsServiceFactory(<span style="color:blue;">string</span> userName, <span style="color:blue;">string</span> password)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">this</span>._userName = userName;</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">this</span>._password = password;</p>
<p style="padding-left:60px;margin:0;">_retryAttempts = 3;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:#2b91af;">ISmsService</span> CreateService()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">SmsService</span> service = <span style="color:blue;">new</span> <span style="color:#2b91af;">SmsService</span>();</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">SmsConfig</span> config = <span style="color:blue;">new</span> <span style="color:#2b91af;">SmsConfig</span>();</p>
<p style="padding-left:60px;margin:0;">config.SetCredentials(_userName,_password);</p>
<p style="padding-left:60px;margin:0;">service.SetConfig(config);</p>
<p style="padding-left:60px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> service;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
Right.  Now we have to get our supporting Binsor squared away.  First off, let's register the facility.  Add the following import statement to the top of your .boo file:
<pre style="font-size:x-small;">import Castle.Facilities.FactorySupport from Castle.MicroKernel</pre>
So, Binsor knows where to get the facility.  Then, the facility itself:
<pre>facility FactorySupportFacility</pre>
Now we have to add our factory and our component:
<pre style="border:thin solid black;">component "smsservice.factory", SmsServiceFactory:
    userName="joe"
    password="secret"

component "smsservice.default", ISmsService,SmsService:
    @factoryId=@smsservice.factory
    @factoryCreate="CreateService"</pre>
Last, but not least, the program:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 private\cf0  \cf1 static\cf0  \cf1 void\cf0  Main(\cf1 string\cf0 [] args)\par ??        \{\par ??            container = \cf1 new\cf0  \cf4 WindsorContainer\cf0 ().Install(\cf4 BinsorScript\cf0 .FromFile(\cf5 "windsor.boo"\cf0 ));\par ??            \cf1 var\cf0  handler = container.Resolve&lt;\cf4 StepHandler\cf0 &gt;();\par ??            \cf1 string\cf0  method = \cf5 "Step"\cf0  + handler.StepNumber;\par ??\par ??            \cf4 Type\cf0  type = \cf1 typeof\cf0  (\cf4 Program\cf0 );\par ??            type.InvokeMember(method, \cf4 BindingFlags\cf0 .Default | \cf4 BindingFlags\cf0 .InvokeMethod, \cf1 null\cf0 , \cf1 null\cf0 , \cf1 new\cf0  \cf1 object\cf0 [] \{\});\par ??\par ??            \cf4 Console\cf0 .Read();\par ??        \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">static</span> <span style="color:blue;">void</span> Main(<span style="color:blue;">string</span>[] args)</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;">container = <span style="color:blue;">new</span> <span style="color:#2b91af;">WindsorContainer</span>().Install(<span style="color:#2b91af;">BinsorScript</span>.FromFile(<span style="color:#a31515;">"windsor.boo"</span>));</p>
<p style="padding-left:30px;margin:0;"><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red43\green145\blue175;\red255\green255\blue255;\red0\green0\blue0;\red163\green21\blue21;}??\fs20 \cf1 ISmsService\cf0  smsService = container.Resolve&lt;\cf1 ISmsService\cf0 &gt;();\par ??            smsService.SendMessage(\cf4 "+465556555"\cf0 , \cf4 "testing testing...1.2.3"\cf0 );} --></p>

<div style="background-image:none;background-repeat:repeat;background-attachment:scroll;background-color:white;font-family:'Courier New';font-size:8pt;color:black;padding-left:30px;background-position:0 0;">
<p style="margin:0;"><span style="color:#2b91af;">ISmsService</span> smsService = container.Resolve&lt;<span style="color:#2b91af;">ISmsService</span>&gt;();</p>
<p style="margin:0;">smsService.SendMessage(<span style="color:#a31515;">"+465556555"</span>, <span style="color:#a31515;">"testing testing...1.2.3"</span>);</p>

</div>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">Console</span>.Read();</p>
<p style="margin:0;">}</p>

</div>
Running the console, gives us:

<strong>SMS Message: testing testing...1.2.3 sent to +465556555 with account joe</strong>

Seems we're looking at the Decorator Pattern with Windsor next...
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/58ac3891-3867-4c08-8335-4d38492ab773/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=58ac3891-3867-4c08-8335-4d38492ab773" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2008-09-09 17:56:04</wp:post_date>
		<wp:post_date_gmt>2008-09-09 12:56:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-part-xi-factories</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1220964970]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>61</wp:comment_id>
		<wp:comment_author><![CDATA[James Thigpen / import Rhino.Commons from Rhino.Commons]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://www.jamesthigpen.com/blog/2008/09/23/import-rhinocommons-from-rhinocommons/</wp:comment_author_url>
		<wp:comment_author_IP>208.113.248.199</wp:comment_author_IP>
		<wp:comment_date>2008-09-23 20:41:53</wp:comment_date>
		<wp:comment_date_gmt>2008-09-23 15:41:53</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] it&#8217;s my own fault for using Binsor without being familiar with Boo, but I just ran into a doozy of a [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>66</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials, Binsor Style: XIV Startable Facilities &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/10/16/the-bitter-coder-tutorials-binsor-style-xiv-startable-facilities/</wp:comment_author_url>
		<wp:comment_author_IP>72.233.2.30</wp:comment_author_IP>
		<wp:comment_date>2008-10-16 05:30:12</wp:comment_date>
		<wp:comment_date_gmt>2008-10-16 00:30:12</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 11 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style: Part XII, Decorators</title>
		<link>http://ruprict.net/2008/10/01/the-bitter-coder-tutorials-binsor-style-part-xii-decorators/</link>
		<pubDate>Tue, 30 Sep 2008 19:26:39 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=70</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="zemanta-img zemanta-action-click" style="float:right;display:block;margin:1em;"><a href="http://en.wikipedia.org/wiki/Image:Decorator_Pattern_ZP.svg"><img style="border:medium none;display:block;" src="http://upload.wikimedia.org/wikipedia/en/thumb/e/e9/Decorator_Pattern_ZP.svg/202px-Decorator_Pattern_ZP.svg.png" alt="UML Class diagram of the decorator pattern" /></a>
<p class="zemanta-img-attribution">Image via <a href="http://en.wikipedia.org/wiki/Image:Decorator_Pattern_ZP.svg">Wikipedia</a></p>

</div>
Previous posts in the series:
<ul>
	<li><a href="https://ruprict.wordpress.com/2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="https://ruprict.wordpress.com/2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="https://ruprict.wordpress.com/2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
	<li><a href="https://ruprict.wordpress.com/2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/" target="_blank">Part 4</a></li>
	<li><a href="https://ruprict.wordpress.com/2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/" target="_blank">Part 5</a></li>
	<li><a href="https://ruprict.wordpress.com/2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/" target="_blank">Part 6</a></li>
	<li><a href="https://ruprict.wordpress.com/2008/08/11/the-bitter-coder-tutorials-binsor-style-vii-switching-implementations/" target="_blank">Part 7</a></li>
	<li><a href="https://ruprict.wordpress.com/2008/08/18/the-bitter-coder-tutorials-viii-referencing-instances-by-key/" target="_blank">Part 8</a></li>
	<li><a href="https://ruprict.wordpress.com/?p=58" target="_blank">Part 9</a></li>
	<li><a href="https://ruprict.wordpress.com/2008/09/02/the-bitter-coder-tutorials-binsor-style-part-x-setter-injection/" target="_self">Part 10</a></li>
	<li><a href="https://ruprict.wordpress.com/?p=66" target="_blank">Part 11</a></li>
</ul>
Today's post focuses on Decorators.  The <a class="zem_slink" title="Decorator pattern" rel="wikipedia" href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator Pattern</a> is a well-known <a class="zem_slink" title="Design pattern (computer science)" rel="wikipedia" href="http://en.wikipedia.org/wiki/Design_pattern_%28computer_science%29">design pattern</a> where functionality is added to a class by wrapping it with another class.  Like an onion, sorta.  Anyway, copying <a href="http://blog.bittercoder.com/PermaLink,guid,4863e460-2985-475c-9266-80b4895e80de.aspx" target="_blank">Alex</a>, we are going to use this pattern with Windsor to chain implementations together.

Here is our Order and OrderItem classes:
<div><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 Order\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 readonly\cf0  \cf4 List\cf0 &lt;\cf4 OrderItem\cf0 &gt; _items = \cf3 new\cf0  \cf4 List\cf0 &lt;\cf4 OrderItem\cf0 &gt;();\par ??        \cf3 public\cf0  \cf4 List\cf0 &lt;\cf4 OrderItem\cf0 &gt; Items\par ??        \{\par ??            \cf3 get\cf0  \{ \cf3 return\cf0  _items; \}\par ??        \}\par ??        \cf3 public\cf0  \cf3 string\cf0  CountryCode \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par ??    \}\par ??\par ??    \cf3 public\cf0  \cf3 class\cf0  \cf4 OrderItem\par ??\cf0     \{\par ??        \cf3 public\cf0  OrderItem(\cf3 string\cf0  name, \cf3 int\cf0  quantity, \cf3 decimal\cf0  costPerItem, \cf3 bool\cf0  isFragile)\par ??        \{\par ??            Name = name;\par ??            Quantity = quantity;\par ??            CostPerItem = costPerItem;\par ??            IsFragile = isFragile;\par ??        \}\par ??        \cf3 public\cf0  \cf3 bool\cf0  IsFragile \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par ??        \cf3 public\cf0  \cf3 int\cf0  Quantity \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par ??        \cf3 public\cf0  \cf3 decimal\cf0  CostPerItem \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par ??        \cf3 public\cf0  \cf3 string\cf0  Name \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">Order</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">readonly</span> <span style="color:#2b91af;">List</span>&lt;<span style="color:#2b91af;">OrderItem</span>&gt; _items = <span style="color:blue;">new</span> <span style="color:#2b91af;">List</span>&lt;<span style="color:#2b91af;">OrderItem</span>&gt;();</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:#2b91af;">List</span>&lt;<span style="color:#2b91af;">OrderItem</span>&gt; Items</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">get</span> { <span style="color:blue;">return</span> _items; }</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> CountryCode { <span style="color:blue;">get</span>; <span style="color:blue;">set</span>; }</p>
<p style="margin:0;">}</p>
<p style="margin:0;"></p>
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">OrderItem</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> OrderItem(<span style="color:blue;">string</span> name, <span style="color:blue;">int</span> quantity, <span style="color:blue;">decimal</span> costPerItem, <span style="color:blue;">bool</span> isFragile)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">Name = name;</p>
<p style="padding-left:60px;margin:0;">Quantity = quantity;</p>
<p style="padding-left:60px;margin:0;">CostPerItem = costPerItem;</p>
<p style="padding-left:60px;margin:0;">IsFragile = isFragile;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">bool</span> IsFragile { <span style="color:blue;">get</span>; <span style="color:blue;">set</span>; }</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">int</span> Quantity { <span style="color:blue;">get</span>; <span style="color:blue;">set</span>; }</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> CostPerItem { <span style="color:blue;">get</span>; <span style="color:blue;">set</span>; }</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> Name { <span style="color:blue;">get</span>; <span style="color:blue;">set</span>; }</p>
<p style="margin:0;">}</p>

</div>
</div>
And an interface to calculate the cost of an order:
<div><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 interface\cf0  \cf4 ICostCalculator\par ??\cf0     \{\par ??        \cf3 decimal\cf0  CalculateTotal(\cf4 Order\cf0  order);\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">interface</span> <span style="color:#2b91af;">ICostCalculator</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">decimal</span> CalculateTotal(<span style="color:#2b91af;">Order</span> order);</p>
<p style="margin:0;">}</p>

</div>
</div>
Our default cost calculator (Side note: I like LINQ):
<div><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 DefaultCostCalculator\cf0 :\cf4 ICostCalculator\par ??\cf0     \{\par ??        \cf3 public\cf0  \cf3 decimal\cf0  CalculateTotal(\cf4 Order\cf0  order)\par ??        \{\par ??            \cf3 return\cf0  order.Items.Sum(ord =&gt; ord.CostPerItem*ord.Quantity);\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">DefaultCostCalculator</span>:<span style="color:#2b91af;">ICostCalculator</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> CalculateTotal(<span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> order.Items.Sum(ord =&gt; ord.CostPerItem*ord.Quantity);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
</div>
Our Binsor for the DefaultCostCalculator:
<pre style="overflow:auto;border:thin solid #FFF;font-size:x-small;">component "default.calculator", ICostCalculator,DefaultCostCalculator</pre>
Now, the program itself:
<div><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 private\cf0  \cf1 static\cf0  \cf1 void\cf0  Main(\cf1 string\cf0 [] args)\par ??        \{\par ??            container = \cf1 new\cf0  \cf4 WindsorContainer\cf0 ().Install(\cf4 BinsorScript\cf0 .FromFile(\cf5 "windsor.boo"\cf0 ));\par ??            \cf1 var\cf0  handler = container.Resolve&lt;\cf4 StepHandler\cf0 &gt;();\par ??            \cf1 string\cf0  method = \cf5 "Step"\cf0  + handler.StepNumber;\par ??\par ??            \cf4 Type\cf0  type = \cf1 typeof\cf0  (\cf4 Program\cf0 );\par ??            type.InvokeMember(method, \cf4 BindingFlags\cf0 .Default | \cf4 BindingFlags\cf0 .InvokeMethod, \cf1 null\cf0 , \cf1 null\cf0 , \cf1 new\cf0  \cf1 object\cf0 [] \{\});\par ??\par ??            \cf4 Console\cf0 .Read();\par ??        \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;"><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 static\cf0  \cf1 void\cf0  Step12()\par ??        \{\par ??            \cf1 var\cf0  order1 = \cf1 new\cf0  \cf4 Order\par ??\cf0                              \{\par ??                                 CountryCode = \cf5 "NZ"\cf0 ,\par ??                                 Items =\par ??                                     \{\par ??                                         \cf1 new\cf0  \cf4 OrderItem\cf0 (\cf5 "water"\cf0 , 10, 1.0m, \cf1 false\cf0 ),\par ??                                         \cf1 new\cf0  \cf4 OrderItem\cf0 (\cf5 "glass"\cf0 , 5, 20.0m, \cf1 true\cf0 )\par ??                                     \}\par ??                             \};\par ??            \cf1 var\cf0  order2 = \cf1 new\cf0  \cf4 Order\par ??\cf0                              \{\par ??                                 CountryCode = \cf5 "US"\cf0 ,\par ??                                 Items =\par ??                                     \{\par ??                                         \cf1 new\cf0  \cf4 OrderItem\cf0 (\cf5 "sand"\cf0 , 50, 0.2m, \cf1 false\cf0 )\par ??                                     \}\par ??                             \};\par ??            \cf1 var\cf0  _calc = container.Resolve&lt;\cf4 ICostCalculator\cf0 &gt;();\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "Cost to deliver Order 1: \{0\}"\cf0 , _calc.CalculateTotal(order1));\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "Cost to deliver Order 2: \{0\}"\cf0 , _calc.CalculateTotal(order2));\par ??\par ??        \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">static</span> <span style="color:blue;">void</span> Main(string[] args)</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">var</span> order1 = <span style="color:blue;">new</span> <span style="color:#2b91af;">Order</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">CountryCode = <span style="color:#a31515;">"NZ"</span>,</p>
<p style="padding-left:60px;margin:0;">Items =</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">new</span> <span style="color:#2b91af;">OrderItem</span>(<span style="color:#a31515;">"water"</span>, 10, 1.0m, <span style="color:blue;">false</span>),</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">new</span> <span style="color:#2b91af;">OrderItem</span>(<span style="color:#a31515;">"glass"</span>, 5, 20.0m, <span style="color:blue;">true</span>)</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;">};</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">var</span> order2 = <span style="color:blue;">new</span> <span style="color:#2b91af;">Order</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">CountryCode = <span style="color:#a31515;">"US"</span>,</p>
<p style="padding-left:60px;margin:0;">Items =</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">new</span> <span style="color:#2b91af;">OrderItem</span>(<span style="color:#a31515;">"sand"</span>, 50, 0.2m, <span style="color:blue;">false</span>)</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;">};</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">var</span> _calc = container.Resolve&lt;<span style="color:#2b91af;">ICostCalculator</span>&gt;();</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"Cost to deliver Order 1: {0}"</span>, _calc.CalculateTotal(order1));</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"Cost to deliver Order 2: {0}"</span>, _calc.CalculateTotal(order2));</p>
<p style="margin:0;"></p>
<p style="margin:0;">}</p>

</div>
</div>
</div>
Running the program, gives us:
<div><strong>Cost to deliver Order 1: 110.0
Cost to deliver Order 2: 10.0</strong></div>
Now, let's go to New Zealand where we have to pay the Goods and Services Tax.  Here is our cost calculator for that:
<div><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 GstCostCalcualtorDecoarator\cf0  : \cf4 ICostCalculator\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 readonly\cf0  \cf4 ICostCalculator\cf0  _innerCalculator;\par ??        \cf1 private\cf0  \cf1 decimal\cf0  _gstRate = 1.125m;\par ??\par ??        \cf1 public\cf0  GstCostCalcualtorDecoarator(\cf4 ICostCalculator\cf0  innerCalculator)\par ??        \{\par ??            _innerCalculator = innerCalculator;\par ??        \}\par ??        \cf1 public\cf0  \cf1 decimal\cf0  GstRate\par ??        \{\par ??            \cf1 get\cf0  \{ \cf1 return\cf0  _gstRate; \}\par ??            \cf1 set\cf0  \{ _gstRate = \cf1 value\cf0 ; \}\par ??        \}\par ??\par ??\cf1         #region\cf0  ICostCalculator Members\par ??\par ??        \cf1 public\cf0  \cf1 decimal\cf0  CalculateTotal(\cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 decimal\cf0  innerTotal = _innerCalculator.CalculateTotal(order);\par ??            \cf1 if\cf0  (IsNewZealand(order))\par ??            \{\par ??                innerTotal = (innerTotal*_gstRate);\par ??            \}\par ??\par ??            \cf1 return\cf0  innerTotal;\par ??        \}\par ??\par ??\cf1         #endregion\par ??\par ??\cf0         \cf1 private\cf0  \cf1 bool\cf0  IsNewZealand(\cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 return\cf0  (order.CountryCode == \cf5 "NZ"\cf0 );\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">GstCostCalcualtorDecoarator</span> : <span style="color:#2b91af;">ICostCalculator</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">readonly</span> <span style="color:#2b91af;">ICostCalculator</span> _innerCalculator;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">decimal</span> _gstRate = 1.125m;</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> GstCostCalcualtorDecoarator(<span style="color:#2b91af;">ICostCalculator</span> innerCalculator)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">_innerCalculator = innerCalculator;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> GstRate</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">get</span> { <span style="color:blue;">return</span> _gstRate; }</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">set</span> { _gstRate = <span style="color:blue;">value</span>; }</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;"> #region</span> ICostCalculator Members</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> CalculateTotal(<span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">decimal</span> innerTotal = _innerCalculator.CalculateTotal(order);</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">if</span> (IsNewZealand(order))</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;">innerTotal = (innerTotal*_gstRate);</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> innerTotal;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;"> #endregion</span></p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">bool</span> IsNewZealand(<span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> (order.CountryCode == <span style="color:#a31515;">"NZ"</span>);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
</div>
And here's the Decorator pattern.  The GstCostCalculatorDecorator class accepts another ICostCalculator, then modifies the result by adding the GST.  The DefaultCostCalculator is clueless to the GST, which is the beauty inherit in the pattern.

Let's wire up the Binsor:
<pre style="overflow:auto;border:thin solid black;font-size:x-small;">component "gst.calculator", ICostCalculator, GstCostCalculatorDecorator:
    innerCalculator=@default.calculator

component "default.calculator", ICostCalculator,DefaultCostCalculator</pre>
We put the GST calculator first, so it's the default implementation, and run the program:

<strong>Cost to deliver Order 1: 123.7500
Cost to deliver Order 2: 10.0</strong>

So, the US one hasn't changed, as expected.  Finally, let's add a shipping calculator:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 ShippingCostCalculatorDecorator\cf0  : \cf4 ICostCalculator\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 readonly\cf0  \cf4 ICostCalculator\cf0  _innerCalculator;\par ??        \cf1 public\cf0  \cf1 decimal\cf0  ShippingCost \{ \cf1 get\cf0 ; \cf1 set\cf0 ; \}\par ??        \cf1 public\cf0  \cf1 decimal\cf0  FragileShippingPremium \{ \cf1 get\cf0 ; \cf1 set\cf0 ; \}\par ??        \cf1 public\cf0  ShippingCostCalculatorDecorator(\cf4 ICostCalculator\cf0  innerCalculator)\par ??        \{\par ??            _innerCalculator = innerCalculator;\par ??            ShippingCost = 5.0m;\par ??            FragileShippingPremium = 1.5m;\par ??        \}\par ??\par ??\cf1         #region\cf0  ICostCalculator Members\par ??        \cf1 public\cf0  \cf1 decimal\cf0  CalculateTotal(\cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 decimal\cf0  innerTotal = _innerCalculator.CalculateTotal(order);\par ??            \cf1 return\cf0  innerTotal + GetShippingTotal(order);\par ??        \}\par ??\cf1         #endregion\par ??\cf0         \cf1 private\cf0  \cf1 decimal\cf0  GetShippingTotal(\cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 return\cf0  order.Items.Sum(item =&gt;\par ??                                       \{\par ??                                           \cf1 var\cf0  itemShippingCost = ShippingCost*item.Quantity;\par ??                                           \cf1 if\cf0  (item.IsFragile) itemShippingCost *= FragileShippingPremium;\par ??                                           \cf1 return\cf0  itemShippingCost;\par ??                                       \});\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">ShippingCostCalculatorDecorator</span> : <span style="color:#2b91af;">ICostCalculator</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">readonly</span> <span style="color:#2b91af;">ICostCalculator</span> _innerCalculator;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> ShippingCost { <span style="color:blue;">get</span>; <span style="color:blue;">set</span>; }</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> FragileShippingPremium { <span style="color:blue;">get</span>; <span style="color:blue;">set</span>; }</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> ShippingCostCalculatorDecorator(<span style="color:#2b91af;">ICostCalculator</span> innerCalculator)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">_innerCalculator = innerCalculator;</p>
<p style="padding-left:60px;margin:0;">ShippingCost = 5.0m;</p>
<p style="padding-left:60px;margin:0;">FragileShippingPremium = 1.5m;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;"> #region</span> ICostCalculator Members</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> CalculateTotal(<span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">decimal</span> innerTotal = _innerCalculator.CalculateTotal(order);</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> innerTotal + GetShippingTotal(order);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;"> #endregion</span></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">decimal</span> GetShippingTotal(<span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> order.Items.Sum(item =&gt;</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">var</span> itemShippingCost = ShippingCost*item.Quantity;</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">if</span> (item.IsFragile) itemShippingCost *= FragileShippingPremium;</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">return</span> itemShippingCost;</p>
<p style="padding-left:60px;margin:0;">});</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
And add our Binsor, making sure it's the first ICostCalculator implementation in the file:
<pre style="overflow:auto;border:thin solid black;font-size:x-small;">component "shipping.calculator", ICostCalculator, ShippingCostCalculatorDecorator:
    innerCalculator=@gst.calculator</pre>
Run it.

<strong>Cost to deliver Order 1: 211.2500
Cost to deliver Order 2: 260.0</strong>

As Alex points out, we are calculating our GST before shipping, which is kinda stoopid.  The Decorator Pattern saves our bacon here, as we can just swap things around (oh, and we change some parameters too):
<pre style="border:thin solid black;font-size:x-small;overflow:auto;">component "gst.calculator", ICostCalculator, GstCostCalculatorDecorator:
    innerCalculator=@gst.calculator
    GstRate=1.20

component "shipping.calculator", ICostCalculator, ShippingCostCalculatorDecorator:
    innerCalculator=@default.calculator
    FragileShippingPremium=0.0

component "default.calculator", ICostCalculator,DefaultCostCalculator</pre>
Run it one more time:

<strong>Cost to deliver Order 1: 211.2500
Cost to deliver Order 2: 260.0</strong>

So, that's that.  Alex has some great comments in his post about other stuff you can do with the Decorator pattern, so I highly recommend you read his all the way through.

Next time we'll do this stuff without decorators....
<div><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 Order\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 readonly\cf0  \cf4 List\cf0 &lt;\cf4 OrderItem\cf0 &gt; _items = \cf1 new\cf0  \cf4 List\cf0 &lt;\cf4 OrderItem\cf0 &gt;();\par ??        \cf1 public\cf0  \cf4 List\cf0 &lt;\cf4 OrderItem\cf0 &gt; Items\par ??        \{\par ??            \cf1 get\cf0  \{ \cf1 return\cf0  _items; \}\par ??        \}\par ??        \cf1 public\cf0  \cf1 string\cf0  CountryCode \{ \cf1 get\cf0 ; \cf1 set\cf0 ; \}\par ??    \}\par ??\par ??    \cf1 public\cf0  \cf1 class\cf0  \cf4 OrderItem\par ??\cf0     \{\par ??        \cf1 public\cf0  OrderItem(\cf1 string\cf0  name, \cf1 int\cf0  quantity, \cf1 decimal\cf0  costPerItem, \cf1 bool\cf0  isFragile)\par ??        \{\par ??            Name = name;\par ??            Quantity = quantity;\par ??            CostPerItem = costPerItem;\par ??            IsFragile = isFragile;\par ??        \}\par ??        \cf1 public\cf0  \cf1 bool\cf0  IsFragile \{ \cf1 get\cf0 ; \cf1 set\cf0 ; \}\par ??        \cf1 public\cf0  \cf1 int\cf0  Quantity \{ \cf1 get\cf0 ; \cf1 set\cf0 ; \}\par ??        \cf1 public\cf0  \cf1 decimal\cf0  CostPerItem \{ \cf1 get\cf0 ; \cf1 set\cf0 ; \}\par ??        \cf1 public\cf0  \cf1 string\cf0  Name \{ \cf1 get\cf0 ; \cf1 set\cf0 ; \}\par ??    \}} --></div>
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/04592086-90e5-4bbe-a232-eed6ad71b121/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=04592086-90e5-4bbe-a232-eed6ad71b121" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date>2008-10-01 00:26:39</wp:post_date>
		<wp:post_date_gmt>2008-09-30 19:26:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-part-xii-decorators</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1222802814]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>63</wp:comment_id>
		<wp:comment_author><![CDATA[The Bitter Coder Tutorials, Binsor Style: Injecting Service Arrays &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2008/10/06/the-bitter-coder-tutorials-binsor-style-injecting-service-arrays/</wp:comment_author_url>
		<wp:comment_author_IP>66.135.48.143</wp:comment_author_IP>
		<wp:comment_date>2008-10-06 19:09:54</wp:comment_date>
		<wp:comment_date_gmt>2008-10-06 14:09:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 12 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style: Injecting Service Arrays</title>
		<link>http://ruprict.net/2008/10/06/the-bitter-coder-tutorials-binsor-style-injecting-service-arrays/</link>
		<pubDate>Mon, 06 Oct 2008 14:09:45 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[Previous posts in the series:
<ul>
	<li><a href="../2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="../2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="../2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
	<li><a href="../2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/" target="_blank">Part 4</a></li>
	<li><a href="../2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/" target="_blank">Part 5</a></li>
	<li><a href="../2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/" target="_blank">Part 6</a></li>
	<li><a href="../2008/08/11/the-bitter-coder-tutorials-binsor-style-vii-switching-implementations/" target="_blank">Part 7</a></li>
	<li><a href="../2008/08/18/the-bitter-coder-tutorials-viii-referencing-instances-by-key/" target="_blank">Part 8</a></li>
	<li><a href="../?p=58" target="_blank">Part 9</a></li>
	<li><a href="../2008/09/02/the-bitter-coder-tutorials-binsor-style-part-x-setter-injection/" target="_self">Part 10</a></li>
	<li><a href="../?p=66" target="_blank">Part 11</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/10/01/the-bitter-coder-tutorials-binsor-style-part-xii-decorators/" target="_blank">Part 12</a></li>
</ul>
This post feeds off off Part 12 and is based on Alex's post <a href="http://blog.bittercoder.com/PermaLink,guid,3e8c3c7f-169e-4f2c-8e1d-b702ece1f63c.aspx" target="_blank">here</a>.  We are going to rework the last post and remove the <a class="zem_slink" title="Decorator pattern" rel="wikipedia" href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.  Instead, we'll create a calculator that manages any number of other calculators, which are injected as an array.

So, in keeping with my shameless plagirizing of Alex's code, here is the abstract class for our new calculators:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 namespace\cf0  BitterCoder.Tutorials.Binsor.Core\par ??\{\par ??    \cf1 public\cf0  \cf1 abstract\cf0  \cf1 class\cf0  \cf4 AbstractCalculator\par ??\cf0     \{\par ??        \cf1 public\cf0  \cf1 abstract\cf0  \cf1 decimal\cf0  Calculate(\cf1 decimal\cf0  currentTotal, \cf4 Order\cf0  order);\par ??    \}\par ??\}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">namespace</span> BitterCoder.Tutorials.Binsor.Core</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">abstract</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">AbstractCalculator</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">abstract</span> <span style="color:blue;">decimal</span> Calculate(<span style="color:blue;">decimal</span> currentTotal, <span style="color:#2b91af;">Order</span> order);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
And now our total calculator:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 using\cf0  System.Linq;\par ??\par ??\cf1 namespace\cf0  BitterCoder.Tutorials.Binsor.Core\par ??\{\par ??    \cf1 public\cf0  \cf1 class\cf0  \cf4 TotalCalculator\cf0  : \cf4 AbstractCalculator\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 static\cf0  \cf1 decimal\cf0  CalculateTotal(\cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 return\cf0  order.Items.Sum(item =&gt; item.CostPerItem*item.Quantity);\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 override\cf0  \cf1 decimal\cf0  Calculate(\cf1 decimal\cf0  currentTotal, \cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 return\cf0  currentTotal + CalculateTotal(order);\par ??        \}\par ??    \}\par ??\}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">using</span> System.Linq;</p>
<p style="margin:0;"> </p>
<p style="margin:0;"><span style="color:blue;">namespace</span> BitterCoder.Tutorials.Binsor.Core</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">TotalCalculator</span> : <span style="color:#2b91af;">AbstractCalculator</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">static</span> <span style="color:blue;">decimal</span> CalculateTotal(<span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">return</span> order.Items.Sum(item =&gt; item.CostPerItem*item.Quantity);</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">override</span> <span style="color:blue;">decimal</span> Calculate(<span style="color:blue;">decimal</span> currentTotal, <span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">return</span> currentTotal + CalculateTotal(order);</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
And the GST calculator:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 namespace\cf0  BitterCoder.Tutorials.Binsor.Core\par ??\{\par ??    \cf1 public\cf0  \cf1 class\cf0  \cf4 GSTCostCalculatorNoDecorator\cf0  : \cf4 AbstractCalculator\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 decimal\cf0  _gstRate = 1.125m;\par ??\par ??        \cf1 public\cf0  \cf1 decimal\cf0  GstRate\par ??        \{\par ??            \cf1 get\cf0  \{ \cf1 return\cf0  _gstRate; \}\par ??            \cf1 set\cf0  \{ _gstRate = \cf1 value\cf0 ; \}\par ??        \}\par ??\par ??        \cf1 private\cf0  \cf1 static\cf0  \cf1 bool\cf0  IsNewZealand(\cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 return\cf0  (order.CountryCode == \cf5 "NZ"\cf0 );\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 override\cf0  \cf1 decimal\cf0  Calculate(\cf1 decimal\cf0  currentTotal, \cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 if\cf0  (IsNewZealand(order))\par ??            \{\par ??                \cf1 return\cf0  (currentTotal*_gstRate);\par ??            \}\par ??            \cf1 return\cf0  currentTotal;\par ??        \}\par ??    \}\par ??\}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">namespace</span> BitterCoder.Tutorials.Binsor.Core</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">GSTCostCalculatorNoDecorator</span> : <span style="color:#2b91af;">AbstractCalculator</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">decimal</span> _gstRate = 1.125m;</p>
<p style="padding-left:60px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> GstRate</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">get</span> { <span style="color:blue;">return</span> _gstRate; }</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">set</span> { _gstRate = <span style="color:blue;">value</span>; }</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">static</span> <span style="color:blue;">bool</span> IsNewZealand(<span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">return</span> (order.CountryCode == <span style="color:#a31515;">"NZ"</span>);</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">override</span> <span style="color:blue;">decimal</span> Calculate(<span style="color:blue;">decimal</span> currentTotal, <span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">if</span> (IsNewZealand(order))</p>
<p style="padding-left:90px;margin:0;">{</p>
<p style="padding-left:120px;margin:0;"><span style="color:blue;">return</span> (currentTotal*_gstRate);</p>
<p style="padding-left:90px;margin:0;">}</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">return</span> currentTotal;</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
The shipping calculator:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 namespace\cf0  BitterCoder.Tutorials.Binsor.Core\par ??\{\par ??    \cf1 public\cf0  \cf1 class\cf0  \cf4 ShippingCalculatorNoDecorator\cf0  : \cf4 AbstractCalculator\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 decimal\cf0  _fragileShippingPremium = 1.5m;\par ??        \cf1 private\cf0  \cf1 decimal\cf0  _shippingCost = 5.0m;\par ??\par ??        \cf1 public\cf0  \cf1 decimal\cf0  ShippingCost\par ??        \{\par ??            \cf1 get\cf0  \{ \cf1 return\cf0  _shippingCost; \}\par ??            \cf1 set\cf0  \{ _shippingCost = \cf1 value\cf0 ; \}\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 decimal\cf0  FragileShippingPremium\par ??        \{\par ??            \cf1 get\cf0  \{ \cf1 return\cf0  _fragileShippingPremium; \}\par ??            \cf1 set\cf0  \{ _fragileShippingPremium = \cf1 value\cf0 ; \}\par ??        \}\par ??\par ??        \cf1 private\cf0  \cf1 decimal\cf0  GetShippingTotal(\cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 decimal\cf0  shippingTotal = 0;\par ??            \cf1 return\cf0  order.Items.Sum(item =&gt;\par ??                   \{\par ??                       \cf1 decimal\cf0  itemShippingCost = ShippingCost*item.Quantity;\par ??                       \cf1 if\cf0  (item.IsFragile) itemShippingCost *= FragileShippingPremium;\par ??                       \cf1 return\cf0  shippingTotal += itemShippingCost;\par ??                   \});\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 override\cf0  \cf1 decimal\cf0  Calculate(\cf1 decimal\cf0  currentTotal, \cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 return\cf0  currentTotal + GetShippingTotal(order);\par ??        \}\par ??    \}\par ??\}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">namespace</span> BitterCoder.Tutorials.Binsor.Core</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">ShippingCalculatorNoDecorator</span> : <span style="color:#2b91af;">AbstractCalculator</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">decimal</span> _fragileShippingPremium = 1.5m;</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">decimal</span> _shippingCost = 5.0m;</p>
<p style="padding-left:60px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> ShippingCost</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">get</span> { <span style="color:blue;">return</span> _shippingCost; }</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">set</span> { _shippingCost = <span style="color:blue;">value</span>; }</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> FragileShippingPremium</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">get</span> { <span style="color:blue;">return</span> _fragileShippingPremium; }</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">set</span> { _fragileShippingPremium = <span style="color:blue;">value</span>; }</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">decimal</span> GetShippingTotal(<span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">decimal</span> shippingTotal = 0;</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">return</span> order.Items.Sum(item =&gt;</p>
<p style="padding-left:90px;margin:0;">{</p>
<p style="padding-left:120px;margin:0;"><span style="color:blue;">decimal</span> itemShippingCost = ShippingCost*item.Quantity;</p>
<p style="padding-left:120px;margin:0;"><span style="color:blue;">if</span> (item.IsFragile) itemShippingCost *= FragileShippingPremium;</p>
<p style="padding-left:120px;margin:0;"><span style="color:blue;">return</span> shippingTotal += itemShippingCost;</p>
<p style="padding-left:90px;margin:0;">});</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">override</span> <span style="color:blue;">decimal</span> Calculate(<span style="color:blue;">decimal</span> currentTotal, <span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">return</span> currentTotal + GetShippingTotal(order);</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
Lastly, our calculator of calculators, the reworked DefaultCalculator:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 DefaultCalculatorNoDecorator\cf0  : \cf4 ICostCalculator\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 readonly\cf0  \cf4 AbstractCalculator\cf0 [] _calculators;\par ??\par ??        \cf1 public\cf0  DefaultCalculatorNoDecorator(\cf4 AbstractCalculator\cf0 [] _calculators)\par ??        \{\par ??            \cf1 this\cf0 ._calculators = _calculators;\par ??        \}\par ??\par ??\par ??        \cf1 public\cf0  \cf1 decimal\cf0  CalculateTotal(\cf4 Order\cf0  order)\par ??        \{\par ??            \cf1 decimal\cf0  currentTotal = 0;\par ??            \par ??            \cf1 return\cf0  _calculators.Sum(calc =&gt; calc.Calculate(currentTotal, order));\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">DefaultCalculatorNoDecorator</span> : <span style="color:#2b91af;">ICostCalculator</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">readonly</span> <span style="color:#2b91af;">AbstractCalculator</span>[] _calculators;</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> DefaultCalculatorNoDecorator(<span style="color:#2b91af;">AbstractCalculator</span>[] _calculators)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">this</span>._calculators = _calculators;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">decimal</span> CalculateTotal(<span style="color:#2b91af;">Order</span> order)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">decimal</span> currentTotal = 0;</p>
<p style="padding-left:60px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">return</span> _calculators.Sum(calc =&gt; calc.Calculate(currentTotal, order));</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>
<p style="margin:0;"> </p>

</div>
So, we'll inject an array of calculators (total, shipping, and gst) into our default calculator.  Binsor, away!
<pre style="overflow:auto;border:thin solid black;font-size:x-small;">component "default.calculator", ICostCalculator,DefaultCalculatorNoDecorator:
    _calculators=[@total.calculatornodec,@shipping.calculatornodec,@gst.calculatornodec]

component "total.calculatornodec", AbstractCalculator,TotalCalculator

component "gst.calculatornodec", AbstractCalculator, GSTCostCalculatorNoDecorator:
    GstRate=Convert.ToDecimal(1.20)

component "shipping.calculatornodec", AbstractCalculator, ShippingCalculatorNoDecorator:
    FragileShippingPremium=Convert.ToDecimal(0.0)</pre>
Just like we did in <a href="http://ruprict.wordpress.com/2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">our post on arrays</a>, we inject an array of dependencies.  Changing the order is just a matter of switching the order in the binsor.  All good.

Running the program gives the same output as the last post.

Next post, which is the last in the series until Alex writes more (whew), is on the "Startable" facility.
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/991f1dfc-6539-437b-96b0-d66cf45f8c69/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=991f1dfc-6539-437b-96b0-d66cf45f8c69" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2008-10-06 19:09:45</wp:post_date>
		<wp:post_date_gmt>2008-10-06 14:09:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-injecting-service-arrays</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1223302189]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>The Bitter Coder Tutorials, Binsor Style: XIV Startable Facilities</title>
		<link>http://ruprict.net/2008/10/16/the-bitter-coder-tutorials-binsor-style-xiv-startable-facilities/</link>
		<pubDate>Thu, 16 Oct 2008 00:29:44 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Binsor]]></category>

		<category domain="tag" nicename="binsor"><![CDATA[Binsor]]></category>

		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[Previous posts in the series:
<ul>
	<li><a href="http://ruprict.wordpress.com/2008/07/11/the-bitter-coder-tutorials-binsor-style/" target="_blank">Part 1</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/12/the-bitter-coder-tutorials-binsor-style-arrays/" target="_blank">Part 2</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/14/the-bitter-coder-tutorials-binsor-style-iii-dictonaries/" target="_blank">Part 3</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/16/the-bitter-coder-tutorials-binsor-style-iv-switching-configs/" target="_blank">Part 4</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/07/28/the-bitter-coder-tutorial-binsor-style-v-configuration-parameters/" target="_blank">Part 5</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/08/04/the-bitter-coder-tutorials-binsor-style-vi-switching-lifestyles/" target="_blank">Part 6</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/08/11/the-bitter-coder-tutorials-binsor-style-vii-switching-implementations/" target="_blank">Part 7</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/08/18/the-bitter-coder-tutorials-viii-referencing-instances-by-key/" target="_blank">Part 8</a></li>
	<li><a href="http://ruprict.wordpress.com/?p=58" target="_blank">Part 9</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/09/02/the-bitter-coder-tutorials-binsor-style-part-x-setter-injection/" target="_self">Part 10</a></li>
	<li><a href="http://ruprict.wordpress.com/?p=66" target="_blank">Part 11</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/10/01/the-bitter-coder-tutorials-binsor-style-part-xii-decorators/" target="_blank">Part 12</a></li>
	<li><a href="http://ruprict.wordpress.com/2008/10/06/the-bitter-coder-tutorials-binsor-style-injecting-service-arrays/" target="_blank">Part 13</a></li>
</ul>
<div>The last (until Alex writes more) of our Bitter Binsor tutorials is here.  Today, we focus on the Startable Facility, which is explained in Alex's <a href="http://blog.bittercoder.com/PermaLink,guid,a621ddda-acb5-4afd-84ff-faafb96a2fa1.aspx" target="_blank">post</a>.  The link to the wiki in Alex's post is no good, so try <a href="http://www.castleproject.org/container/facilities/trunk/startable/index.html" target="_blank">here </a>for more info on the facility.  Basically, something is startable if it has the Start/Stop controllable lifecycle, like a web server.  In Castle, to be considered Startable you have to implement the IStartable interface:</div>
<div><!-- {\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red128\green128\blue128;\red255\green255\blue255;\red0\green128\blue0;\red0\green0\blue0;\red0\green0\blue255;\red43\green145\blue175;}??\fs20 \cf1 ///\cf3  \cf1 &lt;summary&gt;\par ??\cf0 \tab \cf1 ///\cf3  Interface for components that wish to be started by the container\par ??\cf0 \tab \cf1 ///\cf3  \cf1 &lt;/summary&gt;\par ??\cf0 \tab \cf5 public\cf0  \cf5 interface\cf0  \cf6 IStartable\par ??\cf0 \tab \{\par ??\tab \tab \cf1 ///\cf3  \cf1 &lt;summary&gt;\par ??\cf0 \tab \tab \cf1 ///\cf3  Starts this instance.\par ??\cf0 \tab \tab \cf1 ///\cf3  \cf1 &lt;/summary&gt;\par ??\cf0 \tab \tab \cf5 void\cf0  Start();\par ??\par ??\tab \tab \cf1 ///\cf3  \cf1 &lt;summary&gt;\par ??\cf0 \tab \tab \cf1 ///\cf3  Stops this instance.\par ??\cf0 \tab \tab \cf1 ///\cf3  \cf1 &lt;/summary&gt;\par ??\cf0 \tab \tab \cf5 void\cf0  Stop();\par ??\tab \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:gray;">///</span><span style="color:green;"> </span><span style="color:gray;">&lt;summary&gt;</span></p>
<p style="margin:0;"><span style="color:gray;">///</span><span style="color:green;"> Interface for components that wish to be started by the container</span></p>
<p style="margin:0;"><span style="color:gray;">///</span><span style="color:green;"> </span><span style="color:gray;">&lt;/summary&gt;</span></p>
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">interface</span> <span style="color:#2b91af;">IStartable</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:gray;">///</span><span style="color:green;"> </span><span style="color:gray;">&lt;summary&gt;</span></p>
<p style="padding-left:30px;margin:0;"><span style="color:gray;">///</span><span style="color:green;"> Starts this instance.</span></p>
<p style="padding-left:30px;margin:0;"><span style="color:gray;">///</span><span style="color:green;"> </span><span style="color:gray;">&lt;/summary&gt;</span></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">void</span> Start();</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:gray;">///</span><span style="color:green;"> </span><span style="color:gray;">&lt;summary&gt;</span></p>
<p style="padding-left:30px;margin:0;"><span style="color:gray;">///</span><span style="color:green;"> Stops this instance.</span></p>
<p style="padding-left:30px;margin:0;"><span style="color:gray;">///</span><span style="color:green;"> </span><span style="color:gray;">&lt;/summary&gt;</span></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">void</span> Stop();</p>
<p style="margin:0;">}</p>

</div>
</div>
<div>Once you register the Startable Facility with the Windsor Container, it will attempt to create and call .Start() on any startable component, provided all the dependencies have been satisfied.  So, every time a component is registered with the container, Windsor checks to see if a startable component has all dependencies satisfied and can be started.  Alex discusses the startable facility more in his post, so make sure you read it too.</div>
<div>Let's create the LameHttpServer using this code:</div>
<div><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 LameHttpServer\cf0 :\cf4 IStartable\cf0  \par ??    \{\par ??        \cf1 private\cf0  \cf1 string\cf0  _path;\par ??        \cf1 private\cf0  \cf4 HttpListener\cf0  _listener;\par ??        \cf1 private\cf0  \cf4 Thread\cf0  _listenerThread;\par ??        \cf1 private\cf0  \cf4 ILogger\cf0  _logger;\par ??\par ??        \cf1 public\cf0  \cf4 ILogger\cf0  Logger\par ??        \{\par ??            \cf1 get\par ??\cf0             \{\par ??                \cf1 if\cf0  (_logger == \cf1 null\cf0 )\par ??                    _logger = \cf4 NullLogger\cf0 .Instance;\par ??                \cf1 return\cf0  _logger;\par ??            \}\par ??            \cf1 set\cf0  \{ _logger = \cf1 value\cf0 ; \}\par ??        \}\par ??\par ??        \cf1 public\cf0  LameHttpServer(\cf1 string\cf0  prefix, \cf1 string\cf0  path)\par ??        \{\par ??            _path = path;\par ??            _listener= \cf1 new\cf0  \cf4 HttpListener\cf0 ();\par ??            _listener.Prefixes.Add(prefix);\par ??        \}\par ??\par ??\par ??        \cf1 public\cf0  \cf1 void\cf0  Start()\par ??        \{\par ??            Logger.Debug(\cf5 "Starting LameWebService..."\cf0 );\par ??            _listener.Start();\par ??            _listenerThread = \cf1 new\cf0  \cf4 Thread\cf0 (RequestWorker);\par ??            _listenerThread.Start();\par ??            Logger.Info(\cf5 "LameWebService started..."\cf0 );\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 void\cf0  Stop()\par ??        \{\par ??            Logger.Debug(\cf5 "Stopping LameWebService..."\cf0 );\par ??            _listenerThread.Abort();\par ??            _listener.Stop();\par ??            Logger.Info(\cf5 "LameWebService stopped."\cf0 );\par ??        \}\par ??\par ??        \cf1 private\cf0  \cf1 void\cf0  RequestWorker()\par ??        \{\par ??            \cf1 while\cf0  (\cf1 true\cf0 )\par ??            \{\par ??                \cf4 HttpListenerContext\cf0  _context = \cf1 null\cf0 ;\par ??                \cf1 try\par ??\cf0                 \{\par ??                    _context=_listener.GetContext();\par ??                \} \cf1 catch\cf0  (\cf4 ObjectDisposedException\cf0  ex)\par ??                \{\par ??                    \cf1 return\cf0 ;\par ??                \}\par ??                ServeContext(_context.Response, _path);\par ??\par ??            \}\par ??        \}\par ??\par ??        \cf1 private\cf0  \cf1 void\cf0  ServeContext(\cf4 HttpListenerResponse\cf0  response, \cf1 string\cf0  _path)\par ??        \{\par ??            \cf1 string\cf0  content = \cf4 File\cf0 .ReadAllText(_path);\par ??            \cf1 byte\cf0 [] buffer = \cf4 Encoding\cf0 .UTF8.GetBytes(content);\par ??            response.ContentLength64 = buffer.Length;\par ??\par ??            \cf4 Stream\cf0  output = response.OutputStream;\par ??            output.Write(buffer, 0 , buffer.Length);\par ??            output.Close();\par ??\par ??        \}\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">LameHttpServer</span>:<span style="color:#2b91af;">IStartable</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">string</span> _path;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:#2b91af;">HttpListener</span> _listener;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:#2b91af;">Thread</span> _listenerThread;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:#2b91af;">ILogger</span> _logger;</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:#2b91af;">ILogger</span> Logger</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">get</span></p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">if</span> (_logger == <span style="color:blue;">null</span>)</p>
<p style="padding-left:90px;margin:0;">_logger = <span style="color:#2b91af;">NullLogger</span>.Instance;</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">return</span> _logger;</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">set</span> { _logger = <span style="color:blue;">value</span>; }</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> LameHttpServer(<span style="color:blue;">string</span> prefix, <span style="color:blue;">string</span> path)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">_path = path;</p>
<p style="padding-left:60px;margin:0;">_listener= <span style="color:blue;">new</span> <span style="color:#2b91af;">HttpListener</span>();</p>
<p style="padding-left:60px;margin:0;">_listener.Prefixes.Add(prefix);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">void</span> Start()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">Logger.Debug(<span style="color:#a31515;">"Starting LameWebService..."</span>);</p>
<p style="padding-left:60px;margin:0;">_listener.Start();</p>
<p style="padding-left:60px;margin:0;">_listenerThread = <span style="color:blue;">new</span> <span style="color:#2b91af;">Thread</span>(RequestWorker);</p>
<p style="padding-left:60px;margin:0;">_listenerThread.Start();</p>
<p style="padding-left:60px;margin:0;">Logger.Info(<span style="color:#a31515;">"LameWebService started..."</span>);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">void</span> Stop()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">Logger.Debug(<span style="color:#a31515;">"Stopping LameWebService..."</span>);</p>
<p style="padding-left:60px;margin:0;">_listenerThread.Abort();</p>
<p style="padding-left:60px;margin:0;">_listener.Stop();</p>
<p style="padding-left:60px;margin:0;">Logger.Info(<span style="color:#a31515;">"LameWebService stopped."</span>);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">void</span> RequestWorker()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">while</span> (<span style="color:blue;">true</span>)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:#2b91af;">HttpListenerContext</span> _context = <span style="color:blue;">null</span>;</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">try</span></p>
<p style="padding-left:90px;margin:0;">{</p>
<p style="padding-left:120px;margin:0;">_context=_listener.GetContext();</p>
<p style="padding-left:90px;margin:0;">} <span style="color:blue;">catch</span> (<span style="color:#2b91af;">ObjectDisposedException</span> ex)</p>
<p style="padding-left:90px;margin:0;">{</p>
<p style="padding-left:120px;margin:0;"><span style="color:blue;">return</span>;</p>
<p style="padding-left:90px;margin:0;">}</p>
<p style="padding-left:90px;margin:0;">ServeContext(_context.Response, _path);</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">void</span> ServeContext(<span style="color:#2b91af;">HttpListenerResponse</span> response, <span style="color:blue;">string</span> _path)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">string</span> content = <span style="color:#2b91af;">File</span>.ReadAllText(_path);</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">byte</span>[] buffer = <span style="color:#2b91af;">Encoding</span>.UTF8.GetBytes(content);</p>
<p style="padding-left:60px;margin:0;">response.ContentLength64 = buffer.Length;</p>
<p style="padding-left:60px;margin:0;"></p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">Stream</span> output = response.OutputStream;</p>
<p style="padding-left:60px;margin:0;">output.Write(buffer, 0 , buffer.Length);</p>
<p style="padding-left:60px;margin:0;">output.Close();</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
</div>
<div>Looking at the class, we need a couple of configuration parameters as well as a dependency on  ILogger.  We'll use the Castle Logging Facility for that, which is probably the facility I use most.  You should check it out.  Anyway, here's our Binsor:</div>
<pre style="border:thin solid black;font-size:x-small;">facility "startable.facility", StartableFacility

facility "logging.facility",LoggingFacility:
  loggingApi=LoggerImplementation.Console

component "lame.http", LameHttpServer:
    prefix="http://*:8089/"
    path="lame.html"</pre>
So, we register the facilities discussed earlier.  BTW, in order to resolve the facilities, I had to add the following to the top of Windsor.boo, in the import section:
<pre style="border:thin solid black;font-size:x-small;">import Castle.Facilities.Startable from Castle.MicroKernel
import Castle.Facilities.Logging</pre>
Also, I added  a reference to the Castle.Facilites.Logging assembly.  I already had a reference for Castle.MicroKernel from a previous post.

Let's look at our console code to crank up the server:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 static\cf0  \cf1 void\cf0  Step14()\par ??        \{\par ??            GetPage();\par ??            container.Dispose();\par ??            GetPage();\par ??            \par ??        \}\par ??\par ??        \cf1 private\cf0  \cf1 static\cf0  \cf1 void\cf0  GetPage()\par ??        \{\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "\\r\\nClient: requesting http://localhost:8089/..."\cf0 );\par ??            \cf1 try\par ??\cf0             \{\par ??                \cf4 WebClient\cf0  client = \cf1 new\cf0  \cf4 WebClient\cf0 ();\par ??                \cf1 string\cf0  content = client.DownloadString(\cf5 "http://localhost:8089/"\cf0 );\par ??                \cf4 Console\cf0 .WriteLine(\cf5 "Client: success, content follows.\\r\\n\\r\\n \{0\}"\cf0 , content);\par ??            \} \cf1 catch\cf0  (\cf4 WebException\cf0  ex)\par ??            \{\par ??                \cf4 Console\cf0 .WriteLine(\cf5 "Client: Exception occurred, message \{0\}"\cf0 ,ex.Message);\par ??            \}\par ??        \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">static</span> <span style="color:blue;">void</span> Main(string[] args)</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;">container = new WindsorContainer().Install(BinsorScript.FromFile("windsor.boo"));</p>
<p style="padding-left:30px;margin:0;">GetPage();</p>
<p style="padding-left:30px;margin:0;">container.Dispose();</p>
<p style="padding-left:30px;margin:0;">GetPage();</p>
<p style="margin:0;"></p>
<p style="margin:0;">}</p>
<p style="margin:0;"></p>
<p style="margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">static</span> <span style="color:blue;">void</span> GetPage()</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"\r\nClient: requesting http://localhost:8089/..."</span>);</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">try</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">WebClient</span> client = <span style="color:blue;">new</span> <span style="color:#2b91af;">WebClient</span>();</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">string</span> content = client.DownloadString(<span style="color:#a31515;">"http://localhost:8089/"</span>);</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"Client: success, content follows.\r\n\r\n {0}"</span>, content);</p>
<p style="padding-left:30px;margin:0;">} <span style="color:blue;">catch</span> (<span style="color:#2b91af;">WebException</span> ex)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"Client: Exception occurred, message {0}"</span>,ex.Message);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
So, as can be seen above, we
<ol>
	<li>Create the container, which kicks off the server, coz it's all Startable and stuff.</li>
	<li>Call GetPage().</li>
	<li>Dispose of the conatainer.</li>
	<li>Call GetPage() again.</li>
	<li>Wonder aloud of Alex minds plagiarism.</li>
</ol>
Here's the results:
<pre><strong>[Debug] 'BitterCoder.Tutorials.Binsor.Core.LameHttpServer' Starting LameWebService...
[Info] 'BitterCoder.Tutorials.Binsor.Core.LameHttpServer' LameWebService started...

Client: requesting http://localhost:8089/...
Client: success, content follows.

 &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;html&gt;
        &lt;head&gt;
                &lt;title&gt;&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
             &lt;h1&gt;Lame.html&lt;/h1&gt;
        &lt;h2&gt;Welcome to lame.html file&lt;/h2&gt;
        &lt;p&gt;This is the contents of the lame.html file, neat huh?&lt;/p&gt;
        &lt;/body&gt;
&lt;/html&gt;
[Debug] 'BitterCoder.Tutorials.Binsor.Core.LameHttpServer' Stopping LameWebService...
[Info] 'BitterCoder.Tutorials.Binsor.Core.LameHttpServer' LameWebService stopped.

Client: requesting http://localhost:8089/...
Client: Exception occurred, message Unable to connect to the remote server</strong></pre>
The error at the end of the results is due to us disposing of the container, which decommisions all the components in the container.  Alex explains this well...so read what he said.

So, I am gonna modify Alex's final example where he demonstrates lifestyles and their effect on Startable facilities.  The only difference, really, is I am  going to show you what the Binsor looks like to control the lifestyle of a component.

Here's our StartableExperiment:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 StartableExperiment\cf0  : \cf4 IStartable\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 static\cf0  \cf1 int\cf0  _count;\par ??        \cf1 private\cf0  \cf1 readonly\cf0  \cf1 int\cf0  _number;\par ??\par ??        \cf1 public\cf0  StartableExperiment()\par ??        \{\par ??            _number = ++_count;\par ??        \}\par ??\par ??\cf1         #region\cf0  IStartable Members\par ??\par ??        \cf1 public\cf0  \cf1 void\cf0  Start()\par ??        \{\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "Started #\{0\}"\cf0 , _number);\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 void\cf0  Stop()\par ??        \{\par ??            \cf4 Console\cf0 .WriteLine(\cf5 "Stopped #\{0\}"\cf0 , _number);\par ??        \}\par ??\par ??\cf1         #endregion\par ??\cf0     \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">StartableExperiment</span> : <span style="color:#2b91af;">IStartable</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">static</span> <span style="color:blue;">int</span> _count;</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">readonly</span> <span style="color:blue;">int</span> _number;</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> StartableExperiment()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">_number = ++_count;</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;"> #region</span> IStartable Members</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">void</span> Start()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"Started #{0}"</span>, _number);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">void</span> Stop()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"Stopped #{0}"</span>, _number);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;"> #endregion</span></p>
<p style="margin:0;">}</p>

</div>
And the Binsor:
<pre>component "startable.exp", StartableExperiment:
    @lifestyle=LifestyleType.Transient</pre>
(You need to import Castle.Core to get the LifestyleType enum)

Running the following program code:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red43\green145\blue175;\red255\green255\blue255;\red0\green0\blue0;}??\fs20 \cf1 StartableExperiment\cf0  exp1 = container.Resolve&lt;\cf1 StartableExperiment\cf0 &gt;();\par ??            container.Release(exp1);\par ??            \cf1 StartableExperiment\cf0  exp2 = container.Resolve&lt;\cf1 StartableExperiment\cf0 &gt;();\par ??            container.Release(exp2);} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:#2b91af;">StartableExperiment</span> exp1 = container.Resolve&lt;<span style="color:#2b91af;">StartableExperiment</span>&gt;();</p>
<p style="margin:0;">container.Release(exp1);</p>
<p style="margin:0;"><span style="color:#2b91af;">StartableExperiment</span> exp2 = container.Resolve&lt;<span style="color:#2b91af;">StartableExperiment</span>&gt;();</p>
<p style="margin:0;">container.Release(exp2);</p>

</div>
yields:

<strong>Started #1
Started #2
Stopped #2
Started #3
Stopped #3
Stopped #1</strong>

If I change the @lifestyle attribute in the Binsor to LifestyleType.Singleton, I get:

<strong>Started #1
Stopped #1</strong>

And that's Startable Facilities and their lifestyles, from a Binsor point-of-view.

So, I hope someone enjoyed the series.  Thanks again to Alex for his tutorials.  They were a big rung in my learning ladder for Windsor.

I created a VS.NET project with all the code from this series.  If you're interested, hit me at glenn(dot)goodrich(at)gmail.com.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2008-10-16 05:29:44</wp:post_date>
		<wp:post_date_gmt>2008-10-16 00:29:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-bitter-coder-tutorials-binsor-style-xiv-startable-facilities</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1224116986]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ASP.NET MVC: LogError Action Filter</title>
		<link>http://ruprict.net/2008/10/31/aspnet-mvc-logerror-action-filter/</link>
		<pubDate>Thu, 30 Oct 2008 21:01:46 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ASP.NET]]></category>

		<category domain="category" nicename="aspnet"><![CDATA[ASP.NET]]></category>

		<category domain="tag"><![CDATA[ASP.NET]]></category>

		<category domain="tag" nicename="aspnet"><![CDATA[ASP.NET]]></category>

		<category domain="tag"><![CDATA[mvc]]></category>

		<category domain="tag" nicename="mvc"><![CDATA[mvc]]></category>

		<category><![CDATA[MVC]]></category>

		<category domain="category" nicename="mvc-aspnet"><![CDATA[MVC]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=91</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="padding-left:30px;">I am messing about with the ASP.NET MVC Beta, and have stumbled into the Action Filter arena.  Specifically, I was checking out the HandleError Attribute which redirects to a local or shared error page if an appropriately attributed controller thows an error.  This is similar to the rescue stuff in Rails/MonoRail, and it's nice.</p>
<p style="padding-left:30px;">However, we also want to log the error, so I started to put a logger in the Application_Error method of the Global application, but I am not wild about that option.  It either forces me to handle every exception the exact same way or leads me down the path of the Huge Swtich Statement and neither of those paths really blows my skirt up.  If I could just augment the HandleError functionality, which I like, with some configurable logging functionality, which I want, then life would be good.</p>
<p style="padding-left:30px;">As you might imagine, this is very easy.  In fact, I bet I haven't even found the easiest way, but I'll write what I did anyway.  Simply subclassing the <a href="http://quickstarts.asp.net/previews/mvc/mvc_HowToImplementHandleErrorFilter.htm" target="_blank">HandleErrorAttribute </a>class to a new LogErrorAttribute class and overriding OnException does the job.</p>
<p style="padding-left:30px;"><!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 public\cf0  \cf1 class\cf0  \cf4 LogErrorAttribute\cf0 : \cf4 HandleErrorAttribute\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 readonly\cf0  \cf4 ILog\cf0  _logger;\par ??\par ??        \cf1 public\cf0  LogErrorAttribute()\par ??        \{\par ??            log4net.Config.\cf4 BasicConfigurator\cf0 .Configure();\par ??            _logger = log4net.\cf4 LogManager\cf0 .GetLogger(GetType());\par ??\par ??        \}\par ??\par ??        \cf1 public\cf0  \cf1 override\cf0  \cf1 void\cf0  OnException(\cf4 ExceptionContext\cf0  filterContext)\par ??        \{\par ??            _logger.Error(filterContext.Exception.Message);\par ??            \cf1 base\cf0 .OnException(filterContext);\par ??        \}\par ??    \}} --></p>

<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;padding-left:30px;">
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">LogErrorAttribute</span>: <span style="color:#2b91af;">HandleErrorAttribute</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">private</span> <span style="color:blue;">readonly</span> <span style="color:#2b91af;">ILog</span> _logger;</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> LogErrorAttribute()</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">log4net.Config.<span style="color:#2b91af;">BasicConfigurator</span>.Configure();</p>
<p style="padding-left:60px;margin:0;">_logger = log4net.<span style="color:#2b91af;">LogManager</span>.GetLogger(GetType());</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="padding-left:30px;margin:0;"></p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">override</span> <span style="color:blue;">void</span> OnException(<span style="color:#2b91af;">ExceptionContext</span> filterContext)</p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">_logger.Error(filterContext.Exception.Message);</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">base</span>.OnException(filterContext);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
<p style="padding-left:30px;">I am using log4net here, which means I have to put a &lt;log4net&gt; section in my web.config.  It also means that I can change out where/how things are logged using the awesome <a title="Millions of options here" href="http://logging.apache.org/log4net/release/manual/configuration.html" target="_blank">log4net configuration options</a>.  Very nice.  Also, since I inherit from HandleErrorAttribute, the redirect to the Error views (default and specified) is still in play.  Me likey.  Just attribute your Controller classes and/or methods with [LogError] and the logging just works.</p>
<p style="padding-left:30px;">My guess is some of the big brains out there have a better/cleaner way to do this, since I am pretty new to the ASP.NET MVC world.   If so, put it in the comments please.</p>

<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/abac5cee-cc26-4e2b-90bb-9fef3be65cd4/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=abac5cee-cc26-4e2b-90bb-9fef3be65cd4" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date>2008-10-31 02:01:46</wp:post_date>
		<wp:post_date_gmt>2008-10-30 21:01:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>aspnet-mvc-logerror-action-filter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1234469090]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>69</wp:comment_id>
		<wp:comment_author><![CDATA[Sgro]]></wp:comment_author>
		<wp:comment_author_email>matteo.mosca@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>83.211.117.200</wp:comment_author_IP>
		<wp:comment_date>2008-11-12 15:23:30</wp:comment_date>
		<wp:comment_date_gmt>2008-11-12 10:23:30</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[HandleError is sealed... how can you inherit from that?

You should get the MVC sources and recompile the attribute to your needs.. and that's what I am doing atm..]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>70</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-11-12 17:59:43</wp:comment_date>
		<wp:comment_date_gmt>2008-11-12 12:59:43</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Actually, they removed the 'sealed' keyword from HandleErrorAttribute in preview 5.  

<a href="http://devlicio.us/blogs/derik_whittaker/archive/2008/08/29/asp-net-mvc-drop-5-has-been-released.aspx" rel="nofollow">Linkage</a>

Thanks,
Ruprict]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>71</wp:comment_id>
		<wp:comment_author><![CDATA[Sgro]]></wp:comment_author>
		<wp:comment_author_email>matteo.mosca@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>83.211.117.200</wp:comment_author_IP>
		<wp:comment_date>2008-11-12 18:09:36</wp:comment_date>
		<wp:comment_date_gmt>2008-11-12 13:09:36</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Actually, I have Beta source files (more recent than preview 5) and it's sealed...]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>72</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-11-12 18:37:06</wp:comment_date>
		<wp:comment_date_gmt>2008-11-12 13:37:06</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Are you sure?  I just downloaded the latest (17272) and it is not sealed.  

Also, we are using Beta in our project, and I am definitely inheriting from it.

Which change set is your source from?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>108</wp:comment_id>
		<wp:comment_author><![CDATA[Bigglesworth]]></wp:comment_author>
		<wp:comment_author_email>bigglesworth@royalurbanite.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>78.86.138.121</wp:comment_author_IP>
		<wp:comment_date>2009-02-13 00:59:53</wp:comment_date>
		<wp:comment_date_gmt>2009-02-12 19:59:53</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Using RC1 and sucessfully subclassed the HandleErrorAttribute, but I have no logging???

How you doing this dude?

Have you tried it with RC1?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>446</wp:comment_id>
		<wp:comment_author><![CDATA[Chris Tesene]]></wp:comment_author>
		<wp:comment_author_email>info@christesene.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.57.30.192</wp:comment_author_IP>
		<wp:comment_date>2011-08-24 12:51:39</wp:comment_date>
		<wp:comment_date_gmt>2011-08-24 07:51:39</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Really nice.. Thanks for the good explanation, and clear code.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>ArcGIS Server Javascript API Gotcha: Identify</title>
		<link>http://ruprict.net/2008/11/18/arcgis-server-javascript-api-gotcha-identify/</link>
		<pubDate>Mon, 17 Nov 2008 22:11:40 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[I ran into an odd problem after I installed SP1 (actually a few odd problems) with a site using the ArcGIS Server javascript API.  Basically, the identify task broke in IE only.  All was well in <a class="zem_slink" title="Mozilla Firefox" rel="geolocation" href="http://maps.google.com/maps?ll=45.1238,-123.1138&amp;spn=1.0,1.0&amp;q=45.1238,-123.1138%20%28Mozilla%20Firefox%29&amp;t=h">Firefox</a>, so I was stumped, as I didn't receive any error messages.  So, I cranked open <a href="http://www.fiddlertool.com/fiddler/" target="_blank">Fidder </a>which revealed that the HTTP request was never happening.  Strange, I thought, so I copied the HTTP request that was working in Firefox from the <a class="zem_slink" title="Firebug (Firefox extension)" rel="wikipedia" href="http://en.wikipedia.org/wiki/Firebug_%28Firefox_extension%29">Firebug</a> Net tab and pasted it into the IE address bar, yet it wouldn't let me paste the whole URL.  So, the URL was too long...but why?  As it turns out the <a href="http://resources.esri.com/help/9.3/arcgisserver/apis/javascript/arcgis/help/jsapi_start.htm" target="_blank">IdentifyParameters </a>use a geometry, and that geometry has a spatialReference, which comes from the map.  The spatialReference we use is WKID 2913, which is one of the Oregon State Plane projected systems.   When the API sets this value on the javascript map object, it uses the Well-Known Text (WKT) version, which is a REALLY long string.  So, I overwrite the spatialReference on the geometry before executing the identify task with a light object that just has the WKID.  Like so:
<pre style="font-size:x-small;overflow:scroll;">function doIdentify(evt) {
    taskParameters.mapExtent = this.map.extent;
    taskParameters.geometry = evt.mapPoint;
    // have to do this in order to make this work in IE.
    // otherwise the AGS jsapi will post the WKT which makes the URL too long.
    taskParameters.geometry.spatialReference = { wkid: 2913, toJson: function() { return '{"wkid":"2913"}'; } };

    var task = new esri.tasks.IdentifyTask(serv.URL);
    taskParameters.height = this.map.height;
    taskParameters.width = this.map.width;
    task.execute(this.taskParameters, _identifyResults);

}</pre>
Once the URL wasn't too long, identify started working in IE again.

Anyone else having any issues after installing AGS 9.3 SP1?
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/d01b7a60-6b07-4438-8d38-b67c846c9777/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=d01b7a60-6b07-4438-8d38-b67c846c9777" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date>2008-11-18 03:11:40</wp:post_date>
		<wp:post_date_gmt>2008-11-17 22:11:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arcgis-server-javascript-api-gotcha-identify</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1227018918]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>73</wp:comment_id>
		<wp:comment_author><![CDATA[Dave Bouwman]]></wp:comment_author>
		<wp:comment_author_email>dave@davebouwman.com</wp:comment_author_email>
		<wp:comment_author_url>http://blog.davebouwman.net</wp:comment_author_url>
		<wp:comment_author_IP>204.133.225.162</wp:comment_author_IP>
		<wp:comment_date>2008-11-18 04:44:32</wp:comment_date>
		<wp:comment_date_gmt>2008-11-17 23:44:32</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[While I like the general RESTness of the ESRI REST API, I think they should facilitate POSTing for some of these query methods - sacrifice some RESTness for some pragmatism. The fact that these querystrings get long is a know issue, and part of the reason they have a proxy.ashx that you can POST to, and it will then re-format it and make the request. More info here http://www.gisworldonline.com/2008/09/esriarcgisveconfigproxy-is-not-set.html]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>74</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-11-18 05:37:25</wp:comment_date>
		<wp:comment_date_gmt>2008-11-18 00:37:25</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I have been avoiding the proxy page, b/c I am lazy.  Guess I'll get it going tomorrow.  I still find it odd that this little bug didn't popup until after I installed SP1.

Thanks for the link!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>75</wp:comment_id>
		<wp:comment_author><![CDATA[vish]]></wp:comment_author>
		<wp:comment_author_email>viswaug@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.Vishcio.us</wp:comment_author_url>
		<wp:comment_author_IP>66.173.230.87</wp:comment_author_IP>
		<wp:comment_date>2008-11-18 06:32:15</wp:comment_date>
		<wp:comment_date_gmt>2008-11-18 01:32:15</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hi Glenn,

I haven't installed SP1 yet. It is on my list of things to do this week. Anyway, I am having trouble understanding your problem though. From what you have written, it looks like you are saying that the JS API has changed. Has ESRI released v1.2 of the JS API and have it available on their servers? If so, please do let me know. If not, your problem is something else since SP1 should not have anything to do with JS API. Let me know what you find out.

Thank You,
Vish]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>76</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-11-18 07:01:59</wp:comment_date>
		<wp:comment_date_gmt>2008-11-18 02:01:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey Vish,

Fair enough.  The change would have to be with the REST API, presuming there is a change.  My best guess, and I may never confirm this, is that the REST API is returning WKT values for the map spatial Ref once the first service is added to the map.  Then, that spatial Ref is being pushed on to the event.mapPoint used by the identify task, which is then finally pushed into the REST URL.  

Might be a long way home....can you confirm if the identify geometry in the pre SP1 REST+jsapi land is using the WKT before you upgrade?

Thanks...and I am might have to use your slider....]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>77</wp:comment_id>
		<wp:comment_author><![CDATA[viswaug]]></wp:comment_author>
		<wp:comment_author_email>viswaug@yahoo.com</wp:comment_author_email>
		<wp:comment_author_url>http://</wp:comment_author_url>
		<wp:comment_author_IP>66.173.230.87</wp:comment_author_IP>
		<wp:comment_date>2008-11-18 09:26:59</wp:comment_date>
		<wp:comment_date_gmt>2008-11-18 04:26:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hi Glenn,

The identify geometry in the pre SPI REST + jsapi uses the WKID for the spatial reference and not the WKT.

Vish]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>1114360</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>78</wp:comment_id>
		<wp:comment_author><![CDATA[Ravi]]></wp:comment_author>
		<wp:comment_author_email>rnarayanan@esri.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>198.102.62.250</wp:comment_author_IP>
		<wp:comment_date>2008-11-19 01:51:52</wp:comment_date>
		<wp:comment_date_gmt>2008-11-18 20:51:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Projection ID 2913 represents NAD_1983_StatePlane_Oregon_North_FIPS_3601_Intl_Foot. 

Can you check if the coordinate system defined for the Map uses this projection? If the name of the coordinate system used is different, it is likely being treated as a custom projection and hence WKT is returned for the spatial reference of the service. To set the coordinate system of the dataframe to 2913:

1. open the map document in ArcMap
2. right click on the dataframe "Portland" and select properties 
3. click on the "Coordinate System" tab 
4. In the box to select a coordinate system, click Predefined -&gt; Projected Coordinate Systems -&gt; State Plane -&gt; NAD 83 HARN (Feet,Intl,Us) -&gt; NAD_1983_HARN_StatePlane_Oregon_North_FIPS_3601_Feet_Intl and click OK.
5. Save the map to a different name so that you preserve the old one.
6. Try serving this map (and make sure to clear the REST cache if using an existing service).

Thanks
Ravi]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>79</wp:comment_id>
		<wp:comment_author><![CDATA[Ravi]]></wp:comment_author>
		<wp:comment_author_email>rnarayanan@esri.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>198.102.62.250</wp:comment_author_IP>
		<wp:comment_date>2008-11-19 01:53:26</wp:comment_date>
		<wp:comment_date_gmt>2008-11-18 20:53:26</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Minor correction--

2913 represents: "NAD_1983_Harn_StatePlane_Oregon_North_FIPS_3601_Intl_Foot.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>80</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2008-11-19 02:17:41</wp:comment_date>
		<wp:comment_date_gmt>2008-11-18 21:17:41</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Ravi,

So, that seems to have fixed it.  The coord sys was already set to 2913 on that dataframe, so I just re-did that and it seems to have cleared it out.  The geometry on the map click event is now using WKID.

Any idea as to why?  Or, is the only answer that I am crazy?

Thanks!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>81</wp:comment_id>
		<wp:comment_author><![CDATA[Ravi]]></wp:comment_author>
		<wp:comment_author_email>rnarayanan@esri.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>198.102.62.250</wp:comment_author_IP>
		<wp:comment_date>2008-11-19 02:37:59</wp:comment_date>
		<wp:comment_date_gmt>2008-11-18 21:37:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[The name of the projection along with all the projection parameters is taken into consideration to determine if the projection is custom or standard. My guess is that the name of the projection defined in your map was different from "NAD_1983_HARN_StatePlane_Oregon_North_FIPS_3601_Feet_Intl".]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Forced to FLEX</title>
		<link>http://ruprict.net/2009/01/10/forced-to-flex/</link>
		<pubDate>Fri, 09 Jan 2009 21:01:45 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<category domain="tag"><![CDATA[Flex]]></category>

		<category domain="tag" nicename="flex"><![CDATA[Flex]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[I am on a project where we are delivering a web-based mapping application to the client.  The application has gone through every UI scenario you can imagine: <a class="zem_slink" title="Microsoft Virtual Earth" rel="homepage" href="http://www.microsoft.com/virtualearth/">Virtual Earth</a> in Sharepoint to <a class="zem_slink" title="ArcGIS Server" rel="wikipedia" href="http://en.wikipedia.org/wiki/ArcGIS_Server">ArcGIS Server</a> Web ADF to ArcGIS Server <a class="zem_slink" title="JavaScript" rel="wikipedia" href="http://en.wikipedia.org/wiki/JavaScript">Javascript</a> API to (presently) ArcGIS Server Flex API.  The Flex decision was made against my recommendations.  I don't have a lot of ammo against Flex, but I was born and raised in JavascriptTown, HTMLandia.  I have read some HTML/JS vs Flex posts and seen all kinds of opinions, and my research has led me to the one true answer to this debate:  It depends.

As with many technical decisions you meet when creating applications for the web, you need to let your context by your driver.  Trust me, I wanted to take HTML Hill and dig in for the victory-or-death battle, but the client liked a couple of Flex sites.   I mean really liked them.  So, rather than just fight the "but that doesn't look like Flash" battle constantly (even though I think we could win...let it go...let it go...) we are using Flex.

So, I am a lot like my kids eating their spinach.  They get why they have to do it, but they do it begrudgingly and with a nasty look on their faces.   And, much like the vegetable-hating youngsters, I am reaping some benefits:
<ul>
	<li><strong>Knowledge is Power.</strong> Learning a new language is always a good thing.  One of my favorite books, <a class="zem_slink" title="The Pragmatic Programmer" rel="homepage" href="http://www.pragprog.com/">The Pragmatic Programmer</a>, encourages developers to learn a new language each year.</li>
	<li><strong>Flex is a good language.</strong> Flex has been refreshingly enjoyable to write.  While I still prefer my HTML with a massive heaping of Javascript sauce, Flex (and <a class="zem_slink" title="ActionScript" rel="wikipedia" href="http://en.wikipedia.org/wiki/ActionScript">ActionScript</a>) is a great language (and a <a class="zem_slink" title="ECMAScript" rel="homepage" href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript</a> standard, like my beloved javascript).</li>
	<li><strong>Somes things are easier. </strong>Some stuff is easier in Flex/Flash.  The best example is probably cross-domain URL access.  If you want to allow a Flash object to access a URL, you put an XML file (crossdomain.xml) in the root of that site.  You can allow access to anyone, or domains, or all kinds of options.  Having struggled mightly with AJAX/REST scenarios involving the same-origin policy, this was really, really great.  Also, the UI is just easier to create.  Sexy, translucent panels and easy drag/drop capabilities come to mind.</li>
	<li><strong>Flex tries</strong>.  Flex does it's best to use some web paradigms, like <a class="zem_slink" title="Cascading Style Sheets" rel="wikipedia" href="http://en.wikipedia.org/wiki/Cascading_Style_Sheets">CSS</a> stylesheets.  Many of the style properties are specific to Flex, and I don't profess to understand even half of them, but it made me feel a bit more comfortable.</li>
</ul>
Now, from the "I told you so" vault, some of the cons:
<ul>
	<li><strong>Accessibility (duh)</strong>.  If we want this web application to be usable on multiple devices (iPhone, screen reader, etc) then we are gonna have to write a totally different interface.  I understand that even in HTML land there is some of that, but it's easier and allows for more UI code reuse.</li>
	<li><strong>Unit testing</strong>.  While there are a good number of Flex unit testing frameworks (FlexUnit, ASUnit, Fluint, FlexMonkey, and even RIATest (commercial)) they are all difficult to use in my opinion.  Now, part of this reason is because the map is a custom component and is not friendly with the Flex Automation Framework out-of-the-box.  We have struggled finding a unit testing framework that we like, but I think we're about to settle on <a href="http://code.google.com/p/fluint/" target="_blank">Fluint</a>.</li>
	<li><strong>Continuous Integration</strong>.  After unit testing, the next step is continuous integration, and I have no answer for this one yet.  Yes, I know there are things out there like Hudson, Maven, flex-maven, as well as a series of posts on CI with Flex using <a class="zem_slink" title="CruiseControl" rel="homepage" href="http://cruisecontrol.sourceforge.net">CruiseControl</a>.  I think my main issue here is my .NET bubble.  We have other services and applications under development for this client, all of which are .NET based.  We have CruiseControl.NET for these .NET based items (thanks <a href="http://www.cifactory.org/" target="_blank">CIFactory</a>!) so I have spent much of my time trying to figure out how to integrate our Flex app into that CI setup.  I think this is the wrong approach and we'll ultimately have to create a separate Flex only CI server.</li>
</ul>
The best part apart this project has been actually working with a team of developers again.  My projects before this one were cowboy-ish in nature, so I was doing all the nerd stuff.  We have some crazy-smart people where we work, and it's fun to tackle this new stuff with them.

While I still pine for my HTML/javascript/CSS/C#, writng the Flex stuff has been (and should continue to be)  a learning experience.  Speaking of learning, if anyone reading this has suggestions or approaches to unit testing or CI or anything else to a new bunch of Flex devs, please comment away.
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/965d92f9-fa26-4419-a2d2-64aeb8aa14a5/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=965d92f9-fa26-4419-a2d2-64aeb8aa14a5" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2009-01-10 02:01:45</wp:post_date>
		<wp:post_date_gmt>2009-01-09 21:01:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>forced-to-flex</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1231709001]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>90</wp:comment_id>
		<wp:comment_author><![CDATA[Jonathan Hartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>82.152.255.102</wp:comment_author_IP>
		<wp:comment_date>2009-01-10 07:46:55</wp:comment_date>
		<wp:comment_date_gmt>2009-01-10 02:46:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey Glenn.

There's clearly something I don't understand about continuous integration, because I've only ever done it in Python land, and while we have flirted with CruiseControl.NET for a while (since we're IronPython, hence .NET), in the end it had one or two wrinkles that we didn't like, so we wrote one ourselves, and it turned out to be about ten lines of code:

while True:
    check_out_source_tree()
    compile()
    run_all_tests()

And those function calls are actually just synchronously calling external command-line processes, right?

So what else does everyone else's continuous integration server do that makes it so hard?

I guess running the tests also stores the test results in a database, for perusal at our leisure, but I consider that to be part of the test runner infrastructure, not CI.

Incidentally, the cool part about our CI is that since creating it, we've now got it to distribute the running-of-the-tests across all the idle machines in the office (so it's no longer just ten lines), since our acceptance and stress tests take a long time to run otherwise.

Hugs, etc!

  JB]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>91</wp:comment_id>
		<wp:comment_author><![CDATA[jeffreyfredrick]]></wp:comment_author>
		<wp:comment_author_email>jfredrick@mac.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>64.165.220.235</wp:comment_author_IP>
		<wp:comment_date>2009-01-10 12:25:07</wp:comment_date>
		<wp:comment_date_gmt>2009-01-10 07:25:07</wp:comment_date_gmt>
		<wp:comment_content><![CDATA["we’ll ultimately have to create a separate Flex only CI server."

I'm curious on the reasons behind this and I'd love to spend some learning about the CI needs of flex developers.

The <a href="http://nextspace.us/" rel="nofollow">office space</a> I'm working in these days is filled w/various web designers but they don't have a CI background.

"if anyone reading this has suggestions or approaches to unit testing or CI or anything else to a new bunch of Flex devs"

I don't personally have experience doing this with flex but you might try asking on the <a href="http://tech.groups.yahoo.com/group/citcon/" rel="nofollow">CITCon</a> mailing list.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>4275226</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>92</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-01-10 19:06:59</wp:comment_date>
		<wp:comment_date_gmt>2009-01-10 14:06:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[@JB: Maybe there's clearly something I don't understand about CI.  You are exactly right.  The automated build and tests are simple steps.  CIFactory, while it makes deploying CI easier, also takes care of a lot of the details (setting up the service, which is CruiseControl.NET, offering the plug-in framework to extend) which is great. However, the risk of using a framework like this is that you don't know the details.  

You bring up a great point, tho.  I bet we could write a simple CI server ourselves.....maybe I'll do that.

@jeffreyfrederick:  I will certainly blog about whatever we figure out.  Thanks for the suggestion on CITCon...I'll check it out.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>93</wp:comment_id>
		<wp:comment_author><![CDATA[jeffreyfredrick]]></wp:comment_author>
		<wp:comment_author_email>jfredrick@mac.com</wp:comment_author_email>
		<wp:comment_author_url>http://the.ci-guys.com</wp:comment_author_url>
		<wp:comment_author_IP>64.165.220.235</wp:comment_author_IP>
		<wp:comment_date>2009-01-10 22:15:48</wp:comment_date>
		<wp:comment_date_gmt>2009-01-10 17:15:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[@reply.both  ;)

I've been working on CruiseControl for several years and I've heard the question "isn't it just a fancy cron" for about as long. :)

Writing a simple CI tool is simple, no question.

The obvious thing you get from using an existing tool are the publishers, the web interface, etc. The non-obvious thing you get is the benefit of <a href="http://confluence.public.thoughtworks.org/display/CC/3rdPartyCCStuff" rel="nofollow">3rd-party stuff</a> and a support network of other users who might have already solved the same problems you're trying to solve.

So my own preference is to use CC as a framework and put my own custom efforts into extending it where I need. I get the benefits of having custom control but with the benefit of not starting from scratch.

I just went through this very recently to start <a href="http://blog.jeffreyfredrick.com/2008/11/27/continuous-integration-for-iphonexcode-projects/" rel="nofollow">using CC with Xcode</a>. To make it work I only had to write a single class, the XcodeBuilder.  And that's why I was curious about the needs of a Flex developer.  I was wondering if it would just take 1-2 classes...

But in the end the important thing isn't how you're doing CI, just that you're doing CI.  :)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>4275226</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>94</wp:comment_id>
		<wp:comment_author><![CDATA[quetwo]]></wp:comment_author>
		<wp:comment_author_email>quetwo@hostingplace.net</wp:comment_author_email>
		<wp:comment_author_url>http://</wp:comment_author_url>
		<wp:comment_author_IP>173.10.39.57</wp:comment_author_IP>
		<wp:comment_date>2009-01-12 01:57:27</wp:comment_date>
		<wp:comment_date_gmt>2009-01-11 20:57:27</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[You mentioned accessability as a con of Flex, and I'm wondering why.  As long as you do your programming correctly (and want to target devices like screenreaders), accessability is much more accurate and easier to implement than with most AJAX frameworks.  Check out this video : http://link.brightcove.com/services/link/bcpid1733261879/bclid1729365228/bctid1738801382?src=mrss

Now, as far as usability of your application on other devices, you that is a sticky subject.  Even in AJAX, device support is all over the place, and not everything supports full JavaScript (or in this case, the Flash Player).  Depending on how you write your app, you /can/ target Flash Lite in addition to the Flash Player, but that is not easy, and won't win you the iPhone.  If you are keeping your business logic on the server (which you should), you can make a version optimized for the iPhone, and even one optimized for WAP devices.  Remember, the Flex Framework is just the UI, so it shuold be interchangeable with other versions on the fly depending on the end user and device.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>2279642</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>95</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-01-12 07:05:20</wp:comment_date>
		<wp:comment_date_gmt>2009-01-12 02:05:20</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[@jf: You're probably right.  Once the Flex SDK is installed, it should be easy enough to write a NAnt task (there are already Ant tasks for Flex) to do some simple CI (build, run tests, etc) and grow it from there.

@quetwo:  Truth be told, the accessibility dig was thrown in b/c of things I've read about Flash over the years.  Accessibility has always been something the anti-Flash crowd (which I was briefly a part of) has used to push their case.  I'll watch that video and I bet I learn that I was wrong.  Thanks for the link.  The iPhone issue is a personal one for me, since I carry one.  It's not Adobe's issue, tho, it's Apple's.   Using an MVC type approach (which we do) changing out front-ends should be a non issue.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>97</wp:comment_id>
		<wp:comment_author><![CDATA[Jonathan Hartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>78.86.125.186</wp:comment_author_IP>
		<wp:comment_date>2009-01-14 19:32:58</wp:comment_date>
		<wp:comment_date_gmt>2009-01-14 14:32:58</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[&gt;&gt; 3rd-party stuff and a support network of other users who might have already solved the same problems you’re trying to solve.

That seems very reasonable and relevant, thanks for bringing the idea to my attention.

Also, the webservice: is that for publishing results to they can be viewed? We have that attached to our test runner, so that all builds (not just CI) can be viewed and analysed after the fact. Or have I got the wrong end of the stick again?

Thanks for the post, and your others, I really like 'em.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>98</wp:comment_id>
		<wp:comment_author><![CDATA[tartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>82.152.214.178</wp:comment_author_IP>
		<wp:comment_date>2009-01-15 13:46:30</wp:comment_date>
		<wp:comment_date_gmt>2009-01-15 08:46:30</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I don't know if this is helpful or not, but by co-incidence, a new pico-CI script was announced today:

http://morethanseven.net/2009/01/14/localbuilder-github/

It's nothing more than a 'watch a directory for changes and then execute a command of your choice' script (in Python), but I thought I'd mention it just in case.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>898350</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>.NET Migrations</title>
		<link>http://ruprict.net/2009/01/19/net-migrations/</link>
		<pubDate>Mon, 19 Jan 2009 14:23:55 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[.NET Framework]]></category>

		<category domain="tag" nicename="net-framework"><![CDATA[.NET Framework]]></category>

		<category><![CDATA[Agile]]></category>

		<category domain="category" nicename="agile"><![CDATA[Agile]]></category>

		<category domain="tag"><![CDATA[Agile]]></category>

		<category domain="tag" nicename="agile"><![CDATA[Agile]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[InfoQ just blogged on a couple of .NET Migrations third-party libraries, which is something I've often wished the .NET world had.

<a href="http://www.infoq.com/news/2009/01/migrations_dotnet">.NET Migrations</a>

The tutorial linked at the end of that article is a goodie.

Check it out in your spare time.  There's a big prize (read: kudos from me) for the first developer  to make this work with GDB modelling...

Not quite as smooth as Rails migrations, but great anyhow.
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/aafa647e-90e0-4cfb-a712-d06c107b79bb/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=aafa647e-90e0-4cfb-a712-d06c107b79bb" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date>2009-01-19 19:23:55</wp:post_date>
		<wp:post_date_gmt>2009-01-19 14:23:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>net-migrations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1232375042]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>99</wp:comment_id>
		<wp:comment_author><![CDATA[viswaug]]></wp:comment_author>
		<wp:comment_author_email>viswaug@yahoo.com</wp:comment_author_email>
		<wp:comment_author_url>http://</wp:comment_author_url>
		<wp:comment_author_IP>74.93.117.17</wp:comment_author_IP>
		<wp:comment_date>2009-01-20 02:47:23</wp:comment_date>
		<wp:comment_date_gmt>2009-01-19 21:47:23</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey Glenn,

I actually don't like the concept of the migrations for the following reasons

1) I have to do the work twice. Create the tables in the DB and then take the time to create these migrations and keep them updated.

2) Another thing to maintain. There are bound to be oversights here where the DB gets changed but the migrations are not.

3) Databases have more complex things like SPs, table valued functions, indexes etc which may not always be expressed in migrations

I know I might be going against the popular migrations thing but thats my take on it.

Here is what I would suggest... Use a tool like SQLCompare that will script out your DB to a script file and include that script file in your SVN. Use a Nant taskk to make it a part your build process.

W.R.T Geodatabases, here is an idea I have been wanting to prototype for a while by creating a Nant task for it... Write an utility to export your GDB schema to a XML workspace document (pretty easy to do) ans stash that XML file into your SVN so that you can revert back to that version if needed. A Nant task can be written for it to make it a part of the automated build process.

Do I get a gift for that idea??? 

Thank You,
Vish]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>1114360</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>100</wp:comment_id>
		<wp:comment_author><![CDATA[Ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-01-20 04:01:57</wp:comment_date>
		<wp:comment_date_gmt>2009-01-19 23:01:57</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Vish!

How are ya?  

1) Well, you *might* have to do *some* of the work twice.   The migration will create tables, columns, foreign keys, etc.  Most of the basic stuff (I am talking Rails migrations, which I haven't looked at in a while)  The SPs and other programmable objects is where DRY starts to get wet.

2) True, but if you are SVNing your DDL, isn't this always gonna be true?

3) See 1.

I like your idea....make it so.  Oh, and is there any more beautiful gift than my undying admiration?  Consider that your gift....]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>101</wp:comment_id>
		<wp:comment_author><![CDATA[viswaug]]></wp:comment_author>
		<wp:comment_author_email>viswaug@yahoo.com</wp:comment_author_email>
		<wp:comment_author_url>http://</wp:comment_author_url>
		<wp:comment_author_IP>66.173.230.87</wp:comment_author_IP>
		<wp:comment_date>2009-01-20 07:00:02</wp:comment_date>
		<wp:comment_date_gmt>2009-01-20 02:00:02</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey Glenn,

2 - I can automate the scripting of the DBs by running the SQLCompare tool against the DB and I don't have to write and maintain it manually. Nant tasks already exist to call executables with parameters. I am bound to mess up if I do it manually ... 

Thank You,
Vish]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>1114360</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>102</wp:comment_id>
		<wp:comment_author><![CDATA[Willie]]></wp:comment_author>
		<wp:comment_author_email>willie_tilton@yahoo.com</wp:comment_author_email>
		<wp:comment_author_url>http://blechie.com/wtilton</wp:comment_author_url>
		<wp:comment_author_IP>138.163.106.72</wp:comment_author_IP>
		<wp:comment_date>2009-01-21 04:05:48</wp:comment_date>
		<wp:comment_date_gmt>2009-01-20 23:05:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I believe the subsonic project has migrations in it.  I believe it will just help with simple adding and removing tables/columns and what not, but it is open source so could be expanded.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Restart ArcGIS Server Object Manager Remotely</title>
		<link>http://ruprict.net/2009/01/30/restart-arcgis-server-object-manager-remotely/</link>
		<pubDate>Fri, 30 Jan 2009 15:14:41 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[powershell]]></category>

		<category domain="tag" nicename="powershell"><![CDATA[powershell]]></category>

		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=115</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to post this because I think it's cool and showcases the very tip of Windows Powershell.  Plus, I got tired of keeping an RD session open the the GIS Server for when I wanted to restart AGS.

If you haven't discovered <a href="http://www.microsoft.com/windowsserver2003/technologies/management/powershell/default.mspx">Windows Powershell</a>, you should.  It is the command line Windows needs.  I know very little about it, meaning:
<ul>
	<li>You can use .NET to write 'cmdlets', which are scripts.</li>
	<li>You can browse more than just files.  For example, you can cd into the registry.  I thought this was surreal.</li>
	<li>You can easily access other boxes.</li>
	<li>Tons more</li>
</ul>
Anyway, go download powershell (from the above link) if you don't have it and open up a PS prompt.  This assumes that you are on your dev box and AGS is on a remote server. Type:
<pre style="overflow:auto;font-size:small;">Get-WmiObject -computer agsServerName Win32_Service -Filter "Name='ArcServerObjectManager'" | Restart-Service</pre>
Replace 'agsServerName' with your AGS Server name.  BOOM.  Service restarts.  Oh, and it'll work for any service on the box, just change the service name in the Filter expression.

I have been lightly using Powershell for a long time, but really need to do more with it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date>2009-01-30 20:14:41</wp:post_date>
		<wp:post_date_gmt>2009-01-30 15:14:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>restart-arcgis-server-object-manager-remotely</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1252698103]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Hyper-V Desktop</title>
		<link>http://ruprict.net/2009/01/31/going-hyper/hypervdesktop/</link>
		<pubDate>Sat, 31 Jan 2009 13:22:47 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/01/hypervdesktop.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[The bare Hyper-V Server desktop]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2009-01-31 18:22:47</wp:post_date>
		<wp:post_date_gmt>2009-01-31 13:22:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hypervdesktop</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>120</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/01/hypervdesktop.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/01/hypervdesktop.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"901";s:6:"height";s:3:"628";s:14:"hwstring_small";s:23:"height='89' width='128'";s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/01/hypervdesktop.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Hyper-V Manager</title>
		<link>http://ruprict.net/2009/01/31/going-hyper/hypervmanager/</link>
		<pubDate>Sat, 31 Jan 2009 13:49:08 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/01/hypervmanager.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Hyper-V Manager with Hyper-V Server added.]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2009-01-31 18:49:08</wp:post_date>
		<wp:post_date_gmt>2009-01-31 13:49:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hypervmanager</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>120</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/01/hypervmanager.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/01/hypervmanager.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"905";s:6:"height";s:3:"492";s:14:"hwstring_small";s:23:"height='69' width='128'";s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/01/hypervmanager.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Going Hyper</title>
		<link>http://ruprict.net/2009/01/31/going-hyper/</link>
		<pubDate>Sat, 31 Jan 2009 13:58:41 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Hyper-V]]></category>

		<category domain="tag" nicename="hyper-v"><![CDATA[Hyper-V]]></category>

		<category><![CDATA[OS]]></category>

		<category domain="category" nicename="os"><![CDATA[OS]]></category>

		<category><![CDATA[Recommendations]]></category>

		<category domain="category" nicename="recommendations"><![CDATA[Recommendations]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[I built myself a new server last weekend, as the old one (a Dell 620 that was shipped in 2001!) finally kicked the bucket.   With much help from <a href="http://blog.geodatabase.com/" target="_blank">Horsey</a>, I pieced together a dual-core monster with 8GB of RAM and a saucy new case.  Horse suggested I look into a bare metal hypervisor OS, like <a href="http://www.vmware.com/products/esxi/" target="_blank">ESXi</a>, which I thought was a smashing idea.  I have been doing much of my work in VMs these days, and probably am in the same place as <a href="http://codebetter.com/blogs/kyle.baley/archive/2009/01/30/getting-used-to-working-with-vms.aspx" target="_blank">Kyle</a>.  However, I was finding out that once I was in the land of VMs, I always wanted more.  There'd be some reason why I needed another VM environment, but having that many being served up by the lappy was slowing...things...down.  My laptop is running <a href="http://www.win2008workstation.com" target="_blank">Windows Server 2008</a>, after I got sick of Vista, a move I highly recommend.  (Incidentally, if you do move to WS2008, <a href="http://social.technet.microsoft.com/Forums/en-US/winserverManagement/thread/0b0d0f2c-3a1b-4959-a557-b44d1612b6bb/" target="_blank">remove </a>the "Windows System Resource Manager" Feature.  The wmiprvse.exe process was kiling me)

So, I tried ESXi, but my boot drive was an 80GB SATA drive, and the installation process could not find it.  Actually, it couldn't even find the controller.  I found all kinds of tricks to try to get it to work, but no dice.  So, Horse suggested <a href="http://www.xenserver5.com/" target="_blank">XenCenter</a> , but before  I had a chance to look at it, I found<a href="http://www.microsoft.com/servers/hyper-v-server/default.mspx" target="_blank"> Microsoft Hyper-V Server</a>.  It's MS's answer to the bare-metal hypervisor.  No GUI, no server roles, just a bare install that serves up VMs via Hyper-V.  I have been liking Hyper-V on the workstation, so this was intriguing.

After downloading the iso and creating the image, the install was crazy easy.  It asks very few questions, reboots, and it's done.  You get screen that looks like this:

[caption id="attachment_121" align="alignleft" width="128" caption="The bare Hyper-V Server desktop"]<a href="http://ruprict.files.wordpress.com/2009/01/hypervdesktop.png"><img class="size-thumbnail wp-image-121" title="Hyper-V Desktop" src="http://ruprict.files.wordpress.com/2009/01/hypervdesktop.png?w=128" alt="The bare Hyper-V Server desktop" width="128" height="89" /></a>[/caption]

As you can see, there isn't much to it.  You can set up a network connection, download updates, and set local administrators.  You can also enable/disable remote desktop.  All pretty basic stuff.  The <a href="http://go.microsoft.com/fwlink/?LinkId=129493" target="_blank">installation guide </a>itself is a bare Word doc, and the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=E1E111C9-FA69-4B4D-8963-1DD87804C04F" target="_blank">configuration guide</a> isn't much larger, which I consider good things, as bulky documents are not indicative of anything more than wordy technical writers.

I should point that I am not a hypervisor or OS guru, by any measure.  I know enough about Windows OS to get what I need done, and I use people like Horse as my external hard drive for the more rare and difficult needs.  The fact that I set up this hypervisor means that any organism with opposable thumbs could easily do so as well.

The singular issue I had setting up the OS was seeing it from other machines.  I work out of my house and VPN into home base.  This means, that, in order to put one of my boxes on the domain, I have to VPN in first.  I tried to figure out how to do this briefly for the hypervisor, but gave up as it's not all that important that it is on the domain.  However, this caused me grief when trying to see the box from my laptop on my home network.  After much trial and error, I finally had to put the server in the lappy's host file and the lappy in the server's host file, as well as basically disable the fire wall on the server.  I don't think I'd have had near the issues if the hypervisor had been on the domain.  If you are on a domain and having issues, start with <a href="http://code.msdn.microsoft.com/HVRemote" target="_blank">HVRemote</a>, as it seems to solve many others' issues.

Once you can see the server from your laptop (or other boxes), you can use the Hyper-V management tool to create and start VMs.  This is where I think Hyper-V Server really sells itself.  I am already familiar with Hyper-V, so adding another server node was easy.  Here's what it looks like:

[caption id="attachment_123" align="alignleft" width="128" caption="Hyper-V Manager with Hyper-V Server added."]<a href="http://ruprict.files.wordpress.com/2009/01/hypervmanager.png"><img class="size-thumbnail wp-image-123" title="Hyper-V Manager" src="http://ruprict.files.wordpress.com/2009/01/hypervmanager.png?w=128" alt="Hyper-V Manager with Hyper-V Server added." width="128" height="69" /></a>[/caption]

So, you can see the server and my laptop in the manager window.  Really nice.  Plus, since I went with Hyper-V, I was able to copy one of my Virtual Hard Drives (vhd) from a lappy VM to the server and create a new VM on the server from it.  In other words, moving VMs to the server is WAY easy.  Creating new VMs is also a snap.  The Hyper-V New Virtual Machine Wizard allows you to create a new vhd or select an existing one.  If you create a new vhd, the installation options consist of  waiting til later, using a CD/DVD, or using an .iso image file.  I did the later, and it was great.  I just keep iso files on the hypervisor, and point to them as needed.  Very nice.

I've been working for roughly a week now using the VMs on the hypervisor only, and it has been great.  The laptop is faster, the VMs are much faster, and I am getting more stuff done.  All in all, I think Hyper-V Server is a great solution for developers that want to server up VMs in a easy and fast manner.
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/57b124ff-ea1b-4448-bb3b-75c3157b62d2/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=57b124ff-ea1b-4448-bb3b-75c3157b62d2" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2009-01-31 18:58:41</wp:post_date>
		<wp:post_date_gmt>2009-01-31 13:58:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>going-hyper</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1233860164]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>106</wp:comment_id>
		<wp:comment_author><![CDATA[Alex Henderson]]></wp:comment_author>
		<wp:comment_author_email>bittercoder@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://blog.bittercoder.com/</wp:comment_author_url>
		<wp:comment_author_IP>121.98.192.11</wp:comment_author_IP>
		<wp:comment_date>2009-02-02 15:40:54</wp:comment_date>
		<wp:comment_date_gmt>2009-02-02 10:40:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Glad to hear it's working well for you! I had no end of trouble with HyperV myself last year (http://blog.bittercoder.com/CategoryView,category,hyper-v.aspx) - my old build server (vmware server v1 on crappy hardware) when moved across to HyperV was about 10 times slower with hardware acceleration etc. enabled, i.e. builds were taking in excess of 30 minutes to complete, and that was after expanding the vm's memory for 512mb to 4gig.

It was a weird issue that a few others experienced, and I never found a fix so I ended up moving over to vmware server v2 instead - oddly the machine itself was virtually Idle, it just seemed like hyper-v wouldn't use all the available computing resources at hand.

At any rate I'll probably swap over to using ESXi once I grab a suitable dual port intel network card, and just host the disks on my openfiler box using iSCSI.

I'd be interested to know if you see any performance difference between HyperV and other virtual machine technologies you may have tried...]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>107</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-02-02 19:30:19</wp:comment_date>
		<wp:comment_date_gmt>2009-02-02 14:30:19</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I was using VMWare on the Dell 620, but it's hardly a fair comparison b/c that box was a dinosaur.  I keep waiting for something bad to happen with this new setup....hopefully it won't.  

If it does...I'll likely ping you for vmware server tips....]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>ESRI Developer Summit Impressions</title>
		<link>http://ruprict.net/2009/03/27/esri-developer-summit-impressions/</link>
		<pubDate>Fri, 27 Mar 2009 04:17:37 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ESRI]]></category>

		<category domain="tag" nicename="esri"><![CDATA[ESRI]]></category>

		<category domain="tag"><![CDATA[Flex]]></category>

		<category domain="tag" nicename="flex"><![CDATA[Flex]]></category>

		<category domain="tag"><![CDATA[REST]]></category>

		<category domain="tag" nicename="rest"><![CDATA[REST]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[I am returning to Charlotte in the morning after a nerd-vigorating week in Palm Springs at the <a href="http://www.esri.com/events/devsummit/index.html" target="_blank">ESRI Developers Summit</a>.  If you didn't get a chance to go, don't fret as ESRI is posting all of the sessions and code from the week.  Overall, I'll have to say that this was a great event and the best developers summit yet.   Seeing all of our GIS nerd peers from around the world is often interesting and always informative.

The plenary session highlighted much of what is coming in 9.3.1 and 9.4, not the least of which was <span class="zem_slink">ArcExplorer</span> 900.  It's been Office 2007-ized (ribbon, etc) and is a world away from the previous versions of AGX.  The coolest feature is a Presentation Mode that allows you to create "slides" that include maps and graphics and other things that will likely make it my presentation tool of choice.  It starts an open beta (I think) on April 6th, so get in on it and see what I am talking about.

The <span class="zem_slink">ArcGIS</span> Online sharing options that are coming in 9.3.1 are interesting as well.  Fueled by the introduction of "layer packages" which allow you to package data and symbology together.  This data can be uploaded to ArcGIS Online and shared with your friends or the whole planet.  Picture clicking on a hyperlink and having <span class="zem_slink">ArcMap</span> open and data being added to the map document.  It was pretty sassy.    ArcGIS Online also has a ton more basemaps, with Virtual Earth basemaps on the way.

Other tidbits:
<ul>
	<li>9.4 and RESTful editing with ArcGIS Server.  I think that will change the game completely, making ArcMap the tool of the serious cartographer while allowing the data owners to change the data.</li>
	<li>Also, 9.4 comes with major changes to the GDB Schema by reducing the number of tables from 35 to FOUR (that's right, FOUR).</li>
	<li>The ArcGIS Server Silverlight API was probably the queen of the ball, with much of the Twittersphere fawning over it.</li>
</ul>
I went a bit against the grain, forgoing the Silverlight sessions for the Flex sessions.  The Flex sessions were really good, showing how to cluster point data, create custom tool tips for features,  perform thematic mapping. and create geodetically correct circles.   The next version of the api (1.2) will add routing support as it's being added to the REST api.   I asked about adding automation support to the Flex controls, and was told they are "looking into it"  I hope so.  We are doing more and more with Flex and I plan to harvest more goodies from the summit code samples.

New this year at the summit they added user presentaions, and I attended quite a few:
<ul>
	<li>Dave Bouwman did a presentaion on User Testing 101.  Dave's presentations are always good, and this is a topic that was dear to my heart.</li>
	<li>Brian Noyle did a bit on ASP.NET MVC, which was so packed that I could only admire it from afar.</li>
	<li>Chris Spagnuolo on Introduction to Agile Development was incredible.  I am going to try and get everyone at my company to watch this presentation.</li>
	<li>Vish Uma on Harnessing Server Object Extensions was highly informative.  I think Vish may be the smartest guy I know.</li>
</ul>
I think my surprise session of the week was OGC Capacities of ArcGIS Server.  AGS has always has WMS, WFS, and (later) WCS support and I have never really paid much attention to them.   Our latest project has some OGC needs, so I decided to attend this session, and I am so glad I did.  Right now, at 9.3, AGS supports WFS Transactions (WFS-T) which is a standard I first heard about in that session.  In a nutshell, this means you can perform edits (insert, update, delete) of GDB features RIGHT NOW.  I had no idea this was possible.   Also, custom styling of features with SLDs means you can easily define multiple styles for your features.  In fact, 9.3.1 or 9.4 will add the ability to to on-the-fly styling using "SLD BODY" (another thing I just learned about)  which is something that we need as well.  I feel like the OGC stuff is the best kept secret of AGS.

Anotehr new item this year was the presence of Twitter.  The #devsummit hashtag was tweet-heavy and, for the first time, Twitter became a very, very useful part of my conference life.  This is where the idea of Twitter really shines and I can finally say that I get it.

So, head on over the the ESRI Developer Summit site, start watching presentations, and downloading code.  Oh, and get on the Twittersphere if you aren't (I am @ruprictGeek, if you wanna follow....)
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Zemified by Zemanta" href="http://reblog.zemanta.com/zemified/0b2ae9ef-fcdc-4e29-aa08-a0a0179695a7/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=0b2ae9ef-fcdc-4e29-aa08-a0a0179695a7" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2009-03-27 09:17:37</wp:post_date>
		<wp:post_date_gmt>2009-03-27 04:17:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>esri-developer-summit-impressions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1238155756]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>115</wp:comment_id>
		<wp:comment_author><![CDATA[Jonathan Hartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>208.54.7.158</wp:comment_author_IP>
		<wp:comment_date>2009-03-28 09:04:35</wp:comment_date>
		<wp:comment_date_gmt>2009-03-28 04:04:35</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[All sounds very cool Glenn. Glad to hear there's lots of cool stuff going on over there!

Twitter is similarly instrumental here at PyCon this week - allowing highlights (and humour) from talks, informal discussions and overheard snippets to ricochet around the whole conference, providing a distributed stream of conciousness that has enlivened and illuminated every event.

Especially the moment when my friend dropped the mofo bomb on all of #pycon. Oh dear.

Interesting to see the Twitter trend services (like twendy, for example) that simply issue tweets containing the most popular twittered terms in the world each hour. So just by listening to '#pycon' tweets, you also automatically see the ones from twendy (or whatever) enumerating that as the fourth most popular Twitter term this afternoon. I haven't seen that before. Neat how it just works without having to subscribe to anything, or anyone having to write a single extra line of code.

Big buzzes at PyCon today: Google are forking the Python interpreter, aim to have a new version ("unladen swallow") that's 5x faster by Q4 2009. They have already deployed a 15% improved one onto YouTube!

The crazy East Europeans who wrote PyPy (a Python interpreter implemented in Python) are on their their FIFTH attempt at add optimised JIT dynamic runtime compilation to it, and this time they reckon they've nailed it, yielding 20x better performance than standard Python, for certain carefully chosen tiny Python programs. (for other programs it doesn't do anything at all yet.)

Schemaless databases For The Win! Everyone, it seems, is doing it.

Sorry, I'm getting carried away, aren't I? This has nothing to do with your blog post.

Off now to make rendezvous on the internal 10th floor balcony, to test how paper airplanes fare in this hotel's cavernous lobby.

    J]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>cruisedashboard</title>
		<link>http://ruprict.net/2009/04/16/cruise-the-next-ci-framework/cruisedashboard/</link>
		<pubDate>Wed, 15 Apr 2009 21:06:13 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/04/cruisedashboard.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Cruise Dashboard]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date>2009-04-16 02:06:13</wp:post_date>
		<wp:post_date_gmt>2009-04-15 21:06:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cruisedashboard</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>136</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/04/cruisedashboard.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/04/cruisedashboard.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1856";s:6:"height";s:3:"389";s:14:"hwstring_small";s:23:"height='26' width='128'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/04/cruisedashboard.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>cruisepipelineactivity</title>
		<link>http://ruprict.net/2009/04/16/cruise-the-next-ci-framework/cruisepipelineactivity/</link>
		<pubDate>Wed, 15 Apr 2009 21:07:05 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/04/cruisepipelineactivity.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Cruise Pipeline Activity]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2009-04-16 02:07:05</wp:post_date>
		<wp:post_date_gmt>2009-04-15 21:07:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cruisepipelineactivity</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>136</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/04/cruisepipelineactivity.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/04/cruisepipelineactivity.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1856";s:6:"height";s:3:"946";s:14:"hwstring_small";s:23:"height='65' width='128'";s:4:"file";s:97:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/04/cruisepipelineactivity.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Cruise: The Next CI Framework?</title>
		<link>http://ruprict.net/2009/04/16/cruise-the-next-ci-framework/</link>
		<pubDate>Wed, 15 Apr 2009 21:20:07 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Continuous Integration]]></category>

		<category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>

		<category domain="tag"><![CDATA[Continuous Integration]]></category>

		<category domain="tag" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[I've been looking at <a href="http://www.thoughtworks.com/cruise">Cruise</a>, which is a <a class="zem_slink" title="Continuous integration" rel="wikipedia" href="http://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a> framework from <a href="http://www.thoughtworks.com">ThoughtWorks</a> recently.  I have belly-ached in past posts about a need to get CI running for our <a class="zem_slink" title="Adobe Flex" rel="homepage" href="http://www.adobe.com/go/flex/">Flex</a> projects, an undone task that slaps me around daily, reminding me of my folly and hypocrisy.  The issue with Flex and CI is that it seems to be relatively new ground.    Sure, some folks are doing it (almost all using Hudson) but there aren't a lot of them.  And they are all java people so they are comfy-cozy in the Hudson-<a class="zem_slink" title="Apache Maven" rel="homepage" href="http://maven.apache.org">Maven</a>-jar land.    I am a measly .NET person that pulls my knees to my chest and hides my face from their nerdy superiority.
I read a couple of posts on Cruise, and decided to give it a go.    It is free for a two-agent (more on agents in a bit) install.  I've no idea what the cost is after that, but I've asked TW.    Cruise consist of 2 or more parts.  Part one is a server.  It's a one-click install (I am using Windows) and it creates a service called Cruise Server. Parts two or more are agents, also a one-click install, and also creates a service called Cruise Agent.    The idea behind agents is to create a "build grid", using agents to distribute the load of building and testing your code.    You can make an agent out of any box (Win, Mac, Linux) which also allows testing of the code in different environments.    Scalability and multiple environments puts Cruise ahead of any CI framework I've used (CC.NET is the only one).   Very cool.

Cruise's over-arching approach to CI is the pipeline.  You create a pipeline, which seems to often be an atomic project.    A pipeline has one or more stages, which are things like Build, Test, Deploy to UA, etc.  To be clear, the stages are defined by you, so there isn't a finite list of what the stages can be.    In essence, a stage is a container of one or more jobs.  Jobs are where the rubber hits the road.    A job is a discrete bit of execution.  A job can use one of ant, nant, rake, or exec, so anything with a command line interface, basically.  Therein lies the simplicity of Cruise.  It allows the build and test tools to handle the building and testing,  while it handles the scaling and pipeline.
One of the items provided by Cruise Server is a dashboard, which is very simple (see screen shot).

[caption id="attachment_137" align="alignleft" width="128" caption="Cruise Dashboard"]<a href="http://ruprict.files.wordpress.com/2009/04/cruisedashboard.png"><img class="size-thumbnail wp-image-137" title="cruisedashboard" src="http://ruprict.files.wordpress.com/2009/04/cruisedashboard.png?w=128" alt="Cruise Dashboard" width="128" height="26" /></a>[/caption]

As you might expect, you can start a pipeline, or a stage of a pipeline.   You can look at the current activity or administer your CI server.  The administration of Cruise is based on a simple XML schema ( I know, I know, XML...but it's not "bad" XML)  The initial setup of an item (pipeline, stage, job, agent, etc) can be point-and-click driven, but any changes after that are editing the XML.  You can do it right in place and Cruise picks up the changes on-the-fly.   In my testing I made a pipeline that had a Test stage feeding into a Build stage.  I wanted to switch them around, so I just cut the XML element and pasted it back into the pipeline where I wanted it to run, and it was done.  Very easy.  I like easy.

Creating a pipeline requires two pieces of infomation: The type of builder (ant, nant, rake, exec) and the location and type of your source control.    It supports Git, Mercurial, Perforce, and Subversion out of the box.  With your pipeline created, you can add stages using
<pre>&lt;stage name="Build"&gt;&lt;/stage&gt;</pre>
"Build" above is the name I chose, so it coudl be anything.  Then you add jobs to the stage in a similar manner.  For an ant builder, you would specify the build file and target.    Also, jobs can have artifacts, so if you have a task that generates documentation, Cruise will upload it to the server.  A better example might be unit test reports that are generated by your testing framework.  Just tell Cruise where they are,  and it will upload them to the server.  You can, in fact, create a tab on the job output that will show the test reports (it's an iframe, nothing fancy) with very little configuration.

You can look at a pipeline in a couple of different ways, the coolest is the "Pipeline Activity".

[caption id="attachment_138" align="alignleft" width="128" caption="Cruise Pipeline Activity"]<a href="http://ruprict.files.wordpress.com/2009/04/cruisepipelineactivity.png"><img class="size-thumbnail wp-image-138" title="cruisepipelineactivity" src="http://ruprict.files.wordpress.com/2009/04/cruisepipelineactivity.png?w=128" alt="Cruise Pipeline Activity" width="128" height="65" /></a>[/caption]

You can visit or rerun any of the past stages my clicking on them.  Also, you can define manual transitions, which you would kick off from this interface.  An example of when you might want a manual transition is a deployment to UAT, which you wouldn't do on every build (would you?)

In my initial testing, I wanted to get a Flex build going in Cruise with automated tests using <a href="http://code.google.com/p/fluint:">Fluint</a>.  The lion share of the work was defining the ant script.   Flex and Fluint have ant tasks already, so building the ant script was relatively simple.  I defined a stage called "Build" with a ant buld job and a stage called "Test" with a single artifact (my test report) and ant build job.  This gave me a functioning CI Server that builds on each check in to SVN and runs all the Fluint tests, then uploads the test reports so I can see them on the build output.  Here is the XML for that:
<pre style="background:#ccc;border:dotted thin black;overflow:auto;">&lt;pipeline name="FlexBuildTest"&gt;
  &lt;materials&gt;
    &lt;svn url="http://svnserver/svn/svnRepo1/trunk" username="svnuser" password="svnpwed" /&gt;
  &lt;/materials&gt;
  &lt;stage name="Build"&gt;
    &lt;jobs&gt;
      &lt;job name="AntBuild"&gt;
        &lt;tasks&gt;
          &lt;ant buildfile="build.xml" /&gt;
        &lt;/tasks&gt;
      &lt;/job&gt;
    &lt;/jobs&gt;
  &lt;/stage&gt;
  &lt;stage name="Test"&gt;
    &lt;jobs&gt;
      &lt;job name="AntTestBuild"&gt;
        &lt;artifacts&gt;
          &lt;test src="deploy/reports" dest="test-reports" /&gt;
        &lt;/artifacts&gt;
        &lt;tasks&gt;
          &lt;ant buildfile="build.xml" target="test" /&gt;
        &lt;/tasks&gt;
      &lt;/job&gt;
    &lt;/jobs&gt;
  &lt;/stage&gt;
&lt;/pipeline&gt;</pre>
<div>I am pretty impressed so far.  We are just about to set up our build environment for a new project, and I plan on using Cruise.  We can use it for our Flex and .NET stuff, which is a bonus.  It's simple to setup and maintain.  I'll try to come back and blog about any other issues/cool things we find.</div>
<div>Meanwhile, head over to ThoughtWorks and check it out.  They have regularly scheduled webcasts to demo Cruise (I saw one today) so you can get a better idea of how Cruise functions.</div>
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Reblog this post [with Zemanta]" href="http://reblog.zemanta.com/zemified/e66f2a8d-de6f-4d4e-9e1a-78cfaa47723f/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=e66f2a8d-de6f-4d4e-9e1a-78cfaa47723f" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2009-04-16 02:20:07</wp:post_date>
		<wp:post_date_gmt>2009-04-15 21:20:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cruise-the-next-ci-framework</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1239830413]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>287</wp:comment_id>
		<wp:comment_author><![CDATA[Nav4Nav]]></wp:comment_author>
		<wp:comment_author_email>nlohchab@aim.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>216.16.236.14</wp:comment_author_IP>
		<wp:comment_date>2010-12-06 22:09:27</wp:comment_date>
		<wp:comment_date_gmt>2010-12-06 17:09:27</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Modification check failed for material: svn://dev/**/trunk
Error happens when Executing: svn log --non-interactive --xml -v --limit 1 svn://dev/***/trunk Make sure this command can execute manually.
? 
Did't get this error
Does Cruise support tortoise svn?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>185</wp:comment_id>
		<wp:comment_author><![CDATA[Piotr]]></wp:comment_author>
		<wp:comment_author_email>piotr.penar@occam-dm.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>87.102.97.227</wp:comment_author_IP>
		<wp:comment_date>2009-10-08 15:43:57</wp:comment_date>
		<wp:comment_date_gmt>2009-10-08 10:43:57</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Do you know any way to limit svn checouts in cruise for one pipeline? 
I mean when I have stage build and test it is doing svn checkout twice!
Where it should be done only at 1st stage. 

Good Blog anyway.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>186</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-10-09 18:26:08</wp:comment_date>
		<wp:comment_date_gmt>2009-10-09 13:26:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[We actually moved to Hudson once we found out the cost for Cruise (can't remember what it was, but it was a LOT) so I am little help here.  However, the behavior you describe is odd.  Cruise should check svn at the beginning of a pipeline and then not again during the stages of that pipeline.

Have you sent the question to Thoughtworks?  I have found them very responsive.  http://studios.thoughtworks.com/contact-us

Sorry I am not much help.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>288</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2010-12-07 06:06:09</wp:comment_date>
		<wp:comment_date_gmt>2010-12-07 01:06:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I don't think TortoiseSVN installs the svn command line client.  You have to install that manually.  I usually use the Collabnet download here: http://www.collab.net/downloads/subversion/ NOTE:  The command line client is the third in the list of downloads.

Try that and see if it helps.

Glenn]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>287</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>ArcGIS Server: &quot;Cannot authenticate supplied identity&quot; Error</title>
		<link>http://ruprict.net/2009/05/06/arcgis-server-cannot-authenticate-supplied-identity-error/</link>
		<pubDate>Wed, 06 May 2009 17:25:50 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ArcGISServer]]></category>

		<category domain="tag" nicename="arcgisserver"><![CDATA[ArcGISServer]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=144</guid>
		<description></description>
		<content:encoded><![CDATA[So, I get this error from time to time in a dev environment or, occasionally, on a client's server.  It used to be very, very frustrating to solve, so I created a checklist of things that worked.  I am writing it here to help others, hopefully, and make sure I never forget these steps.  I always try them in the following order.
<ol>
	<li>Make sure the ArcGISWebServices account password has not expired.  If you are comfortable with it, set this password to never expire.  This, more often than not, is the root cause of the issue.</li>
	<li>We have seen an issue where having the I_USR account in the "Guests" group on the box caused this error.  Not sure why, but the SA couldn't tell me why that user was in that group either.Add ArcGISWebServices user to the Power Users group and restart the WWW service.  Again, this may be out of your security comfort zone.  If it is the problem, then you'll need to mess with the privileges of that account until you find the issue.  Also, I've seen this not work until I deleted the user, reran the Post Install and THEN added them to the group.</li>
	<li>If it's still an issue, time to get nasty.  Delete your ArcGISWebServices user and rerun the Web Applications Post Install.  This will force you to create a new ArcGISWebServices user.</li>
	<li>Last resort.  Do all the stuff in <a title="ESRi Forum" href="http://forums.esri.com/Thread.asp?c=158&amp;f=1702&amp;t=233637" target="_blank">this</a> thread, as well as the thread that is linked therein.  This is the "throw all the crap against the wall and hope something sticks" step.</li>
</ol>
Hopefully, that'll get it done.  If not, and you find something else that works, please let me know.  I don't run into this issue very often any more (but I did today and step 1 fixed it) but when I do, I am glad I have a checklist.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date>2009-05-06 22:25:50</wp:post_date>
		<wp:post_date_gmt>2009-05-06 17:25:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arcgis-server-cannot-authenticate-supplied-identity-error</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298392675:3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>329</wp:comment_id>
		<wp:comment_author><![CDATA[Jess Borrevik]]></wp:comment_author>
		<wp:comment_author_email>jborky@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>192.122.244.237</wp:comment_author_IP>
		<wp:comment_date>2011-02-22 20:34:08</wp:comment_date>
		<wp:comment_date_gmt>2011-02-22 15:34:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks so much for your post. I've been stuck on this for close to a week. I'm working with Esri support, so far no luck.

Quick question(s) ...in step #2, ArcGIS Server Post Install? Web app post install? or both?

Also, any potential side affects from removing this account from 'Guests'? I do see we have I_USR_[server name] in the list ...]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>330</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2011-02-22 21:43:55</wp:comment_date>
		<wp:comment_date_gmt>2011-02-22 16:43:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[It's the Web App Post Install, which makes you create a new user.  Removing it could cause anonymous access to the site to stop working, as stated here http://technet.microsoft.com/en-us/library/cc179801.aspx 

If it fixes your issue, then you can work to set the permissions for that account explicitly.

Hope this helps.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>329</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>WCF Service in WCFTestClient</title>
		<link>http://ruprict.net/2009/05/07/wcf-and-castle-windsor-update/wcftestclient/</link>
		<pubDate>Thu, 07 May 2009 15:08:30 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/05/wcftestclient.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Easy peasy]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2009-05-07 20:08:30</wp:post_date>
		<wp:post_date_gmt>2009-05-07 15:08:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcftestclient</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>147</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/05/wcftestclient.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/05/wcftestclient.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"980";s:6:"height";s:3:"587";s:14:"hwstring_small";s:23:"height='76' width='128'";s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/05/wcftestclient.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>WCF and Castle Windsor Update</title>
		<link>http://ruprict.net/2009/05/07/wcf-and-castle-windsor-update/</link>
		<pubDate>Thu, 07 May 2009 15:27:02 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Castle]]></category>

		<category domain="category" nicename="castle"><![CDATA[Castle]]></category>

		<category><![CDATA[WCF]]></category>

		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>

		<category domain="tag"><![CDATA[WCF]]></category>

		<category domain="tag" nicename="wcf"><![CDATA[WCF]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<category><![CDATA[Windsor]]></category>

		<category domain="category" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[My <a href="http://ruprict.wordpress.com/2008/04/01/castle-windsor-and-wcf-a-match-made-in-heaven/trackback/" target="_blank">old post</a> about the Castle Windsor <a class="zem_slink" title="Windows Communication Foundation" rel="wikipedia" href="http://en.wikipedia.org/wiki/Windows_Communication_Foundation">WCF</a> facility is a bit long in the tooth, as Mr. Craig Neuwirt and others have been hard at work improving the facility.  The <a href="http://ayende.com/Blog/archive/2009/05/05/castle-windsor-2.0-rtm-released.aspx" target="_blank">release of Windsor 2.0 </a>inspired me to attempt to go over the facility and highlight some of the new items.  In the process, I'll cover some basics, as even those have changed a bit.   I have written most of the new documentation for the WCF facility, which needs to be reviewed by Craig since some of the new stuff is above my pay grade.  The good news is that, when released, the facility will have some good documentation as well.

The best place to see the new facility in action is to grab <a href="http://using.castleproject.org/display/CASTLE/Using+the+Trunk" target="_blank">Castle's trunk</a> and go thorugh the WCF Facility unit tests.  They are comprehensive and give a great example of the new features of the facility.  This post, and the documentation I wrote, are almost entirely based on those tests.  Now, on to some examples.
<h2>Basic Server Quick Start</h2>
The basic steps to using the WCF Facility are the same, and consist of:
<ol>
	<li>Create your WCF service and data contracts.</li>
	<li>Create a service type, implementing your contract.</li>
	<li>Create your .svc file for your service.</li>
	<li>Configure Windsor to use the WCF Facility for your service.</li>
</ol>
<h3>Create WCF Service and Data Contracts</h3>
In this very simple example, I am only going to use a service contract.  Here is my contract:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;}??\fs20 \cf1 namespace\cf0  MyService.Core.Interfaces\par ??\{\par ??    [\cf4 ServiceContract\cf0 ]\par ??    \cf1 public\cf0  \cf1 interface\cf0  \cf4 IMyService\par ??\cf0     \{\par ??        [\cf4 OperationContract\cf0 ]\par ??        \cf1 string\cf0  MyOperation1(\cf1 string\cf0  myValue);\par ??\par ??        [\cf4 OperationContract\cf0 ]\par ??        \cf1 void\cf0  ThrowError();\par ??    \}\par ??\}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">namespace</span> MyService.Core.Interfaces</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;">[<span style="color:#2b91af;">ServiceContract</span>]</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">interface</span> <span style="color:#2b91af;">IMyService</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;">[<span style="color:#2b91af;">OperationContract</span>]</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">string</span> MyOperation1(<span style="color:blue;">string</span> myValue);</p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Reblog this post [with Zemanta]" href="http://reblog.zemanta.com/zemified/a516a053-994a-4e6b-9421-4177e5e263aa/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=a516a053-994a-4e6b-9421-4177e5e263aa" alt="Reblog this post [with Zemanta]" /></a>So, all my operation contract does is take in a string and return a string. No big whoop.</div>
<h3 class="zemanta-pixie" style="margin-top:10px;height:15px;">Implement the Contract</h3>
<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 namespace\cf0  MyService.Core\par ??\{\par ??    \cf1 public\cf0  \cf1 class\cf0  \cf4 TheService\cf0  : \cf4 IMyService\par ??\cf0     \{\par ??        \cf1 public\cf0  \cf1 string\cf0  Prefix \{ \cf1 get\cf0 ; \cf1 set\cf0 ; \}\par ??        \cf1 public\cf0  TheService(\cf1 string\cf0  prefix)\par ??        \{\par ??            Prefix = prefix;\par ??        \}\par ??        \par ??\cf1         #region\cf0  IMyService Members\par ??        \cf1 public\cf0  \cf1 string\cf0  MyOperation1(\cf1 string\cf0  myValue)\par ??        \{\par ??            \cf1 return\cf0  \cf4 String\cf0 .Format(\cf5 "\{0\} \{1\}"\cf0 ,Prefix, myValue);\par ??        \}\par ??\cf1         #endregion\par ??\cf0     \}\par ??\}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">namespace</span> MyService.Core</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">class</span> <span style="color:#2b91af;">TheService</span> : <span style="color:#2b91af;">IMyService</span></p>
<p style="padding-left:30px;margin:0;">{</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> Prefix { <span style="color:blue;">get</span>; <span style="color:blue;">set</span>; }</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">public</span> TheService(<span style="color:blue;">string</span> prefix)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;">Prefix = prefix;</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"> </p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;"> #region</span> IMyService Members</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">string</span> MyOperation1(<span style="color:blue;">string</span> myValue)</p>
<p style="padding-left:60px;margin:0;">{</p>
<p style="padding-left:90px;margin:0;"><span style="color:blue;">return</span> <span style="color:#2b91af;">String</span>.Format(<span style="color:#a31515;">"{0} {1}"</span>,Prefix, myValue);</p>
<p style="padding-left:60px;margin:0;">}</p>
<p style="padding-left:60px;margin:0;"><span style="color:blue;"> #endregion</span></p>
<p style="padding-left:30px;margin:0;">}</p>
<p style="margin:0;">}</p>

</div>
<h3 class="zemanta-pixie" style="margin-top:10px;height:15px;">Create your SVC file</h3>
Presuming you have a web application to host your service, all raring to go, we need to tell the framework how to creaate your service.  That's what the .svc file does:
<pre style="border:thin solid black;overflow:auto;">&lt;%@ ServiceHost Service="my service"
Factory="Castle.Facilities.WcfIntegration.DefaultServiceHostFactory, Castle.Facilities.WcfIntegration" %&gt;</pre>
As with the previous version of the facility, you have to use a custom ServiceHostFactory, which has changed to Castle.Facilities.WcfIntegration.DefaultServiceHostFactory.  Also, the Service attribute in the .svc file needs to point to the component name in your Windsor configuration, which brings us to...
<h3>Configure Windsor</h3>
In my last post, I used Boo to configure the container.  This time around, I am going to use the fluent API that Craig has created because it is kick ass.  The container needs to be configured on application start, so we put the following in the Global.asax file:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20 \cf1 #region\cf0  IContainerAccessor Members\par ??        \cf1 public\cf0  \cf4 IWindsorContainer\cf0  Container \{ \cf1 get\cf0 ; \cf1 private\cf0  \cf1 set\cf0 ; \}\par ??\cf1         #endregion\par ??\par ??\cf0         \cf1 protected\cf0  \cf1 void\cf0  Application_Start(\cf1 object\cf0  sender, \cf4 EventArgs\cf0  e)\par ??        \{\par ??            \cf4 ServiceMetadataBehavior\cf0  metadata = \cf1 new\cf0  \cf4 ServiceMetadataBehavior\cf0 ();\par ??            metadata.HttpGetEnabled = \cf1 true\cf0 ;\par ??\par ??            Container = \cf1 new\cf0  \cf4 WindsorContainer\cf0 ()\par ??                .AddFacility&lt;\cf4 WcfFacility\cf0 &gt;()\par ??                .Register(\par ??                \cf4 Component\cf0 .For&lt;\cf4 IServiceBehavior\cf0 &gt;().Instance(metadata),\par ??                \cf4 Component\cf0 .For&lt;\cf4 IMyService\cf0 &gt;()\par ??                    .Named(\cf5 "my service"\cf0 )\par ??                    .ImplementedBy&lt;\cf4 TheService\cf0 &gt;()\par ??                    .DependsOn(\cf1 new\cf0  \{prefix = \cf5 "A WCF Facility Service says"\cf0 \})\par ??                );\par ??        \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;"><span style="color:blue;">#region</span> IContainerAccessor Members</p>
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:#2b91af;">IWindsorContainer</span> Container { <span style="color:blue;">get</span>; <span style="color:blue;">private</span> <span style="color:blue;">set</span>; }</p>
<p style="margin:0;"><span style="color:blue;"> #endregion</span></p>
<p style="margin:0;"> </p>
<p style="margin:0;"><span style="color:blue;">protected</span> <span style="color:blue;">void</span> Application_Start(<span style="color:blue;">object</span> sender, <span style="color:#2b91af;">EventArgs</span> e)</p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;"><span style="color:#2b91af;">ServiceMetadataBehavior</span> metadata = <span style="color:blue;">new</span> <span style="color:#2b91af;">ServiceMetadataBehavior</span>();</p>
<p style="padding-left:30px;margin:0;">metadata.HttpGetEnabled = <span style="color:blue;">true</span>;</p>
<p style="padding-left:30px;margin:0;"> </p>
<p style="padding-left:30px;margin:0;">Container = <span style="color:blue;">new</span> <span style="color:#2b91af;">WindsorContainer</span>()</p>
<p style="padding-left:60px;margin:0;">.AddFacility&lt;<span style="color:#2b91af;">WcfFacility</span>&gt;()</p>
<p style="padding-left:60px;margin:0;">.Register(</p>
<p style="padding-left:90px;margin:0;"><span style="color:#2b91af;">Component</span>.For&lt;<span style="color:#2b91af;">IServiceBehavior</span>&gt;().Instance(metadata),</p>
<p style="padding-left:90px;margin:0;"><span style="color:#2b91af;">Component</span>.For&lt;<span style="color:#2b91af;">IMyService</span>&gt;()</p>
<p style="padding-left:120px;margin:0;">.Named(<span style="color:#a31515;">"my service"</span>)</p>
<p style="padding-left:120px;margin:0;">.ImplementedBy&lt;<span style="color:#2b91af;">TheService</span>&gt;()</p>
<p style="padding-left:120px;margin:0;">.DependsOn(<span style="color:blue;">new</span> {prefix = <span style="color:#a31515;">"A WCF Facility Service says"</span>})</p>
<p style="padding-left:30px;margin:0;">);</p>
<p style="margin:0;">}</p>

</div>
Here, lemme 'splain.  As with any web application that uses Windsor, the container lives on the Global Application object.   Here, I first add the WcfFacility followed by adding a service behavior (ServiceMetadataBehavior).  This behavior will be added to all services registered with the container, however, new to the facility is the ability to explicitly scope a behavior.  You can scope a behavior to:  all services, all clients, or to explicit clients/services.  I know that feature was oft-requested by the community and Craig is the man for getting it done.  Back to our example, the service is registered is a IMyService named "my service" (remember our .svc file) and implemented by the TheService type.  Finally, I pass in my constructor argument, which is a string.  Oh, and in order to use the facility, you'll need a reference to the following assemblies:
<ul>
	<li>Castle.Core</li>
	<li>Castle.Windsor</li>
	<li>Castle.MicroKernel</li>
	<li>Castle.Facilities.WcfIntegration</li>
	<li>Castle.DynamicProxy2</li>
</ul>
That's it!   The service is ready to run.  You'll notice (or maybe you didn't), that I did not even open the web.config.  You can use the web.config if you like, but I didn't here because I am lazy.  You also may have noticed that I did not specify an endpoint or binding, so the facility created a default endpoint with BasicHttpBinding.  Again, I am lazy, but that is cool.
<h3>Show Me the Service</h3>
The image here shows what the service looks like in the WCFTestClient.exe application.

[caption id="attachment_148" align="alignleft" width="150" caption="Easy peasy"]<a href="http://ruprict.files.wordpress.com/2009/05/wcftestclient.png"><img class="size-thumbnail wp-image-148" title="WCF Service in WCFTestClient" src="http://ruprict.files.wordpress.com/2009/05/wcftestclient.png?w=150" alt="Easy peasy" width="150" height="89" /></a>[/caption]

The default protocol is SOAP (does anyone use SOAP anymore?) but you could easily create a REST endpoint.  Maybe I'll show that in my next post about this stuff.   This post only covers the very basics, so if you have more complicated stuff, I can take a stab at it or maybe ask Craig.

Just to be complete, here are most of the  big time new features:
<ul>
	<li>Scoped Behaviors</li>
	<li>The ability to create service hosts and control the host life cycle (see IServiceHostAware)</li>
	<li>Fluent API</li>
</ul>
Speaking of which, lemme know if there is anything specific you want to see concerning the WCF Facility.  As I mentioned, the unit tests in the castle trunk are pretty comprehensive and the forthcoming documentation will have tons of configuration examples.  Try it out, it makes managing dependencies with WCF a breeze.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date>2009-05-07 20:27:02</wp:post_date>
		<wp:post_date_gmt>2009-05-07 15:27:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-and-castle-windsor-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1241710824]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>126</wp:comment_id>
		<wp:comment_author><![CDATA[Creating a REST Service with WCF and Windsor &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2009/05/11/creating-a-rest-service-with-wcf-and-windsor/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.245.187</wp:comment_author_IP>
		<wp:comment_date>2009-05-11 19:13:04</wp:comment_date>
		<wp:comment_date_gmt>2009-05-11 14:13:04</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] 2009 Posted by ruprict in WCF, Windsor.  Tags: REST, WCF, Windsor trackback  Following on from my previous post, here is a short post showing how quickly you can create a REST based service using the WCF [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>248</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2010-07-09 21:01:01</wp:comment_date>
		<wp:comment_date_gmt>2010-07-09 16:01:01</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I think at the time I made the comment people were flocking to REST.  However, SOAP definitely has its place, especially in the enterprise.  I think I was trying to be Mr. Look-at-Me-On-The-Edge Funny Guy, but looking back it just sounds like I was as caught up in the flock as anyone else.

I certainly prefer implementing REST services, just because of the simplicity compared to SOAP.  I do have clients that either insisted on SOAP or had requirements (mostly security based, like you point out) that I couldn't support with REST.  

Thanks,
Glenn]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>247</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>247</wp:comment_id>
		<wp:comment_author><![CDATA[Bill]]></wp:comment_author>
		<wp:comment_author_email>bill_mattox@corvel.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>209.234.149.122</wp:comment_author_IP>
		<wp:comment_date>2010-07-09 20:56:22</wp:comment_date>
		<wp:comment_date_gmt>2010-07-09 15:56:22</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I'm curious about your comment on SOAP? Namely, "(does anyone use SOAP anymore?)" What did you mean by that... is there a trend away from SOAP toward REST? It seems we lose something if we do that, such as the ability to attach SAML tokens, etc.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Creating a REST Service with WCF and Windsor</title>
		<link>http://ruprict.net/2009/05/11/creating-a-rest-service-with-wcf-and-windsor/</link>
		<pubDate>Mon, 11 May 2009 14:12:46 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[REST]]></category>

		<category domain="tag" nicename="rest"><![CDATA[REST]]></category>

		<category><![CDATA[WCF]]></category>

		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>

		<category domain="tag"><![CDATA[WCF]]></category>

		<category domain="tag" nicename="wcf"><![CDATA[WCF]]></category>

		<category domain="tag"><![CDATA[Windsor]]></category>

		<category domain="tag" nicename="windsor"><![CDATA[Windsor]]></category>

		<category><![CDATA[Windsor]]></category>

		<category domain="category" nicename="windsor"><![CDATA[Windsor]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=155</guid>
		<description></description>
		<content:encoded><![CDATA[Following on from my <a href="http://ruprict.wordpress.com/2009/05/07/wcf-and-castle-windsor-update/">previous post</a>, here is a short post showing how quickly you can create a REST based service using the WCF Facility for Castle Windsor.   We will use the same service contract and implementation as the last post, with some very minor changes (only one, actually).    The list of steps to expose our service from the previous post with a REST endpoint consists of:
<ol>
	<li>Create a new .svc file for the second endpoint.</li>
	<li>Add an attribute to the operation contract to specify what HTTP verbs are allowed.</li>
</ol>
That's it.  Please note that we are not replacing our SOAP endpoint from before, nor are we changing the configuration of the WCF Facility, nor are we touching the web.config.  The changes below will highlight how little we need to do.  Here is the new service endpoint (.svc file):
<pre style="border:thin solid black;font-size:small;overflow:auto;">&lt;%@ ServiceHost Service="my service"
Factory="Castle.Facilities.WcfIntegration.WindsorServiceHostFactory`1[[Castle.Facilities.WcfIntegration.Rest.RestServiceModel,
Castle.Facilities.WcfIntegration]], Castle.Facilities.WcfIntegration" %&gt;</pre>
All we have done here is replace our factory with the REST aware service model from the WCF Facility.  We are using the Service attribute to point to the same component as the SOAP endpoing.

And the new service contract:

<!-- {\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red0\green0\blue255;}??\fs20 [\cf3 ServiceContract\cf0 ]\par ??    \cf4 public\cf0  \cf4 interface\cf0  \cf3 IMyService\par ??\cf0     \{\par ??        [\cf3 OperationContract\cf0 ]\par ??        [\cf3 WebGet\cf0 ]\par ??        \cf4 string\cf0  MyOperation1(\cf4 string\cf0  myValue);\par ??\par ??    \}} -->
<div style="border:thin solid black;background:white none repeat scroll 0 0;font-family:Courier New;font-size:8pt;color:black;">
<p style="margin:0;">[<span style="color:#2b91af;">ServiceContract</span>]</p>
<p style="margin:0;"><span style="color:blue;">public</span> <span style="color:blue;">interface</span> <span style="color:#2b91af;">IMyService</span></p>
<p style="margin:0;">{</p>
<p style="padding-left:30px;margin:0;">[<span style="color:#2b91af;">OperationContract</span>]</p>
<p style="padding-left:30px;margin:0;">[<span style="color:#2b91af;">WebGet</span>]</p>
<p style="padding-left:30px;margin:0;"><span style="color:blue;">string</span> MyOperation1(<span style="color:blue;">string</span> myValue);</p>
<p style="margin:0;"></p>
<p style="margin:0;">}</p>

</div>
We've added the System.ServiceModel.Web attribute [WebGet] to allow HTTP GET to this endpoint.  Now, our operation is availalbe as a REST endpoint, using a URL like so:

<strong>http://server/site/rest.svc/MyOperation1?myValue=I%20am%20RESTful</strong>

which returns

<strong>&lt;string&gt;A WCF Facility Service says I am RESTful&lt;/string&gt;</strong>

It's likely that you wouldn't want applicaiton/xml to be the default return content-type, but the point of this post is not to show a best practice with REST, but to show how bleeding easy it is to expose a REST endpoint.  We are also now exposing TWO endpoints (SOAP and REST) with a singular service implementation, a detail worthy of note.  In the real world, you would likely have a service manager that registered service implementations and formatters, allowing the clients to specify a return type (XML, JSON, etc) and amending the content-type accordingly.

This, however, is my blog and could not be farther from the real world. ;)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date>2009-05-11 19:12:46</wp:post_date>
		<wp:post_date_gmt>2009-05-11 14:12:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-a-rest-service-with-wcf-and-windsor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1242051195]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Adding Drag/Drop Reorder to ArcGIS Flex Viewer TOC</title>
		<link>http://ruprict.net/2009/05/14/adding-dragdrop-reorder-to-arcgis-flex-viewer-toc/</link>
		<pubDate>Thu, 14 May 2009 16:58:53 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ArcGISServer]]></category>

		<category domain="tag" nicename="arcgisserver"><![CDATA[ArcGISServer]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<category domain="tag"><![CDATA[Flex]]></category>

		<category domain="tag" nicename="flex"><![CDATA[Flex]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=158</guid>
		<description></description>
		<content:encoded><![CDATA[Wow, that is a long, clumsy title.  Google will like it, though.

Anyway, I've been neck-deep in the world of Flex, focusing on the ArcGIS Server Flex API the last couple of months.  We delivered a map viewer based on Flex to a client recently, and it was a great learning experience.  ESRI released a Sample Flex Viewer component that includes the Table of Contents (TOC) sample from the code gallery.  The TOC component was originally built by Tom Hill at ESRI.  He and I have traded a couple of e-mails about adding drag and drop reorder functionality, so I thought I'd run through the basics of what it takes to get it working.
<h2>Download the Flex Viewer</h2>
If you haven't already, download the flex viewer from <a href="http://resources.esri.com/arcgisserver/apis/flex/index.cfm?fa=codeGalleryDetails&amp;scriptID=16270" target="_blank">here</a>.  Extract the sample SOURCE (there are two zips, binary and source...we are using the source archive)  to your development area.  I am using FlexBuilder, so my life is easy, as I can just import the existing project into the IDE.  You don't have to have FlexBuilder, but I am going to presume you know how to edit source files and compile the project.
<h2>Modify the LiveMapsWidget</h2>
The TOC component is used by the com.esri.solutions.flexviewer.widgets.LiveMapsWidget MXML component.  Open the source for that bad boy (the namespace==the directory).   Find the TOC component, which looks like
<pre>&lt;toccomp:TOC id="toc" width="100%" height="100%"/&gt;</pre>
We want to enable dragging on the component.  The TOC component extends the core Flex Tree component, so enabled drag drop is as simple as adding
<pre>dragEnabled=true</pre>
to the element.  If you do that and the run the viewer, you'll notice you can open the Live Maps widget (in the Globe menu)  and drag the "Lousiana Landbase" layer around.  It doesn't do much, but you can drag it.  In fact, you get a rex "X" while you drag, which means you can't drop it anywhere.  So, how do we get rid of that pesky red "X"?   We have to tell the <a href="http://livedocs.adobe.com/flex/3/langref/mx/managers/DragManager.html" target="_blank">DragManager </a>that the TOC will accept a drag/drop.  The DragManager is a Flex class that maanged drag and drop operations.  Google it for more info (sorry, but I have to constrain the post ot it will go War and Peace on me)   The time to tell the DragManager about the openness of the TOC is when something is dragged (?  drug?) over it.  We do this with the dragEnter event.  So, adddragEnter
<pre>dragEnter="onDragEnter(event)"</pre>
to the toc element.  Now we have to write the onDragEnter  method.  In the mx:Script area of LiveMapsWidget.mxml, copy this code:

[sourcecode language="java"]
			private function onDragEnter(event:DragEvent):void{
				DragManager.acceptDragDrop(event.currentTarget as TOC);
				if ((event.currentTarget as TOC)==null)
				{
					DragManager.showFeedback(DragManager.NONE);
					event.preventDefault();
				}

			}
[/sourcecode]

This function fires when we drag something over the TOC and tells it that we are open for business.  Business is, of course, things that can be dragged and dropped.  You could put more logic in here to filter out non TOCItems, etc, but that is left as a lesson for the reader.

OK,  so our red "X" is gone over the TOC (but still there if you drag a layer over the map, cool!)  but now we want it to do something when we drop the layer.  Specifically, we want it to reorder the layers.  But we only have 1 layer, so let's quickly add another.  Open up the config.xml in the src directory and add the following tag to the &lt;livemaps&gt; element:

[sourcecode language="xml"]
<mapservice label="Louisville Public Records" type="dynamic" visible="false" alpha="0.4">http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Louisville/LOJIC_PublicSafety_Louisville/MapServer</mapservice>
[/sourcecode]

Now we have two layers, making a drag/drop scenario much more compelling.  If you run the viewer you will see both our layers in the LiveMapsWidget.   Now, just like we had to tell Flex to enabled dragging on the TOC, we have to tell it to enabled dropping.  You guessed it, add
<pre>dropEnabled="true"</pre>
to the toc element.  Now, when you drag/drop a layer, they will reorder in the TOC, which is nice.  The map layers don't do anything, but we'll get there.  We have a problem now, though.  The Tree component makes no distinctions between services (roots, in this case) and the layers that make up those services.  This results in the ability of the user to be able to drop a map service under another map service, which is bad.  You can do a lot of checking when the drop occurs to make sure that the user hasn't dropped one service as a child of another.  I am gonna go an easier route and collapse all the roots (map services) on drag start so those crafty users can't do it.  They may not like it, but life is sometimes hard.  So, let's add a dragStart function:

(on the toc)
<pre>dragStart = "onDragStart(event)"</pre>
(the function)

[sourcecode language='java']
			private function onDragStart(event:DragEvent):void{
				//Close the dragged item
				_draggedLayer=toc.selectedItem  as TocMapLayerItem;
				var openItems:Array = toc.openItems as Array;
				for each(var o:Object in openItems){
					toc.expandItem(o,false);
				}
				//setInfoText(resourceManager.getString("resource","toc-layer-reorder"));
			}
[/sourcecode]

K...we're getting there.  Now to the meat of what needs to happen.  When we drop the service, we need to calculate it's new index in the map, then tell the map to reorder the services.  It took me awhile to find an algorithm that worked for this, and here is why:
<ul>
	<li>The basemaps.  The TOC doesn't have the basemaps, so you have to take that into account when calculating the new index.</li>
	<li>If the layer is dragged down, then you have to account for that.</li>
	<li>The TOC indices are reversed form the map services.  So index 0 in the map is the lowest, but it's the topmost node in the TOC.</li>
</ul>
So, nothing overwhelming, but details.    Let's add the event to the TOC element:
<pre>dragComplete = "onDragComplete(event)"</pre>
and the code:

[sourcecode language="java"]

private function onDragComplete(event:DragEvent):void{
 if (event.action!="move")
 return;
 var _roots:ArrayCollection = toc.dataProvider as ArrayCollection;
 //Unclear why I have to do this....but I need the selectedIndex later
 toc.selectedItem = _draggedLayer;
 var dropIndex:uint=toc.calculateDropIndex(event);
 // I've seen thie calculated drop index be > than the number of 
 // services.  This usually happens when a service node is expanded,
 // but let's just make sure.  We'll put it at the bottom of the list 
 // in this cse.
 if (dropIndex>_roots.length)
 dropIndex=_roots.length;

 var ind:int=0;
 // Set in onDragStart....if it's null, get outta dogdge
 if (_draggedLayer==null)
 return;
 var delta:int = _roots.length-dropIndex;

 ind = delta + 1;//We have two base layers....HACK...THIS IS BAD, MAKE IT BETTER

 // If the selected item is dragged down, then the index needs to account for that
 if (toc.selectedIndex>dropIndex)
 ind=ind-1;

 toc.map.reorderLayer(_draggedLayer.layer.id,ind);

 }

[/sourcecode]

The comments in that function go through what I am trying to do.  I'll be the first to admit that it isn't the prettiest code at the ball, but it's the one I brought so I am dancing with it (Note to self:  work on better analogies)

So, you'd expect it to work now, woudln't you?  Well, it doesn't.  We have to make a minor change to the TOC to handle the layer reorder.   In the TOC.as (in src\com\esri\solutions\flexviewer\components\toc) the onLayerReorder function looks like:

[sourcecode language="java"]

private function onLayerReorder( event:MapEvent ):void
 {
 var layer:Layer = event.layer;
 var index:int = event.index;

 for (var i:int = 0; i < _tocRoots.length; i++) {
 var item:Object = _tocRoots[i];
 if (item is TocMapLayerItem && TocMapLayerItem(item).layer === layer) {
 _tocRoots.removeItemAt(i);
 _tocRoots.addItemAt(item, _tocRoots.length - index - 1);
 break;
 }
 }
 }

[/sourcecode]
<h2>Modify the TOC Code (Just a little...)</h2>
When you run the viewer now, you'll get RangeErrors on the addItemAt line above.   So, my approach was to calculate the new TOC index by figuring out the difference between the number of layers and the new index.  Then, make sure somethign didn't go haywire and we are out of range.  See below:

[sourcecode language="java"]private function onLayerReorder( event:MapEvent ):void
 {
 var layer:Layer = event.layer;
 var index:int = event.index;
 //How far did we move?
 var addbackind:int=(map.layerIds.length-1) - event.index;
 for (var i:int = 0; i < _tocRoots.length; i++) {
 var item:Object = _tocRoots[i];
 if (item is TocMapLayerItem && TocMapLayerItem(item).layer === layer) {
 _tocRoots.removeItemAt(i);

 // If we are out of range on the high end, rein it in
 if (addbackind>_tocRoots.length)
 addbackind=_tocRoots.length-1;
 // If we are out of range on the low end, rein it in
 if (addbackind<0)
 addbackind=0;
 _tocRoots.addItemAt(item,addbackind);
 break;
 }
 }
 }

[/sourcecode]

May not be the prettiest...etc, etc.  But it works.  You should now have drag/drop reoder working like a champ.  Obviously, this code could still be improved.  The biggest example is accounting for the basemaps in a cleaner fashion.  I will tell you that we used the Specification Pattern to determine if a service was a basemap, allowing the TOC to ask the specification.  I liked that, but didn't include it here to try and keep this post focused.

Anyway, try it out and see how it goes.  If you have improvments or suggestions, hit me in the comments.  <a href="http://gist.github.com/raw/111748/b8329e6b060e53b153b5ea5501a6c3a2accef184/LiveMapsWidget.mxml" target="_blank">Here </a>is a link to the final LiveMapWidgets.mxml I used for this post.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date>2009-05-14 21:58:53</wp:post_date>
		<wp:post_date_gmt>2009-05-14 16:58:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adding-dragdrop-reorder-to-arcgis-flex-viewer-toc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1257541865]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>143</wp:comment_id>
		<wp:comment_author><![CDATA[George]]></wp:comment_author>
		<wp:comment_author_email>georgie12345@comcast.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>206.37.31.75</wp:comment_author_IP>
		<wp:comment_date>2009-06-20 01:31:28</wp:comment_date>
		<wp:comment_date_gmt>2009-06-19 20:31:28</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I'm standing up and clapping. You just saved me a whole hell of alot of development effort. THANK YOU!

I just tried it out with two layers,  a dynamic map service and an image service, and it worked flawlessly.

Thanks,

-George]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>239</wp:comment_id>
		<wp:comment_author><![CDATA[Jason H]]></wp:comment_author>
		<wp:comment_author_email>jason.hancheruk@gov.mb.ca</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>205.200.189.2</wp:comment_author_IP>
		<wp:comment_date>2010-06-03 02:19:04</wp:comment_date>
		<wp:comment_date_gmt>2010-06-02 21:19:04</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Has anybody used headings, subheadings, and sub sub headings. As an example, think of Base Maps as the top most heading, then Parks and Roads are a subheading, then National/Local Parks under Parks and Freeway and Single Lane under Roads. Single Lane or Freeway could move only under Roads, while National/Local Parks could only move under Parks. Although Roads or Parks could move up or down, but not out of the Base Maps heading.
I am new to Flex and right now any movement is into the main headings area.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>238</wp:comment_id>
		<wp:comment_author><![CDATA[Jason H]]></wp:comment_author>
		<wp:comment_author_email>jason.hancheruk@gov.mb.ca</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>205.200.189.2</wp:comment_author_IP>
		<wp:comment_date>2010-06-03 02:14:38</wp:comment_date>
		<wp:comment_date_gmt>2010-06-02 21:14:38</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Okay, my post did not format right. Think of Base Maps as the top most heading, then Parks and Roads a subheading, then National/Local Parks under Parks and Freeway and Single Lane under Roads.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>189</wp:comment_id>
		<wp:comment_author><![CDATA[Craig Carns]]></wp:comment_author>
		<wp:comment_author_email>ccarns@ctc.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>147.160.136.10</wp:comment_author_IP>
		<wp:comment_date>2009-10-23 01:53:46</wp:comment_date>
		<wp:comment_date_gmt>2009-10-22 20:53:46</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks for the post I am using it my Flex Viewer now! :)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>190</wp:comment_id>
		<wp:comment_author><![CDATA[Bill]]></wp:comment_author>
		<wp:comment_author_email>beanwl@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>70.252.114.37</wp:comment_author_IP>
		<wp:comment_date>2009-10-31 09:32:55</wp:comment_date>
		<wp:comment_date_gmt>2009-10-31 04:32:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks for the tips...I'm kind of new to this, but do I edit the LiveMapWidgets.mxml?  And what other files do I need to edit...if so can you post the entire code for each file update....

Thank you so much for you time,]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>191</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-11-02 18:46:52</wp:comment_date>
		<wp:comment_date_gmt>2009-11-02 13:46:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I blew away the code I was using for this blog, so I'll have to redo it, which may take me awhile to get to.  

There is a change to the LIveMapWidgets.mxml, which is the only file I posted.  (linked toward the end of the post)

I'll try to get another version going....]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>192</wp:comment_id>
		<wp:comment_author><![CDATA[Paul]]></wp:comment_author>
		<wp:comment_author_email>paul.heinrich@nau.edu</wp:comment_author_email>
		<wp:comment_author_url>http://perceval.bio.nau.edu/FlexViewer/</wp:comment_author_url>
		<wp:comment_author_IP>134.114.117.159</wp:comment_author_IP>
		<wp:comment_date>2009-11-07 01:59:33</wp:comment_date>
		<wp:comment_date_gmt>2009-11-06 20:59:33</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hi Glenn,

Thanks for the great post on enabling drag and drop in the livemap widget. I've been using it in a map project I've been working on at my university. I just updated my map application to the latest version of the Sample Viewer and made the alterations to the LiveMapsLayer widget as in your blog.  This modification worked great with the old version of Sample Viewer but with the update I seeing some errors in how the layers are handled. In the old version layer names were the same for both the Layer Visability and Layer Transparency views. Now for Layer Transparency I'm seeing names like ArcGISDynamicMapServiceLayer93 and ArcGISDynamicMapServiceLayer94. I've been comparing the xml and mxml for the old and new versions of the widget, but I'm finding no differences.  Drag and drop seems to be working in the layer visability view, but it's inconsistent with what the map displays.  Can you suggest where this is happening?  You can see a live version of my map application at the included link.

cheers,  Paul]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>193</wp:comment_id>
		<wp:comment_author><![CDATA[beanwl@gmail.com]]></wp:comment_author>
		<wp:comment_author_email>beanwl@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.144.71.111</wp:comment_author_IP>
		<wp:comment_date>2009-11-12 01:05:32</wp:comment_date>
		<wp:comment_date_gmt>2009-11-11 20:05:32</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Paul,

Check this ESRI post out: http://forums.esri.com/Thread.asp?c=158&amp;f=2421&amp;t=289612&amp;mc=3#msgid901417

this will fix the naming issue]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>194</wp:comment_id>
		<wp:comment_author><![CDATA[Paul]]></wp:comment_author>
		<wp:comment_author_email>paul.heinrich@nau.edu</wp:comment_author_email>
		<wp:comment_author_url>http://perceval.bio.nau.edu/FlexViewer/</wp:comment_author_url>
		<wp:comment_author_IP>134.114.117.159</wp:comment_author_IP>
		<wp:comment_date>2009-12-04 22:42:52</wp:comment_date>
		<wp:comment_date_gmt>2009-12-04 17:42:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks Glenn,

That solved the problem.

cheers,  Paul]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>237</wp:comment_id>
		<wp:comment_author><![CDATA[Jason H]]></wp:comment_author>
		<wp:comment_author_email>canadianclimate@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>205.200.189.2</wp:comment_author_IP>
		<wp:comment_date>2010-06-03 02:12:30</wp:comment_date>
		<wp:comment_date_gmt>2010-06-02 21:12:30</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I am new to the Flex world and was wondering if anybody has adjusted this script to work with headings and subheadings. Currently, when I move a layer, it takes it to the main headings and I would like it to stay within the that subheading. 
So you could move (See below) Single Lane over freeway only, but Roads could go over Parks, but neither Parks or Roads could be moved out of Base Maps.

eg.
Base Maps
       Parks
           National Parks
           Local Parks
       Roads
           Freeway
           Single Lane]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>220</wp:comment_id>
		<wp:comment_author><![CDATA[Neil Devadasan]]></wp:comment_author>
		<wp:comment_author_email>ndevadas@iupui.edu</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>149.166.110.179</wp:comment_author_IP>
		<wp:comment_date>2010-04-20 21:18:23</wp:comment_date>
		<wp:comment_date_gmt>2010-04-20 16:18:23</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thank You.

I had to include following lines too.

			import com.esri.solutions.flexviewer.components.toc.tocClasses.*;
            import mx.managers.DragManager;
            import mx.core.DragSource;
            import mx.events.DragEvent;
            
            private var _draggedLayer:TocMapLayerItem;]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Create Flex Project</title>
		<link>http://ruprict.net/?attachment_id=172</link>
		<pubDate>Fri, 31 Jul 2009 14:33:17 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/07/flexproject.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date>2009-07-31 19:33:17</wp:post_date>
		<wp:post_date_gmt>2009-07-31 14:33:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flexproject</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/07/flexproject.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/flexproject.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"685";s:6:"height";s:3:"592";s:14:"hwstring_small";s:23:"height='96' width='111'";s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/flexproject.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>flexapi</title>
		<link>http://ruprict.net/?attachment_id=173</link>
		<pubDate>Fri, 31 Jul 2009 14:38:35 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/07/flexapi.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date>2009-07-31 19:38:35</wp:post_date>
		<wp:post_date_gmt>2009-07-31 14:38:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flexapi</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/07/flexapi.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/flexapi.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"352";s:6:"height";s:3:"487";s:14:"hwstring_small";s:22:"height='96' width='69'";s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/flexapi.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>firstant.png</title>
		<link>http://ruprict.net/?attachment_id=175</link>
		<pubDate>Fri, 31 Jul 2009 15:42:44 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/07/firstant.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date>2009-07-31 20:42:44</wp:post_date>
		<wp:post_date_gmt>2009-07-31 15:42:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>firstant-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/07/firstant.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/firstant.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"344";s:6:"height";s:3:"250";s:14:"hwstring_small";s:23:"height='93' width='128'";s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/firstant.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>firstant_thumb.png</title>
		<link>http://ruprict.net/?attachment_id=176</link>
		<pubDate>Fri, 31 Jul 2009 15:42:46 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/07/firstant_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date>2009-07-31 20:42:46</wp:post_date>
		<wp:post_date_gmt>2009-07-31 15:42:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>firstant_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/07/firstant_thumb.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/firstant_thumb.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"244";s:6:"height";s:3:"178";s:14:"hwstring_small";s:23:"height='93' width='128'";s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/firstant_thumb.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>secondant.png</title>
		<link>http://ruprict.net/?attachment_id=177</link>
		<pubDate>Fri, 31 Jul 2009 15:42:47 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/07/secondant.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date>2009-07-31 20:42:47</wp:post_date>
		<wp:post_date_gmt>2009-07-31 15:42:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>secondant-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/07/secondant.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/secondant.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"640";s:6:"height";s:3:"205";s:14:"hwstring_small";s:23:"height='41' width='128'";s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/secondant.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>secondant_thumb.png</title>
		<link>http://ruprict.net/?attachment_id=178</link>
		<pubDate>Fri, 31 Jul 2009 15:42:48 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/07/secondant_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2009-07-31 20:42:48</wp:post_date>
		<wp:post_date_gmt>2009-07-31 15:42:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>secondant_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/07/secondant_thumb.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/secondant_thumb.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"244";s:6:"height";s:2:"81";s:14:"hwstring_small";s:23:"height='42' width='128'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/07/secondant_thumb.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Continuous Integration with Flex, Hudson, and ArcGIS Server, Part 1</title>
		<link>http://ruprict.net/2009/07/31/continuous-integration-with-flex-hudson-and-arcgis-server-part-1/</link>
		<pubDate>Fri, 31 Jul 2009 15:48:13 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Agile]]></category>

		<category domain="category" nicename="agile"><![CDATA[Agile]]></category>

		<category domain="tag"><![CDATA[Continuous Integration]]></category>

		<category domain="tag" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<category domain="tag"><![CDATA[Flex]]></category>

		<category domain="tag" nicename="flex"><![CDATA[Flex]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[(<a href="http://ruprict.wordpress.com/2009/08/04/continuous-integration-with-flex-hudson-and-arcgis-server-part-2/">Part 2</a>, <a href="http://ruprict.wordpress.com/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/">Part 3</a>, <a href="http://ruprict.wordpress.com/2009/09/30/continuous-integration-with-flex-hudson-and-arcgis-server-part-iv/">Part 4</a>)

I've been meaning to blog about our findings with getting CI going for Flex, since I took time to <a href="http://ruprict.wordpress.com/2009/01/10/forced-to-flex/">whinge </a>about it earlier.  It was a bit of a journey, but all in all, not that bad.  Much of the thanks goes to <a href="https://hudson.dev.java.net/" target="_blank">Hudson</a>, which is, how you say?, super-fantastic.  I plan to break this into a few blog posts rather than one big-old doozy.   The parts (I think) will be along the lines of:
<ol>
	<li>Getting your Fles project building with ant and Flex Builder, parts 1 and 2.</li>
	<li>Setting up unit testing with Fluint.</li>
	<li>Setting up Hudson.</li>
</ol>
<h4>Whachoo Need (OOH)</h4>
This post is focused on getting your Flex Builder project building with ant.  As such, I presume you are using Flex Builder, but if you aren't and just want to build with ant, you should be OK. Oh, and I am doing this on Winders, even though ant is usually the domain of the Unix-based Java wanks (I mean "wanks" as a term of endearment, like "I love those wanks")

Go get the following and download to your computer:
<ul>
	<li><a href="http://ant.apache.org/bindownload.cgi">ANT </a>- The original builder.  It can carry, like, 10,000 times its own weight in builds.  Unzip it to c:\ant.</li>
	<li>Flex Ant Tasks - These come with the Flex SDK, which comes with Flex Builder.  You can find them in C:\Program Files (x86)\Adobe\Flex Builder 3\sdks\3.2.0\ant\lib\flexTasks.jar.  If you don't have Flex Builder, go download the <a href="http://www.adobe.com/cfusion/entitlement/index.cfm?e=flex3sdk" target="_blank">SDK</a> and put it somewhere.</li>
	<li><a href="http://resources.esri.com/arcgisserver/apis/flex/">ArcGIS Server Flex API</a> - So we can get our map on, know what I'm saying? (I am using 1.2)</li>
</ul>
<h4>Create the Project</h4>
Open Flex Builder and create a new project.  I am presuming that your local workspace is c:\projects\FlexCI, though it really doesn't matter.

So, we'll start by creating a new Flex Project in Flex Builder.

<a href="http://ruprict.files.wordpress.com/2009/07/flexproject.png"><img title="Create Flex Project" src="http://ruprict.files.wordpress.com/2009/07/flexproject.png?w=150" alt="Create Flex Project" width="150" height="129" /></a>

Hit 'Next' in the project wizard and we have our project.  Copy the AGS Flex API swc into your libs folder (see pic).

<a href="http://ruprict.files.wordpress.com/2009/07/flexapi.png"><img title="flexapi" src="http://ruprict.files.wordpress.com/2009/07/flexapi.png?w=108" alt="flexapi" width="108" height="150" /></a>

Now we can make a map and stuff.  Add the following code to your app:
<pre class="csharpcode" style="overflow:auto;">&lt;esri:Map&gt;
     &lt;esri:ArcGISTiledMapServiceLayer
          url=<span class="str">"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"</span>/&gt;
&lt;/esri:Map&gt;</pre>
Now we have our map.  In Flex Builder, build (Ctrl+B, unless you are using ‘Build Automatically’) the site and run it, you should see a map of our world.  Building with Flex Builder works, which was a requirement for me.  I wanted people to be able to build and debug in the IDE, but also quickly build from the command line with ant.  I like <strong>Flex</strong>ibility, #rimshot.
<h2>High Apple Pie in the Sky Hopes</h2>
In order to build with ant, we need a couple of items
<ul>
	<li>A build file, we will call build.xml</li>
	<li>A properties file, we will call build.properties</li>
</ul>
I am not about to go into the gory details of how ant works, but presume you know the basics, which is all I know.  We need to define a build target that compiles our Flex project.  The steps the build file will go through are:
<ol>
	<li>Clean out the build dir.</li>
	<li>Build the project.</li>
</ol>
In ant-speak, that is two targets.  I will call them ‘init’ and ‘build-flex-project’.  For the init target, we just need to delete everything in the directory that Flex Builder set up as the deploy location, which is (by default) the bin-debug directory.  Create a build.xml file in your Flex Project root, has the following XML:
<pre class="csharpcode" style="overflow:auto;">&lt;project name=<span class="str">'Flex Ant Tasks Build Script'</span> <span class="kwrd">default</span>=”init”<span class="str">'&gt;
    &lt;!-- delete and redeploy --&gt;
    &lt;target name='</span>init<span class="str">'&gt;
        &lt;delete includeemptydirs='</span><span class="kwrd">true</span><span class="str">'&gt;
            &lt;fileset dir='bin-debug</span><span class="str">' includes='</span>**\*' /&gt;
        &lt;/delete&gt;
    &lt;/target&gt;
&lt;/project&gt;</pre>
This is a fully-functional ant script now.  Test it by opening a command prompt, switching to the project directory, and typing ‘c:\ant\bin\ant’ (minus the quotes, of course)  You should see something like:

<a href="http://ruprict.files.wordpress.com/2009/07/firstant.png"><img style="display:inline;border-width:0;" title="firstant" src="http://ruprict.files.wordpress.com/2009/07/firstant_thumb.png" border="0" alt="firstant" width="244" height="178" /></a>

Also, your bin-debug directory should be empty.  WOOHOO!  If you build with Flex Builder again (you may have to “Clean” since FB won’t build unless it detects a change) the files will go back into the bin-debug dir.  Right, now let’s get the build part going.  Adobe was nice enough to create ant tasks that will build Flex projects.  The easiest way to make them available to your ant script is to:
<ol>
	<li>Copy the flexTasks.jar file into your c:\ant\lib folder.</li>
	<li>Reference these tasks in your build.xml file.</li>
</ol>
The second part is done by adding the following code to the top of the build.xml file:
<pre class="csharpcode" style="overflow:auto;">&lt;!-- points to are flexTasks.jar --&gt;
&lt;taskdef resource=<span class="str">'flexTasks.tasks'</span> /&gt;</pre>
That’ll do it.  (NOTE:  In a real CI scenario, which we’ll get to, we would not copy the jar into the ant\lib folder, but make it part of the project artifacts and reference it locally.  Bear with me, baby steps on the bus…)

Now, let’s add the build-flex-project target, which uses the mxmlc Flex ant task.
<pre class="csharpcode" style="overflow:auto;">&lt;target name=<span class="str">'build-flex-project'</span> depends=<span class="str">'init'</span>&gt;
     &lt;mxmlc file=<span class="str">'${srcpath.dir}/${application.name}.mxml'</span> output=<span class="str">'${deploypath.dir}/${application.name}.swf'</span>&gt;
           &lt;load-config filename=<span class="str">'${FLEX_HOME}/frameworks/flex-config.xml'</span>/&gt;
           &lt;include-libraries file=<span class="str">'${libs.dir}'</span> /&gt;
     &lt;/mxmlc&gt;
&lt;/target&gt;</pre>
WHOA!  OK, so I’ve jumped ahead a bit, so lemme ‘splain.  First off, we tell ant that this target depends on the init target, so it will run init before running the build.  Second, those funky ${} items that you see are properties.  So, you can see that I have one for":
<ul>
	<li>srcpath.dir – the source directory, so we knows what to build.</li>
	<li>FLEX_HOME – this is where our SDK lives</li>
	<li>deploypath.dir – where to put the build output</li>
	<li>libs.dir – where are external libraries (like the AGS Flex API) live</li>
	<li>application.name – What do we want our SWF to be called.</li>
</ul>
Now we need to put these properties somewhere, and the aforementioned build.properties file is where they belong.  Looks like:
<pre class="csharpcode" style="overflow:auto;">#Copy <span class="kwrd">this</span> file locally to build.properties and change below <span class="kwrd">for</span> your env

# change <span class="kwrd">this</span> to your Flex SDK directory path
FLEX_HOME=C:/Program Files (x86)/Adobe/Flex Builder 3/sdks/3.2.0

# <span class="kwrd">this</span> points to your project<span class="str">'s src directory
# {$basedir} is a default variable that can be used in any Antscript
# and it points to the project'</span>s root folder [ flex_ant_pt1_Tasks ]
# <span class="kwrd">in</span> <span class="kwrd">this</span> <span class="kwrd">case</span>
srcpath.dir =${basedir}/src

# points to the project's libs directory
libs.dir =${basedir}/libs

# <span class="kwrd">this</span> <span class="kwrd">is</span> the folder we want to publish the swf to
deploypath.dir = ${basedir}/bin-debug

application.name=FlexAGSCI</pre>
We need to tell our build.xml file about the build properties file, and we do so by adding this to the top (meaning, first thing under the &lt;project&gt; opening tag):
<pre class="csharpcode" style="overflow:auto;">&lt;!-- load properties file --&gt;
&lt;property file=<span class="str">'build.properties'</span>/&gt;</pre>
The last thing we need before running the build again is to change the default target to build-flex-project.  You’ll find the <em>default</em> attribute on the root project element.

Now, running ‘c:\ant\bin\ant’ (btw, putting c:\ant\bin in your PATH is advisable, then you could just type ‘ant’) at the command line, gives:

<a href="http://ruprict.files.wordpress.com/2009/07/secondant.png"><img style="display:inline;border-width:0;" title="secondant" src="http://ruprict.files.wordpress.com/2009/07/secondant_thumb.png" border="0" alt="secondant" width="244" height="81" /></a>

Look in your bin-debug folder, and you’ll see the SWF file, which should be fully functional.

I think I’ll stop today’s post there.  It has gotten a bit long on me (they always do).  The next post will cover how to get the rest of the files that Flex Builder creates, like the HTML wrapper and Flash-detecting javascript files, incorporated into the build.

Hope this is useful.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date>2009-07-31 20:48:13</wp:post_date>
		<wp:post_date_gmt>2009-07-31 15:48:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>continuous-integration-with-flex-hudson-and-arcgis-server-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1254341521]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>147</wp:comment_id>
		<wp:comment_author><![CDATA[Jonathan Hartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>82.153.138.6</wp:comment_author_IP>
		<wp:comment_date>2009-08-04 00:50:16</wp:comment_date>
		<wp:comment_date_gmt>2009-08-03 19:50:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey.

I'm really going to have to sit down and try to understand what all this build configuration sort of stuff gives you that 'make all' didn't have covered thirty years ago - and still works perfectly for today. I must be doing it wrong, please feel free to tell me what I'm missing.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>148</wp:comment_id>
		<wp:comment_author><![CDATA[Ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-08-04 00:59:10</wp:comment_date>
		<wp:comment_date_gmt>2009-08-03 19:59:10</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hullo Hartley.

The short answer is, nothing.  This post is a bit below your pay grade, though, Mr. Tartley.  The audience consists of people like myself that can't get to 'make all' and, frankly, don't understand it.  ant is a well-accepted build tool, like make, I guess.  I would argue it's a bit easier to mess with than make, but I'd be standing on one leg since I don't know the first thing about make or how you would get it going to build Flex.  I could ask you the question of why you are using Python and not assembler, expecting your answer to be "It's just easier"

I do know that Hudson will use ant natively, whereas make would have to be the black box from Hudson's perspective.

Cheers]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>147</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>149</wp:comment_id>
		<wp:comment_author><![CDATA[Jonathan Hartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>82.153.138.6</wp:comment_author_IP>
		<wp:comment_date>2009-08-04 04:06:05</wp:comment_date>
		<wp:comment_date_gmt>2009-08-03 23:06:05</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey Ruprict,

[disclaimer: I'm not very good at 'not being a dick', nor at recognizing when I am being one, especially when discussing opinions that differ about topics like this, so please try to help me out by being forgiving  if I inadvertently stray over the line. Call me on it and I'll be endlessly apologetic. Thanks!]

[2nd disclaimer: I've just got back from the pub]

I do not know 'the one true way'. I only know the way I currently do it. Other ways are no doubt equally valid, or even better in many regards. I have never even used most of the tools you talk about, except maybe for a week or two here and there. I'm curious about the lack of overlap, and what we can learn from each other.

It seems surprising to me how there are real sorts of 'islands of understanding', and people naturally gravitate towards one island or another. I find 'make' and its ilk to be simpler than ant and the resulting complexities. I can see that a lot of other people don't agree. I find myself increasingly fascinated these days by what different people consider to be 'easy' or 'hard', and with the successes and failures of communication that contribute towards this.

I may be way off base here, but I get a feeling in the back of my mind. I'd be interested to see where you disagree: Command-line utils such as 'make' do come with an initial complexity in getting started. Creating a Makefile is harder than pressing F5 to build. But it doesn't seem (to me) any harder than the sort of config you outline above. However, this initial complexity is repaid many times over in terms of how easy subsequent tasks then become. It saves on complexity overall. To my mind, that's exactly the reason why command-line interfaces* are so great. Once you start using it for everything, then everything (automated builds, integration servers, running all tests, logging test results in a database) becomes a simple one-line command. You could run them from a .bat file if you want double-clickiness. It's win-win-win.

(* not Windows' out-of-the-box command-line interface. That needs replacing)

Clearly most people don't agree. I may simply be doing it wrong.

Maybe I should just write my own series of blog posts about how I would approach this, and see if I am able to make them half as good as your own.

For the record, my pay grade is strictly in the 'negligible' category, as befitting my 'just a programmer' station. :-)

Hugs!

    Jaybes]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>150</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-08-04 16:14:31</wp:comment_date>
		<wp:comment_date_gmt>2009-08-04 11:14:31</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I don't disagree with the fantasticness of command line utils.  I use Cygwin on a daily basis for that very reason.  I almost exclusively use svn and git at the command line as well.  The MS cmd is horrific, as you say (Console2 makes it a bit better)  

Something like ant gives me a command line build, outside of the IDE. The point of this series is to get the build and tests running at the command line, and then telling Hudson to just run those commands.  Hudson really just becomes another user that builds every time someone commits source.

Oh, and I wouldn't use a .bat file on a dare.  I'd likely write a rake task or something, if I could.

No need for disclaimers, Tartley.  Just announce my Quake superiority over yourself and we'll call it even....

Rups]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>152</wp:comment_id>
		<wp:comment_author><![CDATA[Jonathan Hartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>88.96.105.246</wp:comment_author_IP>
		<wp:comment_date>2009-08-04 22:24:52</wp:comment_date>
		<wp:comment_date_gmt>2009-08-04 17:24:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Oh, you're *such* a douche! How can anybody *live* like that? Get away, before I get any on me!

Oh alright, you have total Quake superiority.

Over NOBODY!!!!  !!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>154</wp:comment_id>
		<wp:comment_author><![CDATA[Jonathan Hartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>88.96.105.246</wp:comment_author_IP>
		<wp:comment_date>2009-08-05 14:46:57</wp:comment_date>
		<wp:comment_date_gmt>2009-08-05 09:46:57</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[ruprict1&gt;&gt; I don’t know the first thing about make

ruprict3&gt;&gt; I’d likely write a rake task

Isn't 'rake' a replacement for 'make'? Ahar! I didn't know it was useful outside of Ruby, or indeed Rails for that matter. Intruiging.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>165</wp:comment_id>
		<wp:comment_author><![CDATA[vineet]]></wp:comment_author>
		<wp:comment_author_email>vineet.maniac@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>129.130.77.20</wp:comment_author_IP>
		<wp:comment_date>2009-09-15 23:41:25</wp:comment_date>
		<wp:comment_date_gmt>2009-09-15 18:41:25</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[when i tried to run the code above for displaying a map. I am getting an error saying prefix "esri" for element "esri:map" is not bound. Can you suggest something.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>166</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-09-16 00:13:30</wp:comment_date>
		<wp:comment_date_gmt>2009-09-15 19:13:30</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Do you have the AGS Flex Lib .swc in your libs dir?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>165</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>167</wp:comment_id>
		<wp:comment_author><![CDATA[vineet]]></wp:comment_author>
		<wp:comment_author_email>vineet.maniac@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>129.130.77.20</wp:comment_author_IP>
		<wp:comment_date>2009-09-16 00:47:55</wp:comment_date>
		<wp:comment_date_gmt>2009-09-15 19:47:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks I have included the library and got the code running. I am new to flex and arcgis. I find this really confusing. I will try to explain my problem. I have installed arcgis server on my system and also have flex builder3 and arc_gis api for flex installed. There are some maps (.mxd files) created in arc map. When i tried to create a web application using arcserver it is taking lot of time to run in the browser. How can the flex api help me to run them faster.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>168</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-09-16 04:25:07</wp:comment_date>
		<wp:comment_date_gmt>2009-09-15 23:25:07</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Well, there are numerous reasons why the map could be slow.  If you are running all of it (arcgis, web server, web client) locally and you don't have a very beefy box, that'd probably do it.

Other reasons could be data-related or mxd-related.  It's really hard to assess why it's slow.  

There is no guarantee that using the Flex (or any of the apis) will make your map "fast".

You could start with one of these links to troubleshoot performance:

 http://webhelp.esri.com/arcgisserver/9.3/dotNet/map_authori
ng.htm

http://webhelp.esri.com/arcgisserver/9.3.1/dotNet/index.htm#common_problems.htm

Hope that helps.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>167</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>173</wp:comment_id>
		<wp:comment_author><![CDATA[Continuous Integration with Flex, Hudson, and ArcGIS Server, Part IV &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2009/09/30/continuous-integration-with-flex-hudson-and-arcgis-server-part-iv/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.245.176</wp:comment_author_IP>
		<wp:comment_date>2009-09-30 23:43:01</wp:comment_date>
		<wp:comment_date_gmt>2009-09-30 18:43:01</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] in ArcDeveloper, Continuous Integration, Flex.  Tags: Continuous Integration, Flex trackback  (Part 1, Part 2, Part [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>175</wp:comment_id>
		<wp:comment_author><![CDATA[Continuous Integration with Flex, Hudson, and ArcGIS Server, Part 2 &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2009/08/04/continuous-integration-with-flex-hudson-and-arcgis-server-part-2/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.245.190</wp:comment_author_IP>
		<wp:comment_date>2009-10-01 01:11:43</wp:comment_date>
		<wp:comment_date_gmt>2009-09-30 20:11:43</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] August 4, 2009 Posted by ruprict in Agile, Continuous Integration, Flex.  trackback  In the last post, I talked about the very basics of getting a Flex project going with Flex Builder and ant.  [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>177</wp:comment_id>
		<wp:comment_author><![CDATA[Continuous Integration with Flex, Hudson, and ArcGIS Server, Part 3 &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.245.176</wp:comment_author_IP>
		<wp:comment_date>2009-10-01 01:13:16</wp:comment_date>
		<wp:comment_date_gmt>2009-09-30 20:13:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] and ArcGIS Server, Part&nbsp;3 August 24, 2009 Posted by ruprict in Uncategorized.  trackback  (Part 1 and Part [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>195</wp:comment_id>
		<wp:comment_author><![CDATA[Continuous Integration with Flex, Hudson, and ArcGIS Server-Part V &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2009/12/11/continuous-integration-with-flex-hudson-and-arcgis-server-part-v/</wp:comment_author_url>
		<wp:comment_author_IP>72.233.96.147</wp:comment_author_IP>
		<wp:comment_date>2009-12-13 20:49:05</wp:comment_date>
		<wp:comment_date_gmt>2009-12-13 15:49:05</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Server-Part&nbsp;V December 11, 2009 Posted by ruprict in Continuous Integration.  trackback   (Part 1, Part 2, Part 3,Part [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>image.png</title>
		<link>http://ruprict.net/2009/08/04/continuous-integration-with-flex-hudson-and-arcgis-server-part-2/image-png/</link>
		<pubDate>Mon, 03 Aug 2009 23:58:22 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/08/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>189</wp:post_id>
		<wp:post_date>2009-08-04 04:58:22</wp:post_date>
		<wp:post_date_gmt>2009-08-03 23:58:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>191</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/08/image.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"224";s:6:"height";s:2:"99";s:14:"hwstring_small";s:23:"height='56' width='128'";s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>image_thumb.png</title>
		<link>http://ruprict.net/2009/08/04/continuous-integration-with-flex-hudson-and-arcgis-server-part-2/image_thumb-png/</link>
		<pubDate>Mon, 03 Aug 2009 23:58:26 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/08/image_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2009-08-04 04:58:26</wp:post_date>
		<wp:post_date_gmt>2009-08-03 23:58:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>191</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/08/image_thumb.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image_thumb.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"228";s:6:"height";s:3:"103";s:14:"hwstring_small";s:23:"height='57' width='128'";s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image_thumb.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Continuous Integration with Flex, Hudson, and ArcGIS Server, Part 2</title>
		<link>http://ruprict.net/2009/08/04/continuous-integration-with-flex-hudson-and-arcgis-server-part-2/</link>
		<pubDate>Mon, 03 Aug 2009 23:58:30 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Agile]]></category>

		<category domain="category" nicename="agile"><![CDATA[Agile]]></category>

		<category><![CDATA[Continuous Integration]]></category>

		<category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=191</guid>
		<description></description>
		<content:encoded><![CDATA[(<a href="http://ruprict.wordpress.com/2009/07/31/continuous-integration-with-flex-hudson-and-arcgis-server-part-1/">Part 1</a>, <a href="http://ruprict.wordpress.com/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/">Part 3</a>, <a href="http://ruprict.wordpress.com/2009/09/30/continuous-integration-with-flex-hudson-and-arcgis-server-part-iv/">Part 4</a>)

In the <a href="http://ruprict.wordpress.com/2009/07/31/continuous-integration-with-flex-hudson-and-arcgis-server-part-1/trackback/">last</a> post, I talked about the very basics of getting a Flex project going with Flex Builder and ant.  The current ant script we have just builds the SWF file, which leaves out a bunch of files that Flex Builder uses, and that is bad as defined by what I am trying to blog about here.  So, let’s get going on pulling over the rest of the files.  Well, at least, the important ones.  The most important one is likely the HTML file that wraps our SWF.  If we are going to deploy this SWF in any meaningful (read: web) manner, we need that HTML file.  Actually, we need one that we make ourselves and pull into our build process, but that will left as an assignment for the reader.  For the sake of this series, we’ll just reuse the HTML file that Flex Builder was kind enough to generate.

In the default Flex Builder project, one of the folders is <strong>html-template, </strong>that looks like:

<a href="http://ruprict.files.wordpress.com/2009/08/image.png"><img style="display:inline;border-width:0;" title="image" src="http://ruprict.files.wordpress.com/2009/08/image_thumb.png" border="0" alt="image" width="228" height="103" /></a>

Not much to it, really.  I am not gonna go into the meat of what the files are, if you want that go <a href="http://livedocs.adobe.com/flex/2/docs/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&amp;file=00001580.html">here</a>.  In a nutshell, what we need to do here is copy this whole directory to our output folder (our ${deploy.dir} for you sharp ones following along).  There is a slight caveat here, tho, and that’s the contents of the index.template.html.  If you open that file in a text editor, you’ll see snippets like:
<pre class="csharpcode" style="overflow:auto;">AC_FL_RunContent(
        <span class="str">"src"</span>, <span class="str">"playerProductInstall"</span>,
        <span class="str">"FlashVars"</span>, <span class="str">"MMredirectURL="</span>+MMredirectURL+<span class="str">'&amp;MMplayerType='</span>+MMPlayerType+<span class="str">'&amp;MMdoctitle='</span>+MMdoctitle+<span class="str">""</span>,
        <span class="str">"width"</span>, <span class="str">"${width}"</span>,
        <span class="str">"height"</span>, <span class="str">"${height}"</span>,
        <span class="str">"align"</span>, <span class="str">"middle"</span>,
        <span class="str">"id"</span>, <span class="str">"${application}"</span>,
        <span class="str">"quality"</span>, <span class="str">"high"</span>,
        <span class="str">"bgcolor"</span>, <span class="str">"${bgcolor}"</span>,
        <span class="str">"name"</span>, <span class="str">"${application}"</span>,
        <span class="str">"allowScriptAccess"</span>,<span class="str">"sameDomain"</span>,
        <span class="str">"type"</span>, <span class="str">"application/x-shockwave-flash"</span>,
        <span class="str">"pluginspage"</span>, <span class="str">"http://www.adobe.com/go/getflashplayer"</span>
    );</pre>
where you may notice the now familiar ${} variables.  So, now our simple copy has turned into a copy and replace all the ${} tokens with their appropriate values.  Nothing is ever as simple as it should be.

The good news is that it’s not so hard either.  Breaking down what we need to do, I think it looks something like this:
<ol>
	<li>Copy the html-template contents.</li>
	<li>Parse the index.template.html and replace the tokens.</li>
</ol>
Let’s create our ant task to get this done.  I’ll it <strong>create-html-wrapper</strong>, and it looks like this:
<pre class="csharpcode" style="overflow:auto;"><span class="kwrd">&lt;</span><span class="html">target</span> <span class="attr">name</span><span class="kwrd">='create-html-wrapper'</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">copy</span> <span class="attr">todir</span><span class="kwrd">='${deploypath.dir}'</span> <span class="attr">overwrite</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">fileset</span> <span class="attr">dir</span><span class="kwrd">='${wrapper.dir}'</span><span class="kwrd">&gt;</span>
<span class="kwrd">         &lt;exclude name='**/index.template.html' /&gt;</span>
     <span class="kwrd">&lt;</span><span class="html">exclude</span> <span class="attr">name</span><span class="kwrd">='**/index.template.html.svntmp'</span> <span class="kwrd">/&gt;</span>
         <span class="kwrd">&lt;</span><span class="html">exclude</span> <span class="attr">name</span><span class="kwrd">='.svn'</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">fileset</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">copy</span><span class="kwrd">&gt;</span></pre>
The <strong>copy</strong> ant task is a standard task from the ant library.  We are excluding some items here:  we don’t want any source control artifacts to end up in the deploy directory.  I am using subversion here, so I explicitly exclude those.  The one that may look odd is the exclusion of index.template.html.  The reason that file is excluded is because we want to rename it.  I don’t want my HTML file to be named index.template.html, do you?

(NOTE:  The Flex ant tasks include an html-wrapper task, but I found it lacking for reasons that now escape me.  I think the parsing of the HTML files was either not there or crappy.  Either way, I dumped it for some very valid reason, I am sure.)

For the index.template.html, we can use another cool ant ask that uses regular expressions to replace content within a file.  The name of that task is <strong>replaceregexp</strong>, and it’s dead sexy.  Here is the copy command, and it’s a bit of a doozy.  I am not gonna go through each token, as that would be REALLY boring (not super exciting like the rest of this post)
<pre class="csharpcode" style="overflow:auto;">
<div id="_mcePaste" style="position:absolute;left:-10000px;top:900px;width:1px;height:1px;">&lt;!-- Copy and rename the index.template.html --&gt;</div>
<div id="_mcePaste" style="position:absolute;left:-10000px;top:900px;width:1px;height:1px;"><span style="white-space:pre;"> </span> &lt;copy file='${wrapper.dir}/index.template.html'</div>
<div id="_mcePaste" style="position:absolute;left:-10000px;top:900px;width:1px;height:1px;"><span style="white-space:pre;"> </span> tofile='${html.file}' /&gt;</div>
&lt;!-- Copy and rename the index.template.html --&gt;
	     &lt;copy file='${wrapper.dir}/index.template.html'
		      tofile='${html.file}' /&gt;
 <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
        <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
        <span class="attr">flags</span><span class="kwrd">='gs'</span>
        <span class="attr">match</span><span class="kwrd">='\$\{width\}'</span>
        <span class="attr">replace</span><span class="kwrd">='100%'</span><span class="kwrd">/&gt;</span>
     <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
        <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
        <span class="attr">flags</span><span class="kwrd">='gs'</span>
        <span class="attr">match</span><span class="kwrd">='\$\{height\}'</span>
        <span class="attr">replace</span><span class="kwrd">='100%'</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
        <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
        <span class="attr">flags</span><span class="kwrd">='gs'</span>
        <span class="attr">match</span><span class="kwrd">='\$\{title\}'</span>
        <span class="attr">replace</span><span class="kwrd">='${APP_TITLE}'</span>
        <span class="attr">encoding</span><span class="kwrd">='utf-8'</span><span class="kwrd">/&gt;</span>
     <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
        <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
        <span class="attr">flags</span><span class="kwrd">='gs'</span>
        <span class="attr">match</span><span class="kwrd">='\$\{version_major\}'</span>
        <span class="attr">replace</span><span class="kwrd">='${version.major}'</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
        <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
        <span class="attr">flags</span><span class="kwrd">='gs'</span>
        <span class="attr">match</span><span class="kwrd">='\$\{version_minor\}'</span>
        <span class="attr">replace</span><span class="kwrd">='${version.minor}'</span><span class="kwrd">/&gt;</span>
     <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
        <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
        <span class="attr">flags</span><span class="kwrd">='gs'</span>
        <span class="attr">match</span><span class="kwrd">='\$\{version_revision\}'</span>
        <span class="attr">replace</span><span class="kwrd">='${version.revision}'</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
        <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
        <span class="attr">flags</span><span class="kwrd">='gs'</span>
        <span class="attr">match</span><span class="kwrd">='\$\{application\}'</span>
        <span class="attr">replace</span><span class="kwrd">='${APP_TITLE}'</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
        <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
        <span class="attr">flags</span><span class="kwrd">='gs'</span>
        <span class="attr">match</span><span class="kwrd">='\$\{bgcolor\}'</span>
        <span class="attr">replace</span><span class="kwrd">='#FFFFFF'</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
        <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
        <span class="attr">flags</span><span class="kwrd">='gs'</span>
        <span class="attr">match</span><span class="kwrd">='\$\{swf\}'</span>
        <span class="attr">replace</span><span class="kwrd">='${application.name}'</span><span class="kwrd">/&gt;</span></pre>
<pre class="csharpcode">(BTW, the replaceregexp stuff I blatantly stole from <a href="http://java-aap.blogspot.com/2007/06/how-to-build-ant-scripts-for-flex.html">here</a>, which is a GREAT post on using ant with Flex.  Also goes to show you that I am a couple of years behind the cool kids.)</pre>
Finally, let’s take another look at our build.properties file, which added quite a bit of properties for this task.
<pre class="csharpcode" style="overflow:auto;">#Copy <span class="kwrd">this</span> file locally to build.properties and change below <span class="kwrd">for</span> your env

# change <span class="kwrd">this</span> to your Flex SDK directory path
FLEX_HOME=C:/Program Files (x86)/Adobe/Flex Builder 3/sdks/3.2.0

# <span class="kwrd">this</span> points to your project<span class="str">'s src directory
# {$basedir} is a default variable that can be used in any Antscript
# and it points to the project'</span>s root folder [ flex_ant_pt1_Tasks ]
# <span class="kwrd">in</span> <span class="kwrd">this</span> <span class="kwrd">case</span>
srcpath.dir =${basedir}/src

# points to the project's libs directory
libs.dir =${basedir}/libs

# <span class="kwrd">this</span> <span class="kwrd">is</span> the folder we want to publish the swf to
deploypath.dir = ${basedir}/bin-debug

wrapper.dir=${basedir}/html-template

version.major =0
version.minor=9
version.revision = 0
APP_TITLE = Flex Solution
APP_WIDTH = 100%
APP_HEIGHT =100%
locale = en_US
html.file=${deploypath.dir}/index.html
application.name=FlexAGSCI</pre>
We have some of our HTML tokens, like width and height, a new directory (wrapper.dir) and the name of our HTML file.  For the ant build, I rename it to index.html because I plan on using ant to actually deploy the application to a web server and I want a default document name to be used.

So, next post will concentrate on adding a unit testing framework and getting ant to run our tests too.  I know the first couple of posts were mongo-basic, but I wanted to lay a bit of a foundation before getting into the cooler stuff.  We'll get there.  I am about to head off on a mini-vacation, so it might be a week or more before I get to it.  I hope you can manage until then….

Oh, and here’s our build.xml, in full, just for fun:
<pre class="csharpcode" style="overflow:auto;"><span class="kwrd">&lt;</span><span class="html">project</span> <span class="attr">name</span><span class="kwrd">='Flex Ant Tasks Build Script'</span> <span class="attr">default</span><span class="kwrd">='build-flex-project'</span><span class="kwrd">&gt;</span>
    <span class="rem">&lt;!-- load properties file --&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">file</span><span class="kwrd">='build.properties'</span><span class="kwrd">/&gt;</span>

    <span class="rem">&lt;!-- points to are flexTasks.jar --&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">taskdef</span> <span class="attr">resource</span><span class="kwrd">='flexTasks.tasks'</span> <span class="kwrd">/&gt;</span>    

    <span class="rem">&lt;!-- delete and redeploy --&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">target</span> <span class="attr">name</span><span class="kwrd">='init'</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">delete</span> <span class="attr">includeemptydirs</span><span class="kwrd">='true'</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">fileset</span> <span class="attr">dir</span><span class="kwrd">='bin-debug'</span> <span class="attr">includes</span><span class="kwrd">='**\*'</span> <span class="attr">excludes</span><span class="kwrd">='**\.svn'</span><span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">delete</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;/</span><span class="html">target</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">target</span> <span class="attr">name</span><span class="kwrd">='build-flex-project'</span> <span class="attr">depends</span><span class="kwrd">='init,create-html-wrapper'</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">mxmlc</span> <span class="attr">file</span><span class="kwrd">='${srcpath.dir}/${application.name}.mxml'</span> <span class="attr">output</span><span class="kwrd">='${deploypath.dir}/${application.name}.swf'</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">load-config</span> <span class="attr">filename</span><span class="kwrd">='${FLEX_HOME}/frameworks/flex-config.xml'</span><span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">include-libraries</span> <span class="attr">file</span><span class="kwrd">='${libs.dir}'</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">mxmlc</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;/</span><span class="html">target</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">target</span> <span class="attr">name</span><span class="kwrd">='create-html-wrapper'</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">copy</span> <span class="attr">todir</span><span class="kwrd">='${deploypath.dir}'</span> <span class="attr">overwrite</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
              <span class="kwrd">&lt;</span><span class="html">fileset</span> <span class="attr">dir</span><span class="kwrd">='${wrapper.dir}'</span><span class="kwrd">&gt;</span>
               <span class="kwrd">&lt;</span><span class="html">exclude</span> <span class="attr">name</span><span class="kwrd">='**/index.template.html'</span> <span class="kwrd">/&gt;</span>
               <span class="kwrd">&lt;</span><span class="html">exclude</span> <span class="attr">name</span><span class="kwrd">='**/index.template.html.svntmp'</span> <span class="kwrd">/&gt;</span>
               <span class="kwrd">&lt;</span><span class="html">exclude</span> <span class="attr">name</span><span class="kwrd">='.svn'</span> <span class="kwrd">/&gt;</span>
              <span class="kwrd">&lt;/</span><span class="html">fileset</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">copy</span><span class="kwrd">&gt;</span>
          <span class="rem">&lt;!-- Copy and rename the index.template.html --&gt;</span>
         <span class="kwrd">&lt;</span><span class="html">copy</span> <span class="attr">file</span><span class="kwrd">='${wrapper.dir}/index.template.html'</span>
              <span class="attr">tofile</span><span class="kwrd">='${html.file}'</span> <span class="kwrd">/&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
              <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
              <span class="attr">flags</span><span class="kwrd">='gs'</span>
              <span class="attr">match</span><span class="kwrd">='\$\{width\}'</span>
              <span class="attr">replace</span><span class="kwrd">='100%'</span><span class="kwrd">/&gt;</span>
           <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
              <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
              <span class="attr">flags</span><span class="kwrd">='gs'</span>
              <span class="attr">match</span><span class="kwrd">='\$\{height\}'</span>
              <span class="attr">replace</span><span class="kwrd">='100%'</span><span class="kwrd">/&gt;</span>
         <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
              <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
              <span class="attr">flags</span><span class="kwrd">='gs'</span>
              <span class="attr">match</span><span class="kwrd">='\$\{title\}'</span>
              <span class="attr">replace</span><span class="kwrd">='${APP_TITLE}'</span>
              <span class="attr">encoding</span><span class="kwrd">='utf-8'</span><span class="kwrd">/&gt;</span>
         <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
              <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
              <span class="attr">flags</span><span class="kwrd">='gs'</span>
              <span class="attr">match</span><span class="kwrd">='\$\{version_major\}'</span>
              <span class="attr">replace</span><span class="kwrd">='${version.major}'</span><span class="kwrd">/&gt;</span>
         <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
              <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
              <span class="attr">flags</span><span class="kwrd">='gs'</span>
              <span class="attr">match</span><span class="kwrd">='\$\{version_minor\}'</span>
              <span class="attr">replace</span><span class="kwrd">='${version.minor}'</span><span class="kwrd">/&gt;</span>
           <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
              <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
              <span class="attr">flags</span><span class="kwrd">='gs'</span>
              <span class="attr">match</span><span class="kwrd">='\$\{version_revision\}'</span>
              <span class="attr">replace</span><span class="kwrd">='${version.revision}'</span><span class="kwrd">/&gt;</span>
         <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
              <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
              <span class="attr">flags</span><span class="kwrd">='gs'</span>
              <span class="attr">match</span><span class="kwrd">='\$\{application\}'</span>
              <span class="attr">replace</span><span class="kwrd">='${APP_TITLE}'</span><span class="kwrd">/&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
              <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
              <span class="attr">flags</span><span class="kwrd">='gs'</span>
              <span class="attr">match</span><span class="kwrd">='\$\{bgcolor\}'</span>
              <span class="attr">replace</span><span class="kwrd">='#FFFFFF'</span><span class="kwrd">/&gt;</span>
         <span class="kwrd">&lt;</span><span class="html">replaceregexp</span>
              <span class="attr">file</span><span class="kwrd">='${html.file}'</span>
              <span class="attr">flags</span><span class="kwrd">='gs'</span>
              <span class="attr">match</span><span class="kwrd">='\$\{swf\}'</span>
              <span class="attr">replace</span><span class="kwrd">='${application.name}'</span><span class="kwrd">/&gt;</span> 

    <span class="kwrd">&lt;/</span><span class="html">target</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">project</span><span class="kwrd">&gt;</span></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date>2009-08-04 04:58:30</wp:post_date>
		<wp:post_date_gmt>2009-08-03 23:58:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>continuous-integration-with-flex-hudson-and-arcgis-server-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1254341493]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>158</wp:comment_id>
		<wp:comment_author><![CDATA[Continuous Integration with Flex, Hudson, and ArcGIS Server, Part 3 &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/</wp:comment_author_url>
		<wp:comment_author_IP>66.135.48.207</wp:comment_author_IP>
		<wp:comment_date>2009-08-24 19:54:10</wp:comment_date>
		<wp:comment_date_gmt>2009-08-24 14:54:10</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Continuous Integration with Flex, Hudson, and ArcGIS Server, Part&nbsp;3 August 24, 2009 Posted by ruprict in Uncategorized.  trackback  (Part 1 and Part 2) [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>176</wp:comment_id>
		<wp:comment_author><![CDATA[Continuous Integration with Flex, Hudson, and ArcGIS Server, Part 1 &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2009/07/31/continuous-integration-with-flex-hudson-and-arcgis-server-part-1/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.245.176</wp:comment_author_IP>
		<wp:comment_date>2009-10-01 01:12:53</wp:comment_date>
		<wp:comment_date_gmt>2009-09-30 20:12:53</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] 31, 2009 Posted by ruprict in Agile, Flex.  Tags: Continuous Integration, Flex trackback  (Part 1, Part 2, Part 3, Part [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>196</wp:comment_id>
		<wp:comment_author><![CDATA[Continuous Integration with Flex, Hudson, and ArcGIS Server-Part V &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2009/12/11/continuous-integration-with-flex-hudson-and-arcgis-server-part-v/</wp:comment_author_url>
		<wp:comment_author_IP>72.233.96.150</wp:comment_author_IP>
		<wp:comment_date>2009-12-13 20:57:42</wp:comment_date>
		<wp:comment_date_gmt>2009-12-13 15:57:42</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] December 11, 2009 Posted by ruprict in Continuous Integration.  trackback   (Part 1, Part 2, Part 3,Part [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>image.png</title>
		<link>http://ruprict.net/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/image-png-2/</link>
		<pubDate>Mon, 24 Aug 2009 14:47:18 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/08/image1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date>2009-08-24 19:47:18</wp:post_date>
		<wp:post_date_gmt>2009-08-24 14:47:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image-png-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>207</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/08/image1.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image1.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"640";s:6:"height";s:3:"472";s:14:"hwstring_small";s:23:"height='94' width='128'";s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image1.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>image_thumb.png</title>
		<link>http://ruprict.net/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/image_thumb-png-2/</link>
		<pubDate>Mon, 24 Aug 2009 14:47:22 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/08/image_thumb1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date>2009-08-24 19:47:22</wp:post_date>
		<wp:post_date_gmt>2009-08-24 14:47:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image_thumb-png-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>207</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/08/image_thumb1.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image_thumb1.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"244";s:6:"height";s:3:"181";s:14:"hwstring_small";s:23:"height='94' width='128'";s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image_thumb1.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>image.png</title>
		<link>http://ruprict.net/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/image-png-3/</link>
		<pubDate>Mon, 24 Aug 2009 14:47:27 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/08/image2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date>2009-08-24 19:47:27</wp:post_date>
		<wp:post_date_gmt>2009-08-24 14:47:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image-png-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>207</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/08/image2.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image2.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"640";s:6:"height";s:3:"382";s:14:"hwstring_small";s:23:"height='76' width='128'";s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image2.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>image_thumb.png</title>
		<link>http://ruprict.net/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/image_thumb-png-3/</link>
		<pubDate>Mon, 24 Aug 2009 14:47:31 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/08/image_thumb2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date>2009-08-24 19:47:31</wp:post_date>
		<wp:post_date_gmt>2009-08-24 14:47:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image_thumb-png-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>207</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/08/image_thumb2.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image_thumb2.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"244";s:6:"height";s:3:"147";s:14:"hwstring_small";s:23:"height='77' width='128'";s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image_thumb2.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>image.png</title>
		<link>http://ruprict.net/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/image-png-4/</link>
		<pubDate>Mon, 24 Aug 2009 14:47:38 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/08/image3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date>2009-08-24 19:47:38</wp:post_date>
		<wp:post_date_gmt>2009-08-24 14:47:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image-png-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>207</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/08/image3.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image3.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"640";s:6:"height";s:3:"382";s:14:"hwstring_small";s:23:"height='76' width='128'";s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image3.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>image_thumb.png</title>
		<link>http://ruprict.net/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/image_thumb-png-4/</link>
		<pubDate>Mon, 24 Aug 2009 14:47:41 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/08/image_thumb3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date>2009-08-24 19:47:41</wp:post_date>
		<wp:post_date_gmt>2009-08-24 14:47:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image_thumb-png-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>207</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/08/image_thumb3.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image_thumb3.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"244";s:6:"height";s:3:"147";s:14:"hwstring_small";s:23:"height='77' width='128'";s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image_thumb3.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>image.png</title>
		<link>http://ruprict.net/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/image-png-5/</link>
		<pubDate>Mon, 24 Aug 2009 14:47:45 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/08/image4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date>2009-08-24 19:47:45</wp:post_date>
		<wp:post_date_gmt>2009-08-24 14:47:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image-png-5</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>207</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/08/image4.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image4.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"640";s:6:"height";s:3:"382";s:14:"hwstring_small";s:23:"height='76' width='128'";s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image4.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>image_thumb.png</title>
		<link>http://ruprict.net/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/image_thumb-png-5/</link>
		<pubDate>Mon, 24 Aug 2009 14:47:49 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/08/image_thumb4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date>2009-08-24 19:47:49</wp:post_date>
		<wp:post_date_gmt>2009-08-24 14:47:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image_thumb-png-5</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>207</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/08/image_thumb4.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image_thumb4.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"244";s:6:"height";s:3:"147";s:14:"hwstring_small";s:23:"height='77' width='128'";s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/08/image_thumb4.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Continuous Integration with Flex, Hudson, and ArcGIS Server, Part 3</title>
		<link>http://ruprict.net/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/</link>
		<pubDate>Mon, 24 Aug 2009 14:47:53 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=207</guid>
		<description></description>
		<content:encoded><![CDATA[(<a href="http://ruprict.wordpress.com/2009/07/31/continuous-integration-with-flex-hudson-and-arcgis-server-part-1/">Part 1</a>, <a href="http://ruprict.wordpress.com/2009/08/04/continuous-integration-with-flex-hudson-and-arcgis-server-part-2/">Part 2</a>, <a href="http://ruprict.wordpress.com/2009/09/30/continuous-integration-with-flex-hudson-and-arcgis-server-part-iv/">Part 4</a>)

One of the tenets of continuous integration is automated testing.  The most basic form of testing, in this context, is unit testing, where each class or method is tested without running the other bits of the application.  Unit testing is focused and, hopefully, simple.  In this post, I am going to add unit testing to our application and get ant to run the tests.  There are several unit testing frameworks out there, and we’re going to use <a href="http://code.google.com/p/fluint/">Fluint</a>. Fluint and <a href="http://opensource.adobe.com/wiki/display/flexunit/FlexUnit;jsessionid=84EBDC62C2026FF173395F83C2D4F295">FlexUnit</a> have kinda merged into <a href="http://opensource.adobe.com/wiki/display/flexunit/FlexUnit+4+feature+overview">FlexUnit4</a>, which is in alpha.  FlexUnit4 is, howyousay, super-fantastic, but it doesn’t currently offer any ant tasks.  When it does, I’ll be moving to it post haste.

Go get Fluint from <a href="http://fluint.googlecode.com/files/fluint-1.1.1.swc">here</a>.  Put the fluint-1.1.1.swc file in the libs folder of your project.  We are now ready to start with some simple Test Driven Development.  Let’s add a button that zooms the map one level in, shall we?  As all examples, it’s contrived, but the point is to focus on the process.   The process here will follow simple TDD: write a test, watch it fail, write the code to make it pass.  In order to be able to watch the test fail, we’re need a bit of a foundation.  For the sake of this article, I have made a “tests” folder in the <strong>src</strong> directory where I will store the test bits.  Also, we will need a test runner for when we want to manually run our test suite.  That can be downloaded from <a href="http://fluint.googlecode.com/files/FlexTestRunner.mxml">here</a> and copied to the <strong>src</strong> directory as well.  Once the runner (FlexTestRunner.mxml) is in the <strong>src</strong> dir, be sure to go into the project properties and add it to the list of Flex Applications for the project.  if you’ve done all that properly, then you will be able to run the FlexTestRunner application, which runs the Fluint test suites, by default.

<a href="http://ruprict.files.wordpress.com/2009/08/image1.png"><img style="display:inline;border-width:0;" title="image" src="http://ruprict.files.wordpress.com/2009/08/image_thumb1.png" border="0" alt="image" width="244" height="181" /></a>

We don’t want to run the framework tests, so remove all mentions of FrameworkSuite from the code in FlexTestRunner.mxml.  In Fluint, a test runner runs test suites and test suites are composed of test cases.  We will make our own test suite, called ZoomButtonTestSuite, and our own test case called (you guessed it) ZoomButtonTestCase.  These live in the aforementioned “tests” dir.

The test suite is simple:
<pre class="csharpcode">package tests
{
    import net.digitalprimates.fluint.tests.TestSuite;
    <span class="kwrd">public</span> <span class="kwrd">class</span> ZoomButtonTestSuite extends TestSuite
    {
        <span class="kwrd">public</span> function ZoomButtonTestSuite()
        {
            addTestCase(<span class="kwrd">new</span> ZoomButtonTestCase());
        }

    }
}</pre>
All we do is pull in our test case, which looks like:
<pre class="csharpcode" style="overflow:auto;">package tests
{
    import net.digitalprimates.fluint.tests.TestCase;

    <span class="kwrd">public</span> <span class="kwrd">class</span> ZoomButtonTestCase extends TestCase
    {
        <span class="kwrd">public</span> function ZoomButtonTestCase()
        {
            super();
        }
    }
}</pre>
Before we go on, go back to FlexTestRunner.mxml and add ZoomButtonTestSuite to the suiteArray in startTestProcess, so it looks like:
<pre class="csharpcode" style="overflow:auto;"><span class="kwrd">protected</span> function startTestProcess( <span class="kwrd">event</span>:Event ) : <span class="kwrd">void</span>
{
    var suiteArray:Array = <span class="kwrd">new</span> Array();
    suiteArray.push( <span class="kwrd">new</span> ZoomButtonTestSuite() );

    testRunner.startTests( suiteArray );
}</pre>
We should be ready to right our first test.  For the ZoomButton, here are the specs:
<ul>
	<li>When the user clicks the button, zoom the map in one level.</li>
</ul>
Pretty complicated, eh?  Here’s the test:
<pre class="csharpcode" style="overflow:auto;"><span class="kwrd">public</span> function testZoomIn():<span class="kwrd">void</span>{
    var button:ZoomButton = <span class="kwrd">new</span> ZoomButton();
    var beforeLevel:uint= button.map.level;
    button.doZoom();

    assertTrue(button.map.level &lt; beforeLevel);
}</pre>
I have started with the button API design, which is the real aim of our test.  Just from this test, you can see that:
<ul>
	<li>The button is it’s own class.</li>
	<li>The button has a property called map.</li>
	<li>The button has a method called doZoom() (it has to be public for this example…not sure i like that)</li>
	<li>The doZoom() method changes the map level.</li>
</ul>
This won’t even compile, so let’s get that happening.
<pre class="csharpcode" style="overflow:auto;">package widgits
{
    import com.esri.ags.Map;
    import mx.controls.Button;

    <span class="kwrd">public</span> <span class="kwrd">class</span> ZoomButton extends Button
    {
        <span class="kwrd">public</span> var map:Map;
        <span class="kwrd">public</span> function ZoomButton()
        {
            super();
        }
        <span class="kwrd">public</span> function doZoom():<span class="kwrd">void</span>{

        }
    }
}</pre>
OK.  The ZoomButton extends the Button class, has a map property (setter/getter not used for brevity) and a doZoom() method.  Launch the test runner, and you’ll see:

<a href="http://ruprict.files.wordpress.com/2009/08/image2.png"><img style="display:inline;border-width:0;" title="image" src="http://ruprict.files.wordpress.com/2009/08/image_thumb2.png" border="0" alt="image" width="244" height="147" /></a>

About what we’d expect.  The button.map property is null.  However, I don’t want to create a full blown ESRI map for my tests.  It will be clunky and slow and difficult.  We need to fake the map.  This is where Mocks come in.
<h2>Mocking What We Don’t (need to) Understand</h2>
Just like unit testing frameworks, there are quite a few <a href="http://martinfowler.com/articles/mocksArentStubs.html" target="_blank">mocking</a> frameworks in Flex land.  For this article, I am going to use <a href="http://code.google.com/p/mock-as3/" target="_blank">MockAS3</a>. (You have to build from source.  Or you can leave a comment with an e-mail and I’ll send you my copy).  Mock AS3 is nice, as it lets us mock a class and not just an interface.  ESRI does not implement an interface with its controls (like Map) for reasons that I don’t know, but I wish they would.  Also, this unit test is an <em>interaction-based</em> test, meaning we are going to set expectation of how we expect the ZoomButton and the map to interact, then verify those expectations as part of the test.  This is what mocking is, testing interactions and expectations presuming all dependent objects do what they are supposed to do.

So, what do we expect the ZoomButton to do in the doZoom() method?  We expect it to call map.zoomIn(), right?  Our first, naive test was testing properties on the map.  While this is testing a valid post-condition, it bleeds too far into testing the ESRI Map control and not the ZoomButton.  After all, the ZoomButton does not set the map level, it just calls a method on the map. If it does that, we are happy with our ZoomButton.  Any issues outside of it are not related to the ZoomButton and its purpose.  With this in mind, our new test looks like:
<pre class="csharpcode"><span class="kwrd">public</span> function testZoomIn():<span class="kwrd">void</span>{
        var button:ZoomButton = <span class="kwrd">new</span> ZoomButton();
        var mapMock:MapMock = <span class="kwrd">new</span> MapMock();
        mapMock.mock.method(<span class="str">'zoomIn'</span>).once;

        button.doZoom();

        mapMock.mock.verify();
}</pre>
The new test now creates a mock object for the ZoomButton.map property and tells it to expect the “zoomIn” method to be called one time.  We then test the doZoom method, followed by asking the mock to verify that our expectation was met.  Here is the mock:
<pre class="csharpcode">package tests.mocks
{
    import com.anywebcam.mock.Mock;
    import com.esri.ags.Map;
    <span class="kwrd">public</span> <span class="kwrd">class</span> MapMock extends Map
    {
        <span class="kwrd">public</span> var mock:Mock;
        <span class="kwrd">override</span> <span class="kwrd">public</span> function MapMock()
        {
            mock = <span class="kwrd">new</span> Mock(<span class="kwrd">this</span>);
        }

        <span class="kwrd">override</span> <span class="kwrd">public</span> function zoomIn():<span class="kwrd">void</span>{
            mock.zoomIn();
        }

    }
}</pre>
This follows the pretty-good documentation on the Mock AS3 Google Code site for mocking classes.  We only need to mock the methods on which we are setting expectations.  Build and launch the test runner again.

<a href="http://ruprict.files.wordpress.com/2009/08/image3.png"><img style="display:inline;border-width:0;" title="image" src="http://ruprict.files.wordpress.com/2009/08/image_thumb3.png" border="0" alt="image" width="244" height="147" /></a>

Test still fails, but we get a new error:  <strong>Verifying Mock Failed.</strong> We haven’t coded our doZoom() method yet.
<pre class="csharpcode"><span class="kwrd">public</span> function doZoom():<span class="kwrd">void</span>{
    <span class="kwrd">if</span> (map)
        map.zoomIn();
    <span class="kwrd">else</span>
        <span class="kwrd">throw</span> <span class="kwrd">new</span> Error(<span class="str">"Map is not set"</span>);
}</pre>
Now, running the tests gives us sweet green….

<a href="http://ruprict.files.wordpress.com/2009/08/image4.png"><img style="display:inline;border-width:0;" title="image" src="http://ruprict.files.wordpress.com/2009/08/image_thumb4.png" border="0" alt="image" width="244" height="147" /></a>
<h2>Test Ant, Test Ant…</h2>
Now, we need to get these tests running with ant.  Luckily, Fluint ships with ant tasks (which are not available for FlexUnit4 at the time of this writing, but they assure me they are coming)  However, the ant tasks will not use the FlexTestRunner.mxml.  They use a different test runner with is Adobe AIR based, called (you guessed it) AirTestRunner, which you can download from <a href="http://fluint.googlecode.com/files/FluintAirTestRunner-1.1.1.air" target="_blank">here</a>.  Double clicking on the .air files will launch the AIR installer.  Just follow all the prompts and it will install the FlexAirTestRunner to C:\Program Files\FluintAIRTestRunner.  In that directory you’ll see a .EXE file as well as a .SWF file, which is the actual test runner.  Another caveat to running the Fluint tests with ant is that the AIR test runner requires the use of Flex Modules.  What this means is that you have to create one or more Flex Modules for your tests, depending on how you want to structure the tests.  Basically, each module acts like a container for TestSuites that you want to run, then add the module to the ant task.  Enough talk.   A sample test module can be downloaded from the Fluint Google Code site, <a href="http://fluint.googlecode.com/files/AirTestModule.mxml" target="_blank">here</a> or can be easily written.  A Fluint test module implements the ITestModule interface, which has a single method: getTestSuites().  Here is ours:
<pre class="csharpcode" style="overflow:auto;">&lt;?xml version=<span class="str">"1.0"</span> encoding=<span class="str">"utf-8"</span>?&gt;
&lt;mx:Module xmlns:mx=<span class="str">"http://www.adobe.com/2006/mxml"</span> implements=<span class="str">"net.digitalprimates.fluint.modules.ITestSuiteModule"</span>&gt;
    &lt;mx:Script&gt;
        &lt;![CDATA[

            <span class="kwrd">public</span> function getTestSuites() : Array
            {
                 var suiteArray : Array = <span class="kwrd">new</span> Array();
                suiteArray.push( <span class="kwrd">new</span> ZoomButtonTestSuite());
                <span class="kwrd">return</span> suiteArray;
            }
        ]]&gt;
    &lt;/mx:Script&gt;
&lt;/mx:Module&gt;</pre>
Looks a lot like the FlexTestRunner.mxml, huh?  The only thing we have left to do now is add a test target to our ant script.  As some of you might have guessed, we need to add the Fluint ant tasks to our build.xml file.  The easiest (read: not necessarily RIGHT) way to do this is copy them into the c:\ant\lib directory.  You can get the JAR file with the ant tasks <a href="http://fluint.googlecode.com/files/FluintAnt-1.1.1.jar" target="_blank">here</a>.   Once they are in the ant lib directory, add the following line to your build.xml (right under the flexTasks is a good spot)
<pre class="csharpcode" style="overflow:auto;">&lt;taskdef name=<span class="str">'fluint'</span> classname=<span class="str">'net.digitalprimates.ant.tasks.fluint.Fluint'</span>  /&gt;</pre>
There, now we can use our Fluint tasks in the ant file.  Since the tests are using Flex modules, we’ll want to have a couple of targets in the build script: one that builds the module, and one that executes the test.  Heres’ the target that builds the module:
<pre class="csharpcode" style="overflow:auto;">&lt;target name=<span class="str">"build-test-module"</span>&gt;
     &lt;echo&gt;Building test module&lt;/echo&gt;
    &lt;mxmlc file=<span class="str">'${srcpath.dir}/tests/ZoomButtonTestModule.mxml'</span>  target-player=<span class="str">"10.0.0"</span>
        output=<span class="str">'${deploypath.dir}/tests/ZoomButtonTestModule.swf'</span> &gt;
         &lt;load-config filename=<span class="str">'${FLEX_HOME}/frameworks/flex-config.xml'</span> /&gt;
         &lt;source-path path-element=<span class="str">'${FLEX_HOME}/frameworks'</span>/&gt;
         &lt;!-- source paths --&gt;
         &lt;compiler.source-path path-element=<span class="str">'${srcpath.dir}'</span>/&gt;
        &lt;!-- add external libraries --&gt;
        &lt;include-libraries file=<span class="str">'${libs.dir}'</span> /&gt;
    &lt;/mxmlc&gt;
&lt;/target&gt;</pre>
If you go to the command line and type ‘ant build-test—module’, it will build the module and copy it to our bin-debug directory. Now, we just need to tell the Fluint task to go find that module and run the test.  Here’s the target:
<pre class="csharpcode" style="overflow:auto;">&lt;target name=<span class="str">'test'</span>&gt;
    &lt;fluint
       debug=<span class="str">'true'</span>
       headless=<span class="str">'true'</span>
       failOnError=<span class="str">'true'</span>
       workingDir=<span class="str">'${fluint.dir}'</span>
       testRunner=<span class="str">'${fluint.dir}/FluintAIRTestRunner.exe'</span>
       outputDir=<span class="str">'${report.dir}'</span>&gt;

       &lt;fileset dir=<span class="str">'${deploypath.dir}/tests'</span>&gt;
          &lt;include name=<span class="str">'**/*TestModule.swf'</span>/&gt;
       &lt;/fileset&gt;
    &lt;/fluint&gt;
&lt;/target&gt;</pre>
You may have noticed the two new build variables: fluint.dir and report.dir.  The Fluint task needs to know where the FluintAirTestRunner.exe file resides, which is the former.  The latter tells fluint where to write the report of how the tests faired.   I added this to the bottom of the build.properties file:
<pre class="csharpcode">#Fluint vars
fluint.dir = C:/Program Files (x86)/FluintAIRTestRunner
report.dir = ${basedir}/reports</pre>
Now, running ‘ant test’ at the command line will run our test and generate the test report.  It’s an XML file that looks like:
<pre class="csharpcode" style="overflow:auto;">&lt;testsuites status=<span class="str">"true"</span> failureCount=<span class="str">"0"</span> errorCount=<span class="str">"0"</span> testCount=<span class="str">"1"</span>&gt;
  &lt;testsuite name=<span class="str">"tests.ZoomButtonTestCase"</span> errors=<span class="str">"0"</span> failures=<span class="str">"0"</span> tests=<span class="str">"1"</span> time=<span class="str">"0.237"</span>&gt;
    &lt;properties/&gt;
    &lt;testcase name=<span class="str">"testZoomIn"</span> time=<span class="str">"0.237"</span> className=<span class="str">"tests.ZoomButtonTestCase"</span>/&gt;
  &lt;/testsuite&gt;
&lt;/testsuites&gt;</pre>
So, our ant file is now running our tests.  We are well on our way to continuous integration with Flex.  Coming up, we’ll need to get some of the hardcoding out of the build file, look at our project directory structure, format our test reports to be more readable, and bring Hudson into the mix.  We have a lot to do.

I hope you find this useful.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date>2009-08-24 19:47:53</wp:post_date>
		<wp:post_date_gmt>2009-08-24 14:47:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>continuous-integration-with-flex-hudson-and-arcgis-server-part-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1254341569]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>159</wp:comment_id>
		<wp:comment_author><![CDATA[Jonathan Hartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>88.96.105.246</wp:comment_author_IP>
		<wp:comment_date>2009-08-24 22:58:31</wp:comment_date>
		<wp:comment_date_gmt>2009-08-24 17:58:31</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey, this is totally great.

I was really looking forward to you getting into writing the tests, so I could start to find out how your process compares and contrasts with what I'm used to doing in Python. (specifically IronPython, so it's still .Net)

Obviously there are a lot of similarities. The overall structure of the test code is the same. The Python standard library's 'unittest' follows the same xUnit pattern of suites and test methods that you describe here.

It's interesting to me that you use a GUI test runner. Out of interest, can you set it up to do cool stuff like detect when files are changed, and re-run the appropriate tests, so that every time you hit 'save' in your editor you get updated unit test results? I find that dead handy when I'm in an environment where I can make it happen, but it's not always straightforward. (eg. IronPython has a long startup time, several seconds, so that has an real impact)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>160</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2009-08-24 23:45:46</wp:comment_date>
		<wp:comment_date_gmt>2009-08-24 18:45:46</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I used the GUI test runner b/c that is the only thing Fluint offers.     However, the very nature of Flash means we are gonna have to use the   Flash Player, and there are no non-UI versions of that to my   knowledge.   I am unaware of any non-flash player environments for   Flash, but it would be cool (and perfect for this) if they exist. 

You could write something to monitor the files and kick off a test-  run, meaning, you'd have a Flash app just hanging out in the   background, monitoring files.   Sounds like a really good idea for an   AIR app (or, maybe, a mod to the existing AIR app) 

That's probably the biggest difference in the unit testing of Flex/  Flash vs .NET/Ruby/Python, is the need for the player.  I am hoping,   tho, that I am dumb and wrong and someone reads this and tells me how   I am dumb and wrong. 

]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>159</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>174</wp:comment_id>
		<wp:comment_author><![CDATA[Continuous Integration with Flex, Hudson, and ArcGIS Server, Part 1 &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2009/07/31/continuous-integration-with-flex-hudson-and-arcgis-server-part-1/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.245.227</wp:comment_author_IP>
		<wp:comment_date>2009-10-01 01:10:48</wp:comment_date>
		<wp:comment_date_gmt>2009-09-30 20:10:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Posted by ruprict in Agile, Flex.  Tags: Continuous Integration, Flex trackback  (Part 1, Part 2, Part 3, Part [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>181</wp:comment_id>
		<wp:comment_author><![CDATA[Akilan]]></wp:comment_author>
		<wp:comment_author_email>vbsaran@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>203.13.146.60</wp:comment_author_IP>
		<wp:comment_date>2009-10-05 16:18:12</wp:comment_date>
		<wp:comment_date_gmt>2009-10-05 11:18:12</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hi,
The article is really great.I'm new to running flex unit testcases using fluint AirRunner.Can you please tell me how to create flex modules for the tests and provide me the example file?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>182</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2009-10-05 18:06:52</wp:comment_date>
		<wp:comment_date_gmt>2009-10-05 13:06:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[If you install the FluintAirTestRunner from <a href="http://code.google.com/p/fluint/downloads/list" rel="nofollow">this</a> list. It will put a FluintTestAirRunner directory in your Program Files (on Windows) or whereever AIR installs stuff on your OS.  

The sample module is in the Fluint source at samples/src/test/flex/AirTestModule.mxml, which you can see on their SVN <a href="http://code.google.com/p/fluint/source/browse/#svn/trunk/samples/src/test/flex" rel="nofollow">here</a>.

Good luck.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>181</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>197</wp:comment_id>
		<wp:comment_author><![CDATA[Continuous Integration with Flex, Hudson, and ArcGIS Server-Part V &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.wordpress.com/2009/12/11/continuous-integration-with-flex-hudson-and-arcgis-server-part-v/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.245.180</wp:comment_author_IP>
		<wp:comment_date>2009-12-13 20:58:48</wp:comment_date>
		<wp:comment_date_gmt>2009-12-13 15:58:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] December 11, 2009 Posted by ruprict in Continuous Integration, Flex.  trackback  (Part 1, Part 2, Part 3,Part 3, Part [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>201</wp:comment_id>
		<wp:comment_author><![CDATA[sandeep]]></wp:comment_author>
		<wp:comment_author_email>sandeep.shekhawat@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>24.4.97.8</wp:comment_author_IP>
		<wp:comment_date>2010-01-28 13:17:05</wp:comment_date>
		<wp:comment_date_gmt>2010-01-28 08:17:05</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Excellent Article...Thanks]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>3479c0f09a281e0fc8655d29fcba313b.png</title>
		<link>http://ruprict.net/2009/09/30/continuous-integration-with-flex-hudson-and-arcgis-server-part-iv/3479c0f09a281e0fc8655d29fcba313b-png/</link>
		<pubDate>Wed, 30 Sep 2009 18:39:20 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/09/3479c0f09a281e0fc8655d29fcba313b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date>2009-09-30 23:39:20</wp:post_date>
		<wp:post_date_gmt>2009-09-30 18:39:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3479c0f09a281e0fc8655d29fcba313b-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>215</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/09/3479c0f09a281e0fc8655d29fcba313b.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/09/3479c0f09a281e0fc8655d29fcba313b.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"517";s:6:"height";s:3:"276";s:14:"hwstring_small";s:23:"height='68' width='128'";s:4:"file";s:107:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/09/3479c0f09a281e0fc8655d29fcba313b.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>3479c0f09a281e0fc8655d29fcba313b_thumb.png</title>
		<link>http://ruprict.net/2009/09/30/continuous-integration-with-flex-hudson-and-arcgis-server-part-iv/3479c0f09a281e0fc8655d29fcba313b_thumb-png/</link>
		<pubDate>Wed, 30 Sep 2009 18:39:23 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/09/3479c0f09a281e0fc8655d29fcba313b_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date>2009-09-30 23:39:23</wp:post_date>
		<wp:post_date_gmt>2009-09-30 18:39:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3479c0f09a281e0fc8655d29fcba313b_thumb-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>215</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/09/3479c0f09a281e0fc8655d29fcba313b_thumb.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/09/3479c0f09a281e0fc8655d29fcba313b_thumb.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"244";s:6:"height";s:3:"132";s:14:"hwstring_small";s:23:"height='69' width='128'";s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/09/3479c0f09a281e0fc8655d29fcba313b_thumb.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Continuous Integration with Flex, Hudson, and ArcGIS Server, Part IV</title>
		<link>http://ruprict.net/2009/09/30/continuous-integration-with-flex-hudson-and-arcgis-server-part-iv/</link>
		<pubDate>Wed, 30 Sep 2009 18:39:27 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category><![CDATA[Continuous Integration]]></category>

		<category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>

		<category domain="tag"><![CDATA[Continuous Integration]]></category>

		<category domain="tag" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<category domain="tag"><![CDATA[Flex]]></category>

		<category domain="tag" nicename="flex"><![CDATA[Flex]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=215</guid>
		<description></description>
		<content:encoded><![CDATA[(<a href="http://ruprict.wordpress.com/2009/07/31/continuous-integration-with-flex-hudson-and-arcgis-server-part-1/" target="_blank">Part 1</a>, <a href="http://ruprict.wordpress.com/2009/08/04/continuous-integration-with-flex-hudson-and-arcgis-server-part-2/" target="_blank">Part 2</a>, <a href="http://ruprict.wordpress.com/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/" target="_blank">Part 3</a>, <a href="http://ruprict.net/2009/12/11/continuous-integration-with-flex-hudson-and-arcgis-server-part-v/" target="_blank">Part 5</a>)

(Note:  I have started moving our builds to rake, the Ruby build DSL.  It is, howyousay, fantastic.  I see more posts in our series….)

Now that the school year has begun, I can get back into this series.  Last we left, we had ant running the build and the scripts.  Now it’s time to make the build portable, which means that our build.properties file needs to well, go away.  All this really means is taking build.properties and copying it to build.properties.template.  Then deleting build.properties out of source control.  Anyone getting our build our of source control will have to create a local build.properties file, complete with all the settings that make the build go.  This is a “best practice” and stops developers from overwriting each others’ properties when they check in the build file.

So, do that.  Rename build.properties to build.properties.template.  If you ant build-all now, the build throws an error, something about ${wrapper.dir} not found.  That’s because the build couldn’t pull in the properties file.  Copying build.properties.template to build.properties fixes the build.  However, we aren’t done with the renaming.  I want to introduce the concept of build environments to my build.  That way, I can have different properties files for named environments.  I may want to set up different SDK builds, etc. as well, and environments will help me do that.  All I need to do is add a property to the top of the build.xml file to hold my environment name.  It looks like:
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="env"</span> <span class="attr">value</span><span class="kwrd">="local"</span><span class="kwrd">/&gt;</span></pre>
This means that, by default, I’ll be running in the local environment.  This also means that build.properties.template becomes local.properties.template.  Now, I have to copy local.properties.template to local.properties to get the build going.  Another change to the build.xml file is to the line that pulls in our properties file.  It changes from:
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">file</span><span class="kwrd">='build.properties'</span><span class="kwrd">/&gt;</span></pre>
<pre class="csharpcode"><span class="kwrd">to</span></pre>
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">file</span><span class="kwrd">='${env}.properties'</span><span class="kwrd">/&gt;</span></pre>
The cool thing is that I can add another file called (for example) 34SDK.properties that points to the Flex 3.4 SDK.  Then to run that build, I can write:

ant build-all -Denv=34SDK

and it will overwrite our env variable and look for a 34SDK.properties file.  Flexibility is fun.
<h2>The SCMelephant in the Room</h2>
Up to this point, I have committed a cardinal sin.  No source control.  I know, bad developer.   However, I want to get the directory structure set up in a more CI friendly manner before I involve an SCM, so there is a method to the madness.  Let’s do that now.  There are roughly 1, 233, 443 articles on a developer’s workspace or CI directory structure.  I am going to use one that I’ve borrowed (and slightly modified) from <a href="http://viswaug.wordpress.com/" target="_blank">Vish</a>.  He is smarter than me, so it must be the way to go.  Here is the structure, in pictures:

<a href="http://ruprict.files.wordpress.com/2009/09/3479c0f09a281e0fc8655d29fcba313b.png"><img style="display:inline;border-width:0;" title="3479c0f09a281e0fc8655d29fcba313b" src="http://ruprict.files.wordpress.com/2009/09/3479c0f09a281e0fc8655d29fcba313b_thumb.png" border="0" alt="3479c0f09a281e0fc8655d29fcba313b" width="244" height="132" /></a>

You can ignore the .metadata folder, as that is a Flex Builder thing and I won’t put it in source control.   The build folder will hold the output of our build, docs is self-explanatory, src is where our Flex Builder project lives, and tools holds stuff we need to run the build.  In this case, we need the FluintAirTestRunner.exe, which I’ll copy into my tools dir.  The build file lives in the root of our project space, which means it has moved up relative to the Flex Builder project.  We need to change some things in the build.properties file to get our build going again.
<pre class="csharpcode" style="overflow:auto;">#Copy this file locally <span class="kwrd">to</span> local.properties <span class="kwrd">and</span> change below <span class="kwrd">for</span> your env

# change this <span class="kwrd">to</span> your Flex SDK directory path
FLEX_HOME=C:/Program Files (x86)/Adobe/Flex Builder 3/sdks/3.2.0

# this points <span class="kwrd">to</span> your project<span class="rem">'s src directory</span>
# {$basedir} <span class="kwrd">is</span> a <span class="kwrd">default</span> variable that can be used <span class="kwrd">in</span> any Antscript
# <span class="kwrd">and</span> it points <span class="kwrd">to</span> the project<span class="rem">'s root folder [ flex_ant_pt1_Tasks ]</span>
# <span class="kwrd">in</span> this <span class="kwrd">case</span>
srcpath.dir =${basedir}/src/FlexAGSCI/src

# points <span class="kwrd">to</span> the project<span class="rem">'s libs directory</span>
libs.dir =${basedir}/src/FlexAGSCI/libs

# this <span class="kwrd">is</span> the folder we want <span class="kwrd">to</span> publish the swf <span class="kwrd">to</span>
deploypath.dir = ${basedir}/build

wrapper.dir=${basedir}/src/FlexAGSCI/html-template

version.major =0
version.minor=9
version.revision = 0
APP_TITLE = Flex Solution
APP_WIDTH = 100%
APP_HEIGHT =100%
locale = en_US
html.file=${deploypath.dir}/index.html
application.name=FlexAGSCI

#Fluint vars
fluint.dir = ${basedir}/tools/FluintAIRTestRunner
report.dir = ${deploypath.dir}/reports</pre>
Now, running ‘ant’ at the project space root builds the project, and running ant test builds the test module and runs the test.  We copy this file to local.properties.template, and we are ready to import this project into source control.

I found a couple of posts that show how to import an existing directory into Subversion and make that directory your working copy, which is snazzy. It’s all <a href="http://www.kleinfelter.com/svn-import-with-ignore" target="_blank">here</a>.  If you know anything about svn, that is a pretty straightforward post.

That’s that.  We are now ready for Hudson.  in the next post, we’ll get Hudson up, running, building our stuff, and running our test.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date>2009-09-30 23:39:27</wp:post_date>
		<wp:post_date_gmt>2009-09-30 18:39:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>continuous-integration-with-flex-hudson-and-arcgis-server-part-iv</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1308396267:3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Continuous Integration with Flex, Hudson, and ArcGIS Server-Part V</title>
		<link>http://ruprict.net/2009/12/11/continuous-integration-with-flex-hudson-and-arcgis-server-part-v/</link>
		<pubDate>Fri, 11 Dec 2009 04:26:15 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Continuous Integration]]></category>

		<category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[(<a href="http://ruprict.wordpress.com/2009/07/31/continuous-integration-with-flex-hudson-and-arcgis-server-part-1/" target="_blank">Part 1</a>, <a href="http://ruprict.wordpress.com/2009/08/04/continuous-integration-with-flex-hudson-and-arcgis-server-part-2/" target="_blank">Part 2</a>, <a href="http://ruprict.wordpress.com/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-3/" target="_blank">Part 3</a>,<a href="http://ruprict.wordpress.com/2009/08/24/continuous-integration-with-flex-hudson-and-arcgis-server-part-4/" target="_blank">Part 3</a>, <a href="http://ruprict.wordpress.com/2009/09/30/continuous-integration-with-flex-hudson-and-arcgis-server-part-iv/" target="_self">Part 4</a>)

In what I hope is the last post in this particular series, we will get Hudson up, building our project and running our tests.  Let's get to it.
<h3>Get Hudson</h3>
Download Hudson from <a href="http://hudson-ci.org/">here</a>.  This will download <strong>hudson.war</strong>, which is a java web archive.  Oh, and I presume that you have a java SDK installed somewhere.  If you don't go to <a href="http://java.com">java.com</a> and get one.
<h3>Start Hudson</h3>
Hudson is super easy to get up and running.  I suggest you copy the hudson.war file to c:\hudson and open a command prompt to that directory.  Type:
<pre>java -jar hudson.war</pre>
This will start the Hudson service on port 8080.  If you have anything already running on this port (I did) you need to shut it down or pass the --httpPort= to the command with the port you wish to use.
<h3>Talk to Hudson</h3>
Open up a browser to <strong>http://localhost:8080</strong> and you'll see this:
<img src="http://ruprict.files.wordpress.com/2009/12/hudson_dashboard.png" alt="Hudson Dashboard" />

We need to create a job for our Flex project.  Click <strong>New Job</strong> put in a job name (I am using "AGSFlexBuild") and select "Build a free-style software project" and Click OK.  This will bring up the main configuration of the build.  The first item we will set up is the Subversion repository.  The high-level process that Hudson will follow is:
<ol>
	<li>Poll Subversion for changes</li>
	<li>When a change is detected, run an SVN updte to get the latest version</li>
	<li>Build the project</li>
	<li>On a successful build, run the tests</li>
</ol>
So, the first thing we should do is setup our Subversion repository information.

<img src="http://ruprict.files.wordpress.com/2009/12/hudson_svn.png" alt="Hudson SVN" />

Put your repository URL in as shown in the above image.  In the "Build Triggers" section select "Poll SCM" and put "* * * * *" in the "Schedule" text box. This will cause Hudson to poll SVN every minute.

Now we have to add the build step. Since we have already set up our ant build script, this part is easy.  Click "Add Build Step" and select "Invoke Ant", then fill out the text box as shown here:
<img src="http://ruprict.files.wordpress.com/2009/12/hudson_build_step.png" alt="Hudson Build Step" />

At this point if we ran the build from Hudson, we'd get an error complaining about ${deploy_dir}.  The reason for this is we don't have a local.properties file on the server (<a href="http://ruprict.wordpress.com/2009/09/30/continuous-integration-with-flex-hudson-and-arcgis-server-part-iv/">remember when we did that?</a>).  There are several possible solutions to this issue.
<ul>
	<li>Create a ci.properties file, check it in to SVN, and pass a parameter to the build step in Hudson.</li>
	<li>Create an ant task that copies the local.properties.template file to local.properties, then add a build step in Hudson that runs before the build-flex-project step.</li>
	<li>Default the properties in the build.xml file.</li>
</ul>
The last option is the ickiest, but the first two are about the same, in my opinion.  I took the second option, creating an ant task and adding it to my Hudson configuration.
<img src="http://ruprict.files.wordpress.com/2009/12/hudson_build_step_2.png" alt="Hudson Build Step 2" />
I leave the creation of the ant task as an exercise for the reader.

The final build step to be configured will run the tests.  Add another build "Invoke Ant" build step that invokes the "test" ant task.  At the bottom of the page, click the "Save" button.  This will take you to the AGSFlexBuild Project page.
<h3>Run the build</h3>
Click "Build Now" on the left hand side of the page and the build will be scheduled.  The build should run successfully.  Click on the hyperlink with the build date and time, which will take you to the details of the build.  If you click on "Console Output", the entire build log is displayed.  When things go awry in the build, you'll likely go here first.

A continuous integration process is incomplete without some kind of notification when the build fails.  There are a couple of options for notification: e-mail, CCTray, or twitter, just to name a few.  E-mail is available in the base Hudson package (see Manage Hudson, Configure System, put in SMTP information).  CCTray allegedly works, but I don't use it and can't find it.  Twitter is available as a Hudson plugin.

Speaking of plugins, there are TONS of them.  Twitter, Git, Windows Authentication, etc.  You can find them in the Hudson configration pages of the site.  I reccommend you look through them and find what you need.  Finally, it's super easy to get Hudson running as a Windows service, as there is a "Install as Windows Service" option in the Manage Hudson configuration area.

It's difficult to find a stopping place when discussing Hudson, so if you have questions, send me an e-mail or leave a comment.  The code for this series can be found on <a href="http://github.com/ruprict/FlexAGSCI">github</a> (you could fork it and test using Hudson with git, just for fun.... ;))  I hope someone found this series useful.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2009-12-11 09:26:15</wp:post_date>
		<wp:post_date_gmt>2009-12-11 04:26:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>continuous-integration-with-flex-hudson-and-arcgis-server-part-v</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1260720047]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>394</wp:comment_id>
		<wp:comment_author><![CDATA[Continuous Integration with Flex, Hudson, and ArcGIS Server, Part IV &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.net/2009/09/30/continuous-integration-with-flex-hudson-and-arcgis-server-part-iv/</wp:comment_author_url>
		<wp:comment_author_IP>76.74.248.137</wp:comment_author_IP>
		<wp:comment_date>2011-06-18 16:24:30</wp:comment_date>
		<wp:comment_date_gmt>2011-06-18 11:24:30</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] (Part 1, Part 2, Part 3, Part 5) [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>202</wp:comment_id>
		<wp:comment_author><![CDATA[sandy]]></wp:comment_author>
		<wp:comment_author_email>sandeep.shekhawat@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>209.131.62.115</wp:comment_author_IP>
		<wp:comment_date>2010-01-31 14:31:32</wp:comment_date>
		<wp:comment_date_gmt>2010-01-31 09:31:32</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hi
Is there a way we can the see the results (TESTS-all.xml file generated by fluint) of FluintAIRTestRunner output on Hudson ? Do we need a plugin in hudson ?

Excellent article was really helpful.

Thanks,]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>203</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.75.234.80</wp:comment_author_IP>
		<wp:comment_date>2010-01-31 18:44:58</wp:comment_date>
		<wp:comment_date_gmt>2010-01-31 13:44:58</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Yes, there is.  Fluint actually outputs JUnit compatible report, so you can use an ant task to create the report and Hudson should pick it up.  My task looks like:

<!-- Generate readable JUnit-style reports -->
		
			
				
			
			

		

It has dependencies on Xalan, which my JDK supplied so I didn't have to do anything else.  

Then, in Hudson, go to the Configure screen of your project and click "Publish JUnit test result report" and point it at the directory that your ant builds put the xml.  Mine was trunk/build/reports/*.xml.

That should do it.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>testing_e_text_editor.PNG</title>
		<link>http://ruprict.net/2009/12/11/continuous-integration-with-flex-hudson-and-arcgis-server-part-v/testing_e_text_editor-png/</link>
		<pubDate>Fri, 11 Dec 2009 14:15:56 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/12/testing_e_text_editor.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2009-12-11 19:15:56</wp:post_date>
		<wp:post_date_gmt>2009-12-11 14:15:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing_e_text_editor-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>226</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/12/testing_e_text_editor.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/12/testing_e_text_editor.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>hudson_dashboard.png</title>
		<link>http://ruprict.net/2009/12/11/continuous-integration-with-flex-hudson-and-arcgis-server-part-v/hudson_dashboard-png/</link>
		<pubDate>Sat, 12 Dec 2009 21:34:52 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/12/hudson_dashboard.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date>2009-12-13 02:34:52</wp:post_date>
		<wp:post_date_gmt>2009-12-12 21:34:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hudson_dashboard-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>226</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/12/hudson_dashboard.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/12/hudson_dashboard.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>hudson_svn.PNG</title>
		<link>http://ruprict.net/2009/12/11/continuous-integration-with-flex-hudson-and-arcgis-server-part-v/hudson_svn-png/</link>
		<pubDate>Sat, 12 Dec 2009 21:48:48 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/12/hudson_svn.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date>2009-12-13 02:48:48</wp:post_date>
		<wp:post_date_gmt>2009-12-12 21:48:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hudson_svn-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>226</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/12/hudson_svn.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/12/hudson_svn.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>hudson_build_step.PNG</title>
		<link>http://ruprict.net/2009/12/11/continuous-integration-with-flex-hudson-and-arcgis-server-part-v/hudson_build_step-png/</link>
		<pubDate>Sat, 12 Dec 2009 21:58:15 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/12/hudson_build_step.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date>2009-12-13 02:58:15</wp:post_date>
		<wp:post_date_gmt>2009-12-12 21:58:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hudson_build_step-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>226</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/12/hudson_build_step.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/12/hudson_build_step.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>hudson_build_step_2.PNG</title>
		<link>http://ruprict.net/2009/12/11/continuous-integration-with-flex-hudson-and-arcgis-server-part-v/hudson_build_step_2-png/</link>
		<pubDate>Sat, 12 Dec 2009 22:12:41 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2009/12/hudson_build_step_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2009-12-13 03:12:41</wp:post_date>
		<wp:post_date_gmt>2009-12-12 22:12:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hudson_build_step_2-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>226</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2009/12/hudson_build_step_2.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2009/12/hudson_build_step_2.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ArcGIS Javascript API Tasks and the Back Button</title>
		<link>http://ruprict.net/2010/01/13/arcgis-javascript-api-tasks-and-the-back-button/</link>
		<pubDate>Wed, 13 Jan 2010 16:16:59 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag" nicename="arcgis-server"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag"><![CDATA[javascript]]></category>

		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/2010/01/13/arcgis-javascript-api-tasks-and-the-back-button/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Today I was working on an issue with a Sharepoint (I know, I know) web part that we have created to host a map.  The web part using the ESRI ArcGIS Javascript API to dynamically load some graphics and layers when the page is loaded.  The structure of the Sharepoint pages is hierarchical, so the user would select a property, then a site on that property, then an agreement on that site.  Each of these pages contained a map that zoomed to the relevant area and loaded the relevant graphics/layers. This hierarchy leads the users to hit the browser Back button quite often.  Go to a property, then a site, back to the property, to another site, then an agreement, back to the site....you get the idea.</p>
<p>Unfortunately, when the user hit the back button in <span style="text-decoration:line-through;">that piece of crap</span> Internet Explorer, the queries would not fire.  In all other browsers, the queries work fine when the back button is clicked, but not IE.  As you probably already know, if an enterprise is using Sharepoint, then they are using IE as their standard browser.  This issue was causing a ton of grief.</p> 
<p>
I tried many different approaches, from forcing HTTP headers (Pragma: no-cache or Expires: -1) to trying to reload the page if the history.next object was defined.  What finally worked was slightly changing the URL that task used so that IE wouldn't use the client-side cache.  I used a random number generator in javascript and appended it to the URL.  The code is below.	
</p>
<code style="font-size:small;overflow:scroll;">
	var find = new ESRI.ArcGIS.VE.Query();</br>
	find.Where="ATTRIBUTE='"+this.value.toUpperCase()+"'";</br>
	find.OutFields=["ATTRIBUTE,OTHER_ATTRIBUTE"];</br>
	var findTask = new ESRI.ArcGIS.VE.QueryTask();</br>
	//Have to append a random number to get this to work when back button is pressed</br>
	findTask.Url=th.Url+"/3?_esi="+Math.floor(Math.random()*111);</br>
	findTask.Execute(find,dojo.hitch(this,this.handleResults));</br>
</code>
<p>The "_esi=" is just a key I put in to know it was mine and is, likely, unnecessary.  May not be the best solution (I bet Vish will skewer it) but it works. Anyway, this took a few hours away from my  life, so I thought I'd post it here.  Hope it helps someone else.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date>2010-01-13 21:16:59</wp:post_date>
		<wp:post_date_gmt>2010-01-13 16:16:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arcgis-javascript-api-tasks-and-the-back-button</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>2010 ESRI Developers Summit</title>
		<link>http://ruprict.net/2010/03/16/2010-esri-developers-summit/</link>
		<pubDate>Tue, 16 Mar 2010 13:28:28 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag" nicename="arcgis-server"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag"><![CDATA[ESRI]]></category>

		<category domain="tag" nicename="esri"><![CDATA[ESRI]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=252</guid>
		<description></description>
		<content:encoded><![CDATA[So, I'm off to the ESRI Dev Summit next week to meet and learn from a legend (the official unit of measure of geonerds) of geonerds.  I will be giving a user presentation on using Cairngorm 3 to create testable applications with ArcGIS Server.  The presentation is all but done, and I'll have links to the slides as well as the source I use for the demo app once the conference is over.  I am very interested in some of the other user presentations, which span the gamut of what can be done with ArcGIS and a bit of nerd elbow grease.  I'll definitely be attending the Ruby/Rails based user presentations, as well as some of the other Flex and javascript-based presos.  Just like last year, I'll not likely go to any Silverlight presentations, simply because we are not currently using Silverlight.

If you're going to be in Palm Springs this year and want to have a pint or ten, hit me on twitter (@ruprictGeek).  For what I do, the ESRI Developers Summit is far-and-away the most relevant and important conference, so the more geonerds I can meet, the better.

Hope to see you there!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date>2010-03-16 18:28:28</wp:post_date>
		<wp:post_date_gmt>2010-03-16 13:28:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2010-esri-developers-summit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1268746112]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>2010 ESRI Dev Summit Wrap Up</title>
		<link>http://ruprict.net/2010/03/29/2010-esri-dev-summit-wrap-up/</link>
		<pubDate>Mon, 29 Mar 2010 17:18:39 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ESRI]]></category>

		<category domain="tag" nicename="esri"><![CDATA[ESRI]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=255</guid>
		<description></description>
		<content:encoded><![CDATA[Back in Charlotte after another lively ESRI Developers Summit.  I went back and read my impressions from <a href="http://ruprict.wordpress.com/2009/03/27/esri-developer-summit-impressions/">last year</a>, and have to say that they were hit and miss.  You could replace last year's impressions mentioning 9.4, with some mentioning 10 (the new and improved 9.4) and it would at least partially apply.  New stuff this year to get your inner (and outer) GIS nerd in a frenzy are:
<ul>
	<li>Editing from the web.  The new FeatureLayer in the REST (and, thus, the various web) API is the big deal.  Simple editing of GIS data from the web.  In my oft-hyperbolic opinion, this is a game changer.</li>
	<li>Attachements support in the REST API.  I have mixed feelings about this, as it seems that ESRI might be trying to make the geodatabase the everything-base, but I guess attachments are just another kind of data.  I can see cases where we'd use this, but I plan to be very careful...</li>
	<li>Scriptable REST admin (my sessions were almost all either REST or Flex or both), which could be very useful.</li>
	<li>REST-enabled Server Object Extensions (SOE) look very promising as well.</li>
	<li>The Flex API has AMF support at 10.  Truthfully, I've not done much with AMF in Flex, but I understand it's superdy-duperdy fast.  That's on the immediate todo list.</li>
	<li>Also on the Flex side, although not ESRI specific, is the release of Flex 4.  I went to a couple of sessions where they demoed Flash Catalyst, Flash Builder, and the new workflow.  I finally understand what Catalyst is, which is a good thing.  Depending on it's cost, we may or may not use it.</li>
	<li>Various small bits, like point clustering being supported by the GraphicsLayer, complete with a cool "flare-out" symbol.</li>
</ul>
This year was the second where users were allowed to present.  I presented on Cairngorm 3 and best practices in Flex.  I thought the presentation when as well as I could have hoped.  The slidedeck and code are available, and you can find all that information <a href="http://github.com/ruprict/scaling-cairngorm-ags" target="_blank">here</a>.  The app I used basically allows the user to draw a polygon around NFL stadiums in the US and then click on the selected stadiums to see a pop-up with an aerial view of that stadium.  Cairngorm 3 and Parsley made it very easy to create the app, and the amount of code I had to write is shockingly little.

I will say I was surprised at the number of Flex vs Silverlight developers this year.  Last year, I wrote about Silverlight being the Queen of the Ball, with most developers I knew going to all SL sessions.  The buzz was much bigger about SL then, which was a 180 turn-around this year.  All of the Flex sessions seemed to be packed, and the buzz was Flex-heavy.  I didn't actually go to any SL sessions, but I heard more than one developer say that the sessions seemed less full than last year.  Maybe it's an alternating year thing or something.  Or maybe the release of Flex 4 on the Monday of the summit had something to do with it.  If you are a Sliverlight developer, please bear in mind that I don't really care if Flex or SL has more "buzz" or attendees, but I just find the dynamic between the two camps and their respective APIs mildly interesting.

For more info, you can go to ESRI's Dev Summit site and watch <a href="http://www.esri.com/events/devsummit/videos/index.html" target="_blank">plenary videos</a> as well as all <a href="http://www.esri.com/events/devsummit/tech-session-videos/index.html" target="_blank">tech sessions</a>.    The user sessions aren't posted yet, but they're coming.  If I think about it, I'll post a link to mine when it comes online.  Oh, and if you checkout the Twitter #devsummit tag, you'll see a mountain of info and links for your perusing pleasure.

It was a great conference, as always.  Already looking forward to next year.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date>2010-03-29 22:18:39</wp:post_date>
		<wp:post_date_gmt>2010-03-29 17:18:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2010-esri-dev-summit-wrap-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1269883169]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Cairngorm3 vs Robotlegs</title>
		<link>http://ruprict.net/2010/04/01/robotlegs-and-cairngorm-3-initial-impressions/cg3_vs_rl/</link>
		<pubDate>Thu, 01 Apr 2010 15:07:59 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2010/04/cg3_vs_rl.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Smackdown!]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date>2010-04-01 20:07:59</wp:post_date>
		<wp:post_date_gmt>2010-04-01 15:07:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cg3_vs_rl</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>259</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2010/04/cg3_vs_rl.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2010/04/cg3_vs_rl.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"450";s:6:"height";s:3:"225";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2010/04/cg3_vs_rl.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Robotlegs and Cairngorm 3: Initial Impressions</title>
		<link>http://ruprict.net/2010/04/01/robotlegs-and-cairngorm-3-initial-impressions/</link>
		<pubDate>Thu, 01 Apr 2010 15:16:58 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Cairngorm 3]]></category>

		<category domain="tag" nicename="cairngorm-3"><![CDATA[Cairngorm 3]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<category domain="tag"><![CDATA[Flex]]></category>

		<category domain="tag" nicename="flex"><![CDATA[Flex]]></category>

		<category domain="tag"><![CDATA[robotlegs]]></category>

		<category domain="tag" nicename="robotlegs"><![CDATA[robotlegs]]></category>

		<guid isPermaLink="false">http://ruprict.wordpress.com/?p=259</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_261" align="aligncenter" width="450" caption="Smackdown? (Well, not really...)"]<a href="http://ruprict.files.wordpress.com/2010/04/cg3_vs_rl.png"><img class="size-full wp-image-261" title="Cairngorm3 vs Robotlegs" src="http://ruprict.files.wordpress.com/2010/04/cg3_vs_rl.png" alt="" width="450" height="225" /></a>[/caption]

I have had <a href="http://www.robotlegs.org/" target="_blank">Robotlegs </a>on my radar screen for months now, just didn't have the time/brains to really check it out.  I cut my Flex framework teeth on <a class="zem_slink" title="Cairngorm (Flex framework)" rel="wikipedia" href="http://en.wikipedia.org/wiki/Cairngorm_%28Flex_framework%29">Cairngorm</a> 2, which seems to be the framework non grata of all the current well-known Flex frameworks (Swiz, PureMVC, Robotlegs, etc.)  However, at<a href="http://joelhooks.com/" target="_blank"> Joel Hooks</a>' suggestion, I took a look at <a href="http://opensource.adobe.com/wiki/display/cairngorm/Cairngorm+3" target="_blank">Cairngorm 3</a> (henceforth referred to as CG3), enough to do a <a href="http://github.com/ruprict/scaling-cairngorm-ags" target="_blank">presentation</a> on it for a <a href="http://www.esri.com/events/devsummit/" target="_blank">recent nerd conference</a>. The presentation includes a <a href="http://github.com/ruprict/scaling-cairngorm-ags" target="_blank">demo app</a> that I wrote using Cairngorm 3, which (currently) uses <a href="http://www.spicefactory.org/parsley/" target="_blank">Parsley </a>as it's <a class="zem_slink" title="Inversion of control" rel="wikipedia" href="http://en.wikipedia.org/wiki/Inversion_of_control">IoC</a> container.  That's right, Cairngorm 3 presumes an IoC container, but does not specify one.  This means that you can adapt the CG3 guidelines to your IoC of choice.  This is only one of the many ways CG3 is different from CG2, with others being:
<ul>
	<li>No more locators, model or otherwise.  Your model can be injected by the IoC or handled via events.  For you Singleton haters, this is a biggie.</li>
	<li>A Presentation Model approach is prescribed, meaning your MXML components are ignorant of everything except an injected presentation model.  The views events (clicks, drags, etc) call functions on the presentation model inline.  The presentation model then raises the business events.  This allows simple unit testing of the view logic in the presentation models.</li>
	<li>The Command Pattern is still in use in CG3, but commands are not mapped the same way.  For CG3, your commands are mapped to events by your IoC.  Parsley has a command pattern approach in the latest version that actually came from the CG3 beta.  This approach uses metadata (like [Command] and [CommandResult]) to tell Parsley which event to map.  Again, this results in highly testable command logic.</li>
	<li>CG3 includes a few peripheral libraries to handle common needs that are very nice.  Things like Popups, navigation, validation, and the observer pattern are all included in libraries that are not dependent on using CG3 or anything, really.  If you don't intend to use CG3, it may be worth your while just to check out these swcs.</li>
</ul>
All in all, CG3 is a breath of fresh air for someone who has been using CG2.  Cairngorm 2 is fine, and it's certainly better than not using any framework, but the singletons always made me uneasy and, in some of our lazier moments, we ended up with hacks to get the job done.  I feel that CG3 really supports a test-driven approach and Parsley is very nice and well-documented.   It's worth saying that I only know enough about Parsley to get it to work in the CG3-prescribed manner, and there seems to be much more to the framework.

Once I had a basic handle on CG3, Joel said he was interested in how CG3 could work with Robotlegs (henceforth referred to as RL).  Also, after my presentation, a couple of folks wandered up and mentioned RL as well.  So, when I got home, I ported the demo app to RL (it's a branch of the github repo I link to above) so I could finally check it off my Nerd Bucket List.

First of all, Robotlegs is, like CG3, prescriptive in nature.  It is there to help you wire up your dependencies and maintain loose coupling to create highly testable apps (right, all buzzwords out of the way in one sentence.  Excellent)  Like CG3, it presumes an IoC, but does not specify a particular one.  The "default" implementation uses SwiftSuspenders (link?) but it allows anyone to use another IoC if they feel the need.  I have heard rumblings of a Parsley implementation of RL, which I'd like to see.  Also, the default implementation is more MVCS-ish than the default CG3 implementation.  What the hell does that mean?  Well, MVC is a broad brush and can be applied to many architectures.  In my opinion, the CG3-Parsley approach uses the Presentation Model as the View, the Parsley IoC/Messaging framework for the controller and injected value objects for the model.  The RL approach uses view mediators and views for the view, which reverses the dependency from CG3.    The RL controller is very similar, but commands are mapped explicitly in the context to their events, rather than using metadata.  The model is also value objects, but it's handled differently.  In CG3, the model is injected into commands and presentation models, then bound to the view.  So, if a command changes a model object, it's reflected in the presentation model, and the view is bound to that attribute on the presentation model. In RL, the command would raise an event to signify model changes, passing the changes as the event payload.  The view mediator listens for the event, handles the event payload to update the view, again through data binding. (NOTE:  You can handle the model this way in Parsley as well, using [MessageHandler] metadata tags, FYI)

It's worth mentioning that when I did the RL port, I added a twist by using the very impressive <a href="http://github.com/robertpenner/as3-signals" target="_blank">as3-signals</a> library from <a href="http://robertpenner.com/flashblog/" target="_blank">Robert Penner</a>.  Signals is an alternative to event handling in Flex, and I really like it.  Check it out.  Anyway, RL and Signals play very well together, but it means I wasn't necessarily comparing apples-to-apples.  Signals is not a requirement of using RL, at all, but the Twittersphere was raving about it and I can see why.  The biggest con to using Signals with CG3 might be some of the peripheral CG3 libraries.  For example, I think you'd end up writing more code to adapt things like the Navigation Library to Signals.  The Navigation Library uses NavigationEvent to navigate between views, which would need to be adapted to Signals.  Of course, I am of the opinion that, if you are going to use something like Signals, you should use it for ALL events and not mix the two eventing approaches.  This is a philosophical issue that hasn't had the chance (in my case) to be tested by pragmatism.

So, which framework do I like better?  After a single demo application, it's hard to make a firm choice.  I really like the CG3 approach, and it's only in beta.  However, I also really like the Signals and RL integration, which I think makes eventing in Flex much easier to code and test.  I am not that big a fan of the SwftSuspenders IoC context, as there doesn't seem to be anyway to change parameters at runtime, which is something I use IoC to handle.  An example is a service URL that would be different for test and production.  I'd like to be able to change that in an XML file without having to rebuild my SWF.  I asked about this on the Robotlegs forum, and was told that it's a roll-your-own answer.  On the other hand, Parsely offers the ability to  create the context in MXML, actionscript, XML, or any mixture of the three.  I like that.  I think the winner could be a Parsley-RL-Signals implementation pulling in the peripheral CG3 libraries, which mixes everything I like into one delicious approach.  MMMMMM.

Anyone have questions about the two frameworks that I didn't cover?  Hit the comments.  Also, if anything I have said/presumed/implied here is flat out wrong, please correct me.  The last thing I want to do is lead people (including myself) down the wrong path.
<h3><strong>Related articles by Zemanta (well, some of them were by Zemanta, others by me)</strong></h3>
<ul class="zemanta-article-ul">
	<li class="zemanta-article-ul-li"><a href="http://blogs.adobe.com/francoisledroff/2010/01/cairngorm_302_release.html">Cairngorm 3.0.2 release</a> (blogs.adobe.com)</li>
	<li class="zemanta-article-ul-li"><a href="http://joelhooks.com/2010/01/16/robotlegs-image-gallery-example-using-as3-signals-and-the-presentation-model/" target="_blank">Joel Hooks' Robotlegs Image Gallery Example using the Presentation Model </a>(I used this for my port to RL)</li>
	<li class="zemanta-article-ul-li"><a href="http://oreilly.com/catalog/9780596154165/">Enterprise Development with Flex</a> (oreilly.com) This book looks interesting, but they (disappointingly) stick to discussing CG2.</li>
	<li class="zemanta-article-ul-li"><a href="http://blogs.adobe.com/tomsugden/2010/02/the_flexible_configuration_opt.html">The Flexible Configuration Options of Parsley</a> (blogs.adobe.com)</li>
	<li class="zemanta-article-ul-li"><a href="http://github.com/eidiot/as3-signals-utilities-async" target="_blank">Eidiot's Signals Async Testing Utility</a> on Github (use this to test your signals)</li>
</ul>
<h3>People You Should Follow on Twitter About This Stuff</h3>
<ul>
	<li><a href="http://twitter.com/jhooks" target="_blank">Joel Hooks</a></li>
	<li><a href="http://twitter.com/eidiot" target="_blank">Eidiot</a></li>
	<li><a href="http://twitter.com/odoenet" target="_blank">Odoenet</a></li>
	<li><a href="http://twitter.com/ruprictGeek" target="_blank">Me</a> (if ya want ;))</li>
</ul>
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Reblog this post [with Zemanta]" href="http://reblog.zemanta.com/zemified/dfb295ed-e759-47f8-96d6-8f5e131bc9e0/"><img class="zemanta-pixie-img" style="border:medium none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=dfb295ed-e759-47f8-96d6-8f5e131bc9e0" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date>2010-04-01 20:16:58</wp:post_date>
		<wp:post_date_gmt>2010-04-01 15:16:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>robotlegs-and-cairngorm-3-initial-impressions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1270137356]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>412</wp:comment_id>
		<wp:comment_author><![CDATA[Cedric]]></wp:comment_author>
		<wp:comment_author_email>orcelletcedric@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://karma9.free.fr</wp:comment_author_url>
		<wp:comment_author_IP>62.161.29.36</wp:comment_author_IP>
		<wp:comment_date>2011-07-13 14:56:59</wp:comment_date>
		<wp:comment_date_gmt>2011-07-13 09:56:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[&gt; No more locators, model or otherwise.  Your model can be injected by the IoC or handled via events.  
&gt; For you Singleton haters, this is a biggie.

I am not so sure IoC means the end of ModelLocator. cf this post:
http://www.springactionscript.org/docs/reference/html/extensions-documentation.html

Like everything, used wisely, I think Singleton is an handy pattern.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>2907451</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>322</wp:comment_id>
		<wp:comment_author><![CDATA[Nikos]]></wp:comment_author>
		<wp:comment_author_email>nkatsikanis@googlemail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>217.39.10.68</wp:comment_author_IP>
		<wp:comment_date>2011-02-16 12:50:28</wp:comment_date>
		<wp:comment_date_gmt>2011-02-16 07:50:28</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Does it take a long time to learning how to get the modules and signals stuff working in other frameworks]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>321</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>320</wp:comment_id>
		<wp:comment_author><![CDATA[Nikos]]></wp:comment_author>
		<wp:comment_author_email>nkatsikanis@googlemail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>217.39.10.68</wp:comment_author_IP>
		<wp:comment_date>2011-02-16 12:45:10</wp:comment_date>
		<wp:comment_date_gmt>2011-02-16 07:45:10</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Nah its all ok :)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>251</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>321</wp:comment_id>
		<wp:comment_author><![CDATA[Nikos]]></wp:comment_author>
		<wp:comment_author_email>nkatsikanis@googlemail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>217.39.10.68</wp:comment_author_IP>
		<wp:comment_date>2011-02-16 12:46:57</wp:comment_date>
		<wp:comment_date_gmt>2011-02-16 07:46:57</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[It took me so long how to figure out how to Go from the basic Rl's use to then using it successfully with modules and also signals, although you can't use signals from modules to communicate with other modules ATM]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>323</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2011-02-17 00:54:48</wp:comment_date>
		<wp:comment_date_gmt>2011-02-16 19:54:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Well, can't tell you from experience, but I wouldn't think so.  Signals is not dependent on Robotlegs or any other framework that I'm aware of. And yes, the initial learning curve on RL can be brutal.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>322</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>253</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2010-08-10 02:12:01</wp:comment_date>
		<wp:comment_date_gmt>2010-08-09 21:12:01</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[No, but I was using CG more than RL.  This stuff is so dependent on one's specific context that I am not sure you should feel bad or good... :)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>252</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>252</wp:comment_id>
		<wp:comment_author><![CDATA[Borek Bernard]]></wp:comment_author>
		<wp:comment_author_email>borekb@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.borber.com/</wp:comment_author_url>
		<wp:comment_author_IP>87.197.104.82</wp:comment_author_IP>
		<wp:comment_date>2010-08-10 01:55:22</wp:comment_date>
		<wp:comment_date_gmt>2010-08-09 20:55:22</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Great article! Don't you find that you write more code with RL than with Parsley? I do which is worrying to be honest (didn't try Signals though).]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>251</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>98.122.10.108</wp:comment_author_IP>
		<wp:comment_date>2010-08-08 00:57:02</wp:comment_date>
		<wp:comment_date_gmt>2010-08-07 19:57:02</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hey Nikos...is it that bad?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>250</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>250</wp:comment_id>
		<wp:comment_author><![CDATA[Nikos]]></wp:comment_author>
		<wp:comment_author_email>nkatsikanis@googlemail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>94.116.107.83</wp:comment_author_IP>
		<wp:comment_date>2010-08-08 00:39:18</wp:comment_date>
		<wp:comment_date_gmt>2010-08-07 19:39:18</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hide this post from flex noobs :)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>205</wp:comment_id>
		<wp:comment_author><![CDATA[odoe]]></wp:comment_author>
		<wp:comment_author_email>odoe@odoe.net</wp:comment_author_email>
		<wp:comment_author_url>http://www.odoe.net/</wp:comment_author_url>
		<wp:comment_author_IP>65.197.193.18</wp:comment_author_IP>
		<wp:comment_date>2010-04-03 00:34:14</wp:comment_date>
		<wp:comment_date_gmt>2010-04-02 19:34:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Nice comparison of CG3/RL. When you discuss being able to change parameters at run time, I've recently being using a config.xml file similar to the FlexViewer method and have RL load it at startup. The XML has info for all my map/gp/query services, then I populate a model with that data. This lets me run off a test server, then change the xml as I build production services. Is that what you are talking about?

I use a method similar to what Joel did in this Address Book example.
http://github.com/joelhooks/robotlegs-examples-AddressBook/blob/master/src/org/robotlegs/examples/addressbook/service/XMLContactService.as
Except I load service URLs instead of data. It's worked out really well, and since AS3 makes it so easy to deal with XML, it works like a treat.

I haven't really looked at Parsley, but one of things I really like with RL is that I have one metadata tag to worry about and that's [Inject]. No need to fuss with others. In Swiz it's [Inject] and [Mediate], but you can get around needing to use [Inject] at all in Swiz if you are so inclined ;).]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>206</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>76.122.65.162</wp:comment_author_IP>
		<wp:comment_date>2010-04-03 00:49:36</wp:comment_date>
		<wp:comment_date_gmt>2010-04-02 19:49:36</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Yup, that is what I am talking about.  I'll look at Joel's example.

Thanks,
Ruprict]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>207</wp:comment_id>
		<wp:comment_author><![CDATA[odoe]]></wp:comment_author>
		<wp:comment_author_email>odoe@odoe.net</wp:comment_author_email>
		<wp:comment_author_url>http://www.odoe.net/</wp:comment_author_url>
		<wp:comment_author_IP>65.197.193.18</wp:comment_author_IP>
		<wp:comment_date>2010-04-03 01:01:44</wp:comment_date>
		<wp:comment_date_gmt>2010-04-02 20:01:44</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Here is how I'm handling loading of Map Services in an XML file at the moment.
http://pastebin.com/DM2yHyy0]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>273</wp:comment_id>
		<wp:comment_author><![CDATA[Philip]]></wp:comment_author>
		<wp:comment_author_email>philip@how-to-code.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.how-to-code.com/</wp:comment_author_url>
		<wp:comment_author_IP>193.35.10.55</wp:comment_author_IP>
		<wp:comment_date>2010-10-04 19:35:09</wp:comment_date>
		<wp:comment_date_gmt>2010-10-04 14:35:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Great article. I love using RL. I need to look at Parsley.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>arrange-act-assert</title>
		<link>http://ruprict.net/2010/04/14/unit-testing-objects-dependent-on-arcgis-server-javascript-api/arrange/</link>
		<pubDate>Tue, 13 Apr 2010 20:55:47 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2010/04/arrange.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date>2010-04-14 01:55:47</wp:post_date>
		<wp:post_date_gmt>2010-04-13 20:55:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arrange</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>267</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2010/04/arrange.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2010/04/arrange.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"450";s:6:"height";s:3:"240";s:14:"hwstring_small";s:23:"height='68' width='128'";s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2010/04/arrange.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Unit Testing Objects Dependent on ArcGIS Server Javascript API</title>
		<link>http://ruprict.net/2010/04/14/unit-testing-objects-dependent-on-arcgis-server-javascript-api/</link>
		<pubDate>Tue, 13 Apr 2010 20:59:05 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Add new tag]]></category>

		<category domain="tag" nicename="add-new-tag"><![CDATA[Add new tag]]></category>

		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag" nicename="arcgis-server"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag"><![CDATA[javascript]]></category>

		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>

		<category><![CDATA[javascript]]></category>

		<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>

		<category domain="tag"><![CDATA[Unit testing]]></category>

		<category domain="tag" nicename="unit-testing"><![CDATA[Unit testing]]></category>

		<guid isPermaLink="false">http://ruprict.net/?p=267</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ruprict.files.wordpress.com/2010/04/arrange.png"><img class="aligncenter size-full wp-image-276" title="arrange-act-assert" src="http://ruprict.files.wordpress.com/2010/04/arrange.png" alt="" width="450" height="240" /></a>

Recently, I've created a custom <a class="zem_slink" title="Dojo Toolkit" rel="homepage" href="http://dojotoolkit.org">Dojo</a> dijit that contains a esri.Map from the <a href="http://resources.esri.com/arcgisserver/apis/javascript/arcgis/" target="_blank">ArcGIS Server Javascript API</a>.  The dijit, right now, creates the map on the fly, so it calls new <strong>esri.Map(...) and map.addLayer(new esri.layers.ArcGISTiledMapServiceLayer(url)),</strong> for example.  This can cause heartburn when trying to unit test the operations that my custom dijit is performing.  I am going to run through the current (somewhat hackish) way I am performing unit tests without having to create a full blown HTML representation of the dijit.

I'll be using <a href="http://visionmedia.github.com/jspec/" target="_blank">JSpec</a> for this example, so you may want to swing over to that site and brush up on the syntax, which is pretty easy to grok, especially if you've done any BDD/spec type unit testing before.

The contrived, but relatively common, scenario for this post is:
<ol>
	<li>My custom dijit makes a call to the server to get information about some feature.</li>
	<li>The service returns JSON with the extent of the object in question.</li>
	<li>I want my map control to go to that extent.</li>
</ol>
Following the <a href="http://www.ayende.com/Wiki/Rhino+Mocks+3.5.ashx#Arrange,Act,Assert" target="_blank">Arrange-Act-Assert</a> pattern for our unit tests, the vast majority of the work here will be in the Arrange part.  I don't want to pull in the entire AGS Javascript API for my unit tests.  It's big and heavy and I am not testing it so I don't want it.    Also, I don't want to invoke the call to the server in this test.  Again, it's not really what I am testing, and it slows the tests down.  I want to test that, if my operation gets the right JSON, it sets the extent on the map properly.
<h2>The Whole Test</h2>
Here is the whole JSpec file:

[sourcecode language="javascript"]
describe 'VersionDiff'

 before_each
   vd = new esi.dijits.VersionDiff();
 end
 describe 'updateImages()'
   it 'should change the extent of the child map'
     //Arrange
     esri={
       Map:function(){
         this.setExtent=function(obj){
           this.extent=obj;
         };
       },
       geometry:{
         Extent:function(xmin,ymin,xmax,ymax){
           var obj={};
           obj.xmin=xmin;
           obj.ymin=ymin;
           obj.xmax=xmax;
           obj.ymax=ymax;
           return obj;
         }
       }
     };
     vd.childMap = new esri.Map();
     var text = fixture(&quot;getFeatureVersionGraphics.txt&quot;)
     text = dojo.fromJson(text)
     //Act
     vd.updateMapToFeatureExtent(text)
     //Assert
     vd.childMap.extent.xmin.should.be 7660976.8567093275
     vd.childMap.extent.xmax.should.be 7661002.6869258471
     vd.childMap.extent.ymin.should.be 704520.0600393787
     vd.childMap.extent.ymax.should.be 704553.8080708608
   end
 end
end

[/sourcecode]
<h2>//Arrange</h2>
The Arrange portion of the test stubs out the methods that will be called in the esri namespace.  Since the goal of the test is to make sure my djiit changes the extent of the map, all I need to do is stub out the <strong>setExtent</strong> method on the Map.  <strong>setExtent</strong> takes an Extent object as an argument, so I create that in my local, tiny esri namespace.  Now I can set the property on my dijit  using my stubbed out map.  Thanks to<span style="text-decoration:line-through;"> closures</span> global variables (ahem), the esri namespace I just created will be available inside my function under test.  Closures are sexy, and I only know enough about them to be dangerous.  Yay!  I don't have to suck in all the API code for this little test.  That <strong>fixture</strong> function is provided by JSpec, and basically pulls in a text file that has the JSON I want to use for my test.  I created the fixture my saving the output of a call to my service, so now I don't have to invoke the service inside the unit test.
<h2>//Act</h2>
This is the easy part.   Call the function under test, passing in our fixture.
<h2>//Assert</h2>
How do I know the extent was changed?  When I created my tiny esri namespace, my <strong>esri.geometry.Extent()</strong> function returns an object that has the same xmin/ymin/xmax/ymax properties of an esri.geometry.Extent object.  The <strong>setExtent()</strong> function on the map stores this object in an <strong>extent</strong> property.  All I have to do is make sure the extent values match what was in my fixture.

I didn't include the source to the operation being tested, because I don't think it adds much to the point.  Suffice it to say that it calls <strong>setExtent()</strong> on the childMap property.
<h2>So What?</h2>
I realize this may not be the greatest or cleanest approach, but it is serving my needs nicely.  I am sure in my next refactor of the unit tests that I'll find a new approach that makes me hate myself for this blog post.  As always, leave a comment if you have any insight or opinion.  Oh, and regardless of this test, you should really look into JSpec for javascript unit testing.  What I show here is barely the tip of what it offers.
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Reblog this post [with Zemanta]" href="http://reblog.zemanta.com/zemified/0d0cf6a2-7f4c-49dd-baad-673cdabc963c/"><img class="zemanta-pixie-img" style="border:none;float:right;" src="http://img.zemanta.com/reblog_e.png?x-id=0d0cf6a2-7f4c-49dd-baad-673cdabc963c" alt="Reblog this post [with Zemanta]" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2010-04-14 01:59:05</wp:post_date>
		<wp:post_date_gmt>2010-04-13 20:59:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-testing-objects-dependent-on-arcgis-server-javascript-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1271273152]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>216</wp:comment_id>
		<wp:comment_author><![CDATA[Kirk]]></wp:comment_author>
		<wp:comment_author_email>kvangork@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://prng.vangorkom.org</wp:comment_author_url>
		<wp:comment_author_IP>75.71.167.219</wp:comment_author_IP>
		<wp:comment_date>2010-04-14 04:17:50</wp:comment_date>
		<wp:comment_date_gmt>2010-04-13 23:17:50</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I'm not seeing the closure.
"esri={" creates a global variable. I'd recommend changing it to "var esri={" and moving it into your before_each section.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>217</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2010-04-14 05:10:53</wp:comment_date>
		<wp:comment_date_gmt>2010-04-14 00:10:53</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Yup, you are exactly right.  The before_each isn't working either....the closure isn't happening.  I will investigate.

Thanks for catching my silliness.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>216</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>apple-mac</title>
		<link>http://ruprict.net/2010/04/26/apples-fruitless-security/apple-mac/</link>
		<pubDate>Mon, 26 Apr 2010 14:42:00 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2010/04/apple-mac1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date>2010-04-26 19:42:00</wp:post_date>
		<wp:post_date_gmt>2010-04-26 14:42:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apple-mac</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>281</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2010/04/apple-mac1.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2010/04/apple-mac1.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"420";s:6:"height";s:3:"420";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2010/04/apple-mac1.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Apple&#039;s Fruitless Security</title>
		<link>http://ruprict.net/2010/04/26/apples-fruitless-security/</link>
		<pubDate>Mon, 26 Apr 2010 14:43:37 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[Apple]]></category>

		<category domain="category" nicename="apple"><![CDATA[Apple]]></category>

		<category domain="tag"><![CDATA[apple]]></category>

		<category domain="tag" nicename="apple-2"><![CDATA[apple]]></category>

		<guid isPermaLink="false">http://ruprict.net/?p=281</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ruprict.files.wordpress.com/2010/04/apple-mac1.jpg"><img class="alignleft size-medium wp-image-283" title="apple-mac" src="http://ruprict.files.wordpress.com/2010/04/apple-mac1.jpg?w=300" alt="" width="300" height="300" /></a>For 20+ years I have relied on <a href="http://blog.geodatabase.com" target="_blank">Jeff</a> for friendship and technical advice.  He is a solid nerd, rooted in things Oracle/Linux with more knowledge of hardware and operating systems than any ten people I know.  In other words, he is no moron.  Recently, his <a href="http://blog.geodatabase.com/2010/04/apples-itunes-store-lacks-fraud.html" target="_blank">iTunes account was hacked</a> and upwards of $300 worth of apps/movies purchased.   Apple's response? Paraphrasing "You need to cancel your credit card and take up disputing the charges with them.  As for Apple, we'll be keeping that money.  Oh, and once you get a new card, please remember to add it back to your disabled iTunes account."  In other words, you just got ramrodded while we watched, did nothing, and profited by it.

Now, I am an Apple fan.  I have an iPhone; I have a G5 (PowerPC-based, old school baby) that I use every day.  I love Mac OSX, finding it superior to the Windows operating systems (although, Windows 7 is pretty damn good) and have been on the cusp of buying a MacBook for a few months now.  I bought my wife an iMac, and she loves it.  In other words, I am not a Windows nerd bashing Apple.  I was once a blind fanboy, encouraging everyone I knew to by a Mac and get an iPhone.  I would passionately debate why Apple products were superior to all comers, sometimes without the benefit of rational thought.

I am an Apple user, and this may be the last straw.

Once the honeymoon of my relationship with Apple products faded into history, I started noticing what Apple gives me as a proponent of their products.  They don't trust me to change a battery or add storage.  They force me to use a singular application to activate and update my phone (iTunes).  Their products are outrageously more expensive when compared to the competition.  A few times a year they have a media circus to unveil new crazy expensive hardware while their king talks down to me like I am expected to embrace whatever floats to the top of his mock turtleneck, even when it's underwhelming (copy/paste).  Apple wardens off their systems, keeping a who's who list of frameworks and products that are allowed inside the velvet ropes (i.e., the striking omission of Flash on the iPhone)  They allow me to pay $99 for the right to develop for their mobile platform, but only if I use a language who's base feature set would have been laughed out of most late-1970's development shops.  Oh, and I can pay another $99/year to have a closed off online  e-mail/contacts/photo/file offering who's initial shininess fades rapidly under the light of actual use.

All this, and now an approach to online fraud protection that only an evil dictator could appreciate.  Apple's software was hacked, my friend was affected, and they basically asked him to suck on it and come back for more.  I have heard many a user/nerd pontificate on why Apple's user base pays a premium to be treated like dirt.  I have wondered aloud why the governments of the UK and the US will drop the "Monopoly" moniker on Microsoft, but allow Apple to dominate and control the mobile market without a peep.  You have to hand it to Apple, they have created the perfect spot for themselves.

I want to have faith in the masses.  I want to hope for the day that the users revolt and demand Apple to stop gouging our wallets and closing off their systems.  I just don't see it coming.  Talking to other die-hard Apple users, they say that Apple should be allowed to control what is allowed on their devices and operating systems.  These are the same people that would have held sit-ins to force Microsoft to allow more than one browser in Windows.  The double-standards are obvious and ubiquitous.

I've been told that I don't have to buy Apple products.  I don't have to subject myself to the whims of black turtlenecks.  This is true.  My hope is now shifting to Microsoft and Google.  Two other behemoths that want my money.  Here's hoping that they realize that my business is their privilege, that my information is worth protecting, and that my choice is still mine.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date>2010-04-26 19:43:37</wp:post_date>
		<wp:post_date_gmt>2010-04-26 14:43:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apples-fruitless-security</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1272293022]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>tagazine-media</wp:meta_key>
		<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:57:"http://ruprict.files.wordpress.com/2010/04/apple-mac1.jpg";s:6:"images";a:1:{s:57:"http://ruprict.files.wordpress.com/2010/04/apple-mac1.jpg";a:6:{s:8:"file_url";s:57:"http://ruprict.files.wordpress.com/2010/04/apple-mac1.jpg";s:5:"width";s:3:"420";s:6:"height";s:3:"420";s:4:"type";s:5:"image";s:4:"area";s:6:"176400";s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";s:1:"1";s:6:"author";s:7:"3307217";s:7:"blog_id";s:7:"3073262";s:9:"mod_stamp";s:19:"2010-04-26 14:43:37";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>222</wp:comment_id>
		<wp:comment_author><![CDATA[Horsie]]></wp:comment_author>
		<wp:comment_author_email>jeff@buturff.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>75.181.74.52</wp:comment_author_IP>
		<wp:comment_date>2010-04-26 19:52:52</wp:comment_date>
		<wp:comment_date_gmt>2010-04-26 14:52:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Another great article about Apple security.   http://www.fiercecio.com/techwatch/story/ex-hacker-apple-not-more-secure-microsoft/2010-04-20]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>legend</title>
		<link>http://ruprict.net/2010/08/20/create-legend-images-from-arcgis-server-with-ruby/legend/</link>
		<pubDate>Fri, 20 Aug 2010 00:48:53 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2010/08/legend.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date>2010-08-20 05:48:53</wp:post_date>
		<wp:post_date_gmt>2010-08-20 00:48:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>legend</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>287</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2010/08/legend.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"250";s:6:"height";s:3:"290";s:14:"hwstring_small";s:22:"height='96' width='82'";s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2010/08/legend.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2010/08/legend.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Legend for Diversity Map Service]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Create Legend Images from ArcGIS Server with Ruby</title>
		<link>http://ruprict.net/2010/08/20/create-legend-images-from-arcgis-server-with-ruby/</link>
		<pubDate>Fri, 20 Aug 2010 01:09:38 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag" nicename="arcgis-server"><![CDATA[ArcGIS Server]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

		<guid isPermaLink="false">http://ruprict.net/?p=287</guid>
		<description></description>
		<content:encoded><![CDATA[Recently, I needed to create a legend for an ArcGIS Server map service, and was amazed that it was still a non-trivial activity.  Googling it, I saw a few posts with (what I considered to be) WAY too complicated C# code for such a simple task. Also, there is no great way to get a legend out of ArcMap (for gawd's sake) which left me thinking "Surely, there is an easy way to do this." (expletives removed)

I have been mucking about (again) with ruby and Rails, which is great and depressing all at the same time.  I don't use much ruby in my 9-to-5, as it's neck-deep in Microsoft, so I try to shoehorn ruby into my work however I can.  In this case, I remembered the venerable <a href="http://blog.davebouwman.com/" target="_blank">Dave Bouwman's</a> <a href="http://www.slideshare.net/dbouwman/using-arcgis-server-with-ruby-on-rails?from=ss_embed" target="_blank">Ruby-Fu presentatio</a>n at DevSummit (That guy is always doing the stuff I want to be doing.  I don't like him.) and that he had found a ruby library that spoke both REST and SOAP to ArcGIS Server.  Being an experienced AGS dev-monkey, I also know that you can get legend and symbology information from the SOAP API.  Thusly, a not-terribly-original-or-visionary idea was born:  Use ruby to create a legend.

My main requirement is that it easy, something on the order of:
<ol>
	<li>Tell the thing the URL of my map service.</li>
	<li>Tell the thing I want a legend for the map service.</li>
	<li>Save the legend given to me by the thing to a file.</li>
</ol>
So, I got my shoehorn out and when in search of ArcGIS-flavored ruby bits.
<h2>arcserver.rb</h2>
I hunted down the slides for Dave's preso to find the name of the ruby library he mentioned.  It is arcserver.rb (<a href="http://github.com/colincasey/arcserver.rb" target="_blank">github</a>) written by Colin Casey, an extremely patient and approachable developer.  I sent him a message with my Grand Legend Plan, and he say "Do it, man."  arcserver.rb already did #1 and #2 from my list above.  All I had to do was #3.  Once you've installed the arcserver.rb gem (so, type 'gem install arcserver.rb' at your command prompt and watch it install all kinds of stuff....WEEE!)  (run this in irb):

[sourcecode language="ruby"]
require 'rubygems'
require 'arcserver'
server = ArcServer::MapServer.new(&quot;http://server.arcgisonline.com/ArcGIS/services/Demographics/ESRI_Diversity_US_2D/MapServer&quot;)
server.get_legend_info
[/sourcecode]

That gives you a text representation of all the legend information for the service.  So, all I had to do was loop through all the symbology and write out the symbols.  Easy, right?  Well, in ruby evertyhing is easy (no fanboy bias there at all).  I needed an image processor, and the Old Man of Ruby Image Processors is <a href="http://rmagick.rubyforge.org/" target="_blank">RMagick</a>.  Now, bear in mind that I did all of this on a Windows box, but I used Cygwin.  You can install RMagick 2 on Windows natively, so I hear/read, but I didn't do it that way.  However you do it, you're gonna need RMagick, and therefore, ImageMagick.  (um, everything in ruby is easy *cough*)

Got RMagick installed?? Awesome! Wasn't that easy?  Are you giving me the finger?  Let's continue.  One of my goals in contributing to Colin's project was to not pollute it too much.  Being pretty much a ruby novice, I figured the best thing to do was to keep as much of my code in its own class/file, so Colin could easily remove/rewrite/laugh-and-point-at it how he saw fit.  The final (cleaned and reorganized by Colin) version consists of a LegendImage class that you can see <a href="http://github.com/colincasey/arcserver.rb/blob/master/lib/arcserver/util/legend_image.rb" target="_blank">here on Github</a> (I don't want to post a ton of code here, it's just unwieldy)  I am not going to walk through the code, but I'd like to point out that it's &lt;70 lines and very readable.  For a first run, I was very happy.  If people use it or I find the need, the next step would be to handle options (dpi, width, height, layers to exclude, etc.) but, for now, this works.  Also, I've heard that 10.1 is going to fix this legend issue and make it easy to create them, so putting a ton of work into this prove to be fruitless.

Now, to create a legend image, do the same thing we did above, but add (if you've installed RMagick since you started irb, you need to restart it):

[sourcecode language="ruby"]
require 'RMagick'
server.get_legend_image.write(&quot;legend.png&quot;)
[/sourcecode]

which will write a PNG file called "legend.png" in the from which directory you fired up 'irb'.  Kick ass.  Three lines of code (less if you chain) to get a (very basic, but usable) legend from ArcGIS Server.  Here is the legend it creates using the Diversity service from ArcGISOnline.

<a href="http://ruprict.files.wordpress.com/2010/08/legend.png"><img class="size-full wp-image-294 alignnone" title="legend" src="http://ruprict.files.wordpress.com/2010/08/legend.png" alt="Legend for Diversity Map Service" width="250" height="290" /></a>

I thought that was pretty cool and useful.  There may be other, more elegant ways out there to get a legend from an ArcGIS Server map service, and I am sure someone will mention them in the comments.  Even so, I enjoyed doing this little exercise and I appreciate Colin letting me contribute to his project.  Here are all the irb commands needed once you have the prerequisites and the gem installed:

[sourcecode language="ruby"]
require 'rubygems'
require 'RMagick'
require 'arcserver'
server = ArcServer::MapServer.new(&quot;http://server.arcgisonline.com/ArcGIS/services/Demographics/ESRI_Diversity_US_2D/MapServer&quot;)
server.get_legend_image.write(&quot;legend.png&quot;)
[/sourcecode]

My next task is to use this library in a Rails-based web mapping application.  Hopefully, I'll get to that in the next week or so.
<div class="zemanta-pixie" style="margin-top:10px;height:15px;"><a class="zemanta-pixie-a" title="Enhanced by Zemanta" href="http://www.zemanta.com/"><img class="zemanta-pixie-img" style="border:none;float:right;" src="http://img.zemanta.com/zemified_e.png?x-id=cbacd1fa-e1b3-4bf7-96f9-f1a1e8cd5851" alt="Enhanced by Zemanta" /></a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date>2010-08-20 06:09:38</wp:post_date>
		<wp:post_date_gmt>2010-08-20 01:09:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>create-legend-images-from-arcgis-server-with-ruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1282266585]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1282266579]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>256</wp:comment_id>
		<wp:comment_author><![CDATA[ArcGIS Server Legend Resource Application &laquo; Fumbling Towards Geekstacy]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://ruprict.net/2010/08/31/arcgis-server-legend-resource-application/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.247.131</wp:comment_author_IP>
		<wp:comment_date>2010-08-31 00:10:08</wp:comment_date>
		<wp:comment_date_gmt>2010-08-30 19:10:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Aug   Building on my last post, I wanted to create a RESTful app that serves up legends from ArcGIS Server.  Ideally, this app [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>255</wp:comment_id>
		<wp:comment_author><![CDATA[Jonathan Hartley]]></wp:comment_author>
		<wp:comment_author_email>tartley@tartley.com</wp:comment_author_email>
		<wp:comment_author_url>http://tartley.com</wp:comment_author_url>
		<wp:comment_author_IP>82.153.210.200</wp:comment_author_IP>
		<wp:comment_date>2010-08-20 23:51:06</wp:comment_date>
		<wp:comment_date_gmt>2010-08-20 18:51:06</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[This is really cool, thanks for posting!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>ArcGIS Server Legend Resource Application</title>
		<link>http://ruprict.net/2010/08/31/arcgis-server-legend-resource-application/</link>
		<pubDate>Mon, 30 Aug 2010 19:09:52 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ArcGIS Server]]></category>

		<category domain="tag" nicename="arcgis-server"><![CDATA[ArcGIS Server]]></category>

		<category><![CDATA[Ruby]]></category>

		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>

		<category domain="tag"><![CDATA[Ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[Ruby]]></category>

		<guid isPermaLink="false">http://ruprict.net/?p=301</guid>
		<description></description>
		<content:encoded><![CDATA[Building on my<a href="http://ruprict.net/2010/08/20/create-legend-images-from-arcgis-server-with-ruby/" target="_blank"> last post</a>, I wanted to create a RESTful app that serves up legends from ArcGIS Server.  Ideally, this app would not need any configuration.  I thought this was very doable, since I could just put the URL information for the map service into the URL for the legend resource service by my new RESTful app.  All in all, this was much easier than even I predicted.  Oh, and I have to thank Colin Casey (again) for refactoring my code to look more Ruby-way like.

At first, I thought of using a Rails app for this, which I did stand up and get running.  However, it seemed like way too much for just a simple app.  There is no database, no real views, and not much that required all the conventions that Rails uses.  I have been hearing tons about <a href="http://www.sinatrarb.com/" target="_blank">Sinatra </a>(including a running joke that it's where experienced Rails developers eventually land) and how lightweight it is.  And, it is VERY lightweight.  I am not going to post any examples of Sinatra here, but a rudimentary scan of the Sinatra home page is enough to show that it's not a lot of weight.  So, I selected Sinatra and had the app working in a  few hours (most of which were me struggling with my RubyNoob issues)  The result is <a href="http://github.com/ruprict/legend_resource" target="_blank">legend_resource</a> and is posted on github for your criticism and mockery.
<h2>Using LegendResource</h2>
It's very easy to get legend_resource up and running.
<ol>
	<li>Pull down the code (git clone git@github.com:ruprict/legend_resource.git)</li>
	<li>Install Bundler, if it isn't already (gem install bundler --pre)</li>
	<li>You might have to install RMagick, if you have not already.  As I alluded to in my last post, you should go the the RMagick site and figure out the best way to install it for your operating system.  (#copout)</li>
	<li>type 'bundle install' from the git repo root.   This should install all the necessary gems.</li>
	<li>type 'rackup'. This should fire up the application on port 9292.</li>
</ol>
Now that the app is up and running, you can generate a legend for any map service.  For example, if you want a legend for the USA_Percent_Male map service in the Demographics folder on server.arcgisonline.com, click on this link:

<a href="http://localhost:9292/legend/server.arcgisonline.com/Demographics/USA_Percent_Male" target="_blank">http://localhost:9292/legend/server.arcgisonline.com/Demographics/USA_Percent_Male</a>

Or create an HTML page with an img tag and set that link to the src.  Like this,

<img class="alignnone" title="Legend" src="http://agslegend.heroku.com/legend/server.arcgisonline.com/Demographics/USA_Percent_Male" alt="Neat, eh?" width="250" height="475" />

That's it.  Neat, huh?

The URL scheme is pretty simple:  http://&lt;webserver&gt;/legend/&lt;mapserver&gt;/&lt;mapservicepath&gt;, where
<ul>
	<li>webserver is whereever the legend_resource app is currently hosted.</li>
	<li>mapserver is your ArcGIS server</li>
	<li>mapservicepath is the path to the service on mapserver.  This works for services in the root or in a folder.  The link above was in a folder, for example.</li>
</ul>
<h2>Config Options</h2>
The configuration options for legend_resource are few right now.  Out-of-the-github, I want it to just work, and it does.   It writes the files to the local file system if you don't tell it otherwise.  Right now, the only other option is a Google Storage for Developers backend that exists because I received my invite to it this morning.  If you want to use that, you have to:

1) Change the gstore.yaml file to add your access_key and secret.

2) Comment out the line in config.ru that sets up the GStoreLegend as the file handler.

[sourcecode language="ruby"]
run LegendResource
# Uncomment this line to use Google Storage (don't forget to change the gstore.yml file)')
#LegendResource.set :filehandler, GStoreLegend
[/sourcecode]

I did that for a Heroku app that I am hosting at http://agslegend.heroku.com (the image above is from said Heroku app) that you are free to use to crank out a few legends.  Just bear in mind that the map service will have to be exposed to the web for my Heroku app to see it.

I hope someone else finds this useful.  It was a ton of fun to make and I learned a lot about ruby in the process.  I realize that my code is pretty noobish from the Ruby standpoint, so feel free to fork the repo, refactor, and issue pull requests.  That's how I learn.  Also, if you'd like to see other options for the legends, hit me on github or leave a comment.

Happy Legending!

UPDATE:  One thing I don't think I made clear is that the REST interface for this service only handles GET and DELETE.  If you HTTP GET to the url, it will either create or return the legend.  If you HTTP DELETE to it, it deletes the legend, so, the next GET will create it anew.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date>2010-08-31 00:09:52</wp:post_date>
		<wp:post_date_gmt>2010-08-30 19:09:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arcgis-server-legend-resource-application</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1283262640]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1283195396]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>261</wp:comment_id>
		<wp:comment_author><![CDATA[odoe]]></wp:comment_author>
		<wp:comment_author_email>odoe@odoe.net</wp:comment_author_email>
		<wp:comment_author_url>http://odoe.net</wp:comment_author_url>
		<wp:comment_author_IP>166.205.141.204</wp:comment_author_IP>
		<wp:comment_date>2010-09-01 04:09:18</wp:comment_date>
		<wp:comment_date_gmt>2010-08-31 23:09:18</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[It's the RMagick windows binary. It's one release behind the arcserver.rb dependency. You said you used cygwin in last blog post, so I think I'll try that.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>260</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2010-09-01 01:46:49</wp:comment_date>
		<wp:comment_date_gmt>2010-08-31 20:46:49</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Good grief.  Google Storage takes a dump on me one day into using it.  I just spent the last hour writing an S3 version for the heroku app.  GRRRR.

Odoe, try rack 1.1.0...I think I saw this at one point and moved away from rack 1.2 b/c of it.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>259</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>259</wp:comment_id>
		<wp:comment_author><![CDATA[odoe]]></wp:comment_author>
		<wp:comment_author_email>odoe@odoe.net</wp:comment_author_email>
		<wp:comment_author_url>http://odoe.net</wp:comment_author_url>
		<wp:comment_author_IP>166.205.141.204</wp:comment_author_IP>
		<wp:comment_date>2010-08-31 23:31:12</wp:comment_date>
		<wp:comment_date_gmt>2010-08-31 18:31:12</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I had to change rack in your gemfile from 1.0.0 to 1.2.1 as that is what installed for me somehow. Here is the error I get http://shortText.com/5lpmuw8lnt
I have Ruby 1.9.2p0 installed, should I use a different one?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>257</wp:comment_id>
		<wp:comment_author><![CDATA[odoe]]></wp:comment_author>
		<wp:comment_author_email>odoe@odoe.net</wp:comment_author_email>
		<wp:comment_author_url>http://odoe.net</wp:comment_author_url>
		<wp:comment_author_IP>166.205.141.204</wp:comment_author_IP>
		<wp:comment_date>2010-08-31 21:30:20</wp:comment_date>
		<wp:comment_date_gmt>2010-08-31 16:30:20</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Nice work man! I'm trying this in windows and I think I got past my RMagick hurdles, but I got to the rackup portion and I get syntax errors in arcserver.rb } and other things. With the issues I had in Windows, I think I'll try this at home with Ubuntu
Thanks!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>258</wp:comment_id>
		<wp:comment_author><![CDATA[Glenn]]></wp:comment_author>
		<wp:comment_author_email>glenn_goodrich@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2010-08-31 21:54:24</wp:comment_date>
		<wp:comment_date_gmt>2010-08-31 16:54:24</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[What errors are you seeing?  Once you get past RMagick, it should be all downhill from there.  What version of Ruby are you using?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>257</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>262</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2010-09-01 05:19:19</wp:comment_date>
		<wp:comment_date_gmt>2010-09-01 00:19:19</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[FYI, I added an S3 backend, so the bundle install brings in a whole lot of stuff now.  If you just want to try it local, you can comment out  gstore, aws-s3 in the Gemfile and it should go a bit smoother.  Also, installing RMagick on Cygwin link:

http://ianma.wordpress.com/2009/05/14/ruby-on-rails-imagemagick-and-rmagick-on-cygwin/]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>261</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>2011 ESRI Dev Summit: Prologue</title>
		<link>http://ruprict.net/2011/01/31/2011-esri-dev-summit-prologue/</link>
		<pubDate>Mon, 31 Jan 2011 15:35:02 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<guid isPermaLink="false">http://ruprict.net/?p=310</guid>
		<description></description>
		<content:encoded><![CDATA[Yay!  One of my presentations was selected for the User Presentation track at ESRI Developers Summit.  It is called "You are Legend" and it shows how I created a jQuery plugin that creates an interactive TOC/Legend combination for your jsapi map.  I am kind of surprised it was chosen, since it didn't seem like I was getting many votes and the whole TOC/Legend concept is, <a title="Mr. Bowman's TOC Rant" href="http://blog.davebouwman.com/heading-to-the-geodesign-summit" target="_blank">in many people's mind</a>, a big usability no-no.  I really did it because most of my clients want one and I like jQuery and I like javscript and I had to do something for the ESRI Charlotte Developers Meetup.  The DevSummit version of the presentation will be, I am hoping, much enhanced and a bit more polished, if for no other reason than I won't likely be 3 beers into the night before the talk (the Charlotte meetup was in a pub).

Last year I thought the user presentations were really, really good.  If you want to network with other developers, attend as many of these as you can and then ask questions after the talk.  I know that I appreciated the questions after my talk last year and, as a result, have added Twitter contacts with which I can now discuss ongoing development issues.  Also, if you're headed to DevSummit, let me know (comment here or @ruprictGeek on the twittersphere) and maybe we can plan a couple of pub-based nerd sessions.  Here are some of (what I consider) other interesting sessions:
<ul>
	<li><a href="http://ideas.arcgis.com/ideaView?id=087300000008INU&amp;returnUrl=%2Fapex%2FideaList%3Fc%3D09a300000004xET%26category%3DDevSummit%2B2011%26sort%3Dpopular" target="_blank">Tip, Tricks, and Best Practices for REST architecture</a></li>
	<li><a href="http://ideas.arcgis.com/ideaView?id=087300000008IOw&amp;returnUrl=%2Fapex%2FideaList%3Fc%3D09a300000004xET%26category%3DDevSummit%2B2011%26sort%3Dpopular" target="_blank">Coding Dojo - Sharpening Your Skills</a></li>
	<li><a href="http://ideas.arcgis.com/ideaView?id=087300000008IPf&amp;returnUrl=%2Fapex%2FideaList%3Fc%3D09a300000004xET%26category%3DDevSummit%2B2011%26sort%3Dpopular" target="_blank">High Performance Feature Cache with NoSQL for ArcGIS Server</a></li>
	<li><a href="http://ideas.arcgis.com/ideaView?id=087300000008IRb&amp;returnUrl=%2Fapex%2FideaList%3Fc%3D09a300000004xET%26category%3DDevSummit%2B2011%26p%3D2%26sort%3Dpopular" target="_blank">Using Google AppEnging and Fusion Tables with ArcGIS Server</a></li>
	<li><a href="http://ideas.arcgis.com/ideaView?id=087300000008IKB&amp;returnUrl=%2Fapex%2FideaList%3Fc%3D09a300000004xET%26category%3DDevSummit%2B2011%26p%3D2%26sort%3Dpopular" target="_blank">Responsive Geo-Web Design: HTML5 is Cool, But Maybe Not for Everyone</a></li>
</ul>
I am not sure if all of these made the cut, but they do look interesting.  I didn't put any Python or Silverlight presos on my list, simply because I don't use that stuff much, but if that is your cup-o-tea there are a lot of offerings.  Another thing that surprised me was that my Robotlegs presentation did not get selected.  Out of the two I entered, I thought that one would get the votes.  Basically, I was going to walk through using Robotlegs to create a Flex Viewer widget.  The ArcGIS Flex Viewer is nice, but I don't like that they rolled their own framework.  There are so many well-supported and, frankly, superior frameworks out there (Robotlegs, Swiz, PureMVC, Cairngorm3) that would have allowed ArcGIS Flex devs to leverage those communities.  I am trying to enter a widget in the Flex-a-widget challenge that uses Robotlegs, so we'll see if I can get that done.

Try to get to DevSummit if you are able.  If you are a ArcGIS Developer, this is by far the best conference of the year.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date>2011-01-31 20:35:02</wp:post_date>
		<wp:post_date_gmt>2011-01-31 15:35:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2011-esri-dev-summit-prologue</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1296488107:3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1296488103]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>311</wp:comment_id>
		<wp:comment_author><![CDATA[Kirk van Gorkom]]></wp:comment_author>
		<wp:comment_author_email>kirk@forgeapps.com</wp:comment_author_email>
		<wp:comment_author_url>http://prng.vangorkom.org</wp:comment_author_url>
		<wp:comment_author_IP>24.8.138.254</wp:comment_author_IP>
		<wp:comment_date>2011-02-01 02:19:04</wp:comment_date>
		<wp:comment_date_gmt>2011-01-31 21:19:04</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Coding dojo sounded good, but the abstract was 75% plagiarized from PragProg and other sources.

As for Robotlegs...well I'm just surprised any of the flex/silverlight stuff made it through. HTML5 is the new hotness.

Looking forward some GGD at the Summit.

--Kirk
@kvangork]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>312</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2011-02-01 03:51:31</wp:comment_date>
		<wp:comment_date_gmt>2011-01-31 22:51:31</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[BTW, Kirk, I wanna talk about Rails and GIS and how that's going for you.  I'll buy you a beer (or 5) for the privilege.

See you at devsummit.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>311</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Am I THAT Developer?</title>
		<link>http://ruprict.net/?p=313</link>
		<pubDate>Tue, 15 Feb 2011 21:27:03 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<guid isPermaLink="false">https://ruprict.wordpress.com/?p=313</guid>
		<description></description>
		<content:encoded><![CDATA[Recently, I took part in some Twitter based guffawing at a county site that was created using the ArcGIS API for Silverlight.  The site is slow and it has so much unneccessary effects and poor user interaction that using it on a regular basis is going to be mind-numbing for that county's inhabitants.  We in the Twittersphere chortled and snickered at the site, calling it "special" and wondering if anyone at ESRI would come forth and take pride in such a work.  In fact, employees at ESRI got in on the act, making sure that everyone knew that they had nothing to do with the creation of that site.

This Twitter mockery occurred about 10 minutes after I submitted my entry for the <a href="http://www.esri.com/events/devsummit/get-involved/widget-challenge.html" target="_blank">Flex-A-Widget Challenge</a> and tweeted my accomplishment.  My next tweet was my entry into the dogpiling on the county's Silverlight site.  Soon after that, one of my twitterpeers basically called me out.  The tweet said, paraphrasing, "You can't come down on the site, since you just put an entry into the Flex-A-Widget challenge, which propagates sites just like this one."  A bit taken aback, but not wanting to seem so on Twitter, I replied saying I just wanted the t-shirt.  Then, the guilt set in.

As silly as it sounds, I feel a bit of shame for crapping all over that Silverlight site.  Sure, it needs work, and sure, it is far from perfect.  However, someone worked hard on it and thought it was good enough to expose to the public.  My guess is that it's understaffed, overworked, self-trained county resources that, at least temporarily, felt pretty good about releasing something their constituents could use.  And now, here I was, without any clue of who did the site or why it ended up like it did, bullying that site.  And what did my bullying get me? Lumped in with very people that I was mocking.  This has all the makings of an After School Special where I am the bully-turned-good.  How did I get here?

The truth is, I have released massive, Flex-based sites to clients that are behemoth.  Given the choice, I would have gone with an HTML/CSS/javascript site, but I wasn't given the choice.  So, we did the best we could.  In some cases, the clients were dazzled right out of their shoes by a site/web application that would have garnered much of the same snickers from the Twitterati that the Silverlight site.  In other cases, the client was not happy at all, for many of the reasons that plague these huge, RIA sites.  In all cases, I did what I could to sell the client, our internal people, whoever would listen on the reasons to stay with web standards and was rebuffed.  So, I guess I was given a choice: deliver what the client/my boss asked for or quit.

I used to be that developer.  The one that thought anyone not using web standards or ruby or whatever was ignorant and not worth their salt as a developer.  To be honest, I still slip into that role (especially when it comes to Sharepoint...) Over time, however, I have found that position to be distracting.  A narrow, techonology-first focus is hardly ever the right approach.  It's hard not to have that approach.  Really hard.  I want to work in Ruby and Rails.  It's cool and fun and makes me look cool.  When I was told we were doing our first Flex site,I was <a href="http://ruprict.net/2009/01/10/forced-to-flex">not thrilled</a>.  However, I do like ActionScript, and Flex (especially Flex 4) has some really cool stuff.  The community is great, as I find it's made up of people that are into RIA and Open Source (many of them seem to have come from Java).  I'll say it out loud:  I like Flex.

Returning to the shame of mocking that county site, I wonder if the people that made it know its weaknesses.  Is anyone going to give them feedback?  Do they know we all took a Twitter dump on it?  I bet not.  In my opinion, the biggest flaw of the site is it looks like it was never put in front of "real" users before it was released.  I guess the main objective of this site is Parcel Information.  If you just leave the cursor over the map, the site automatically identifies a parcel and some other widget slides in from the right and tells me if I hover over THAT, I can see more data about the parcel I am (inadvertantly) hovering over.  It's a bad user experience, as it seems they tried to minimize mouse clicks or over-fancify the parcle identification process.  I think they'd have been better off just letting the user click on the site, but agains, that's just my opinion.  Furthermore, the RIA frameworks seem to lead people down the path of EVERYTHING having to slide-up/down/right/left or fade-in/out or be draggable over the map.  It leads to a site that, once you've been there more than once or twice, makes you nauseous with effects.  I may be old, but I think a good, old-fashioned toolbar that doesn't block any of the map is a winner.  Oh, and these gigantic compass pan widgets need to go the way of the dodo.

So, what's the point of this post?  When I was first learning web development, I got deep into the web standards movement.  People like Jeffrey Zeldman were (and are, really) legends and I read their books, blogs, tweets, and anything else they spewed forth.  I would spend time viewing the source of a web page so I could see if they used a table-based design, at which point I would feel superior and tell anyone near me (which was usually, to her detriment, my wife) why the site was crap.  My point is, I don't want to be that guy.  I am going to contact that county and ask them if they want another web developer's opinion on their site.  Maybe they'll make it better.

The only thing I've learned for sure as a web developer/programmer is that I am not all that and a bag of chips.  I am not one of the cool kids.   I am just a devloper trying to solve someone's business issue, the best way I know how.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date>2011-02-16 02:27:03</wp:post_date>
		<wp:post_date_gmt>2011-02-15 21:27:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1297823418:3307217]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Review: Building Location-Aware Applications</title>
		<link>http://ruprict.net/2011/02/25/review-building-location-aware-applications/</link>
		<pubDate>Fri, 25 Feb 2011 14:46:44 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category domain="tag"><![CDATA[Books]]></category>

		<category domain="tag" nicename="books"><![CDATA[Books]]></category>

		<category><![CDATA[books]]></category>

		<category domain="category" nicename="books-recommendations"><![CDATA[books]]></category>

		<category domain="tag"><![CDATA[lbs]]></category>

		<category domain="tag" nicename="lbs"><![CDATA[lbs]]></category>

		<guid isPermaLink="false">http://ruprict.net/?p=307</guid>
		<description></description>
		<content:encoded><![CDATA[Recently, <a href="http://twitter.com/manningbooks" target="_blank">@manningbooks</a> asked for reviewers of "<a href="http://manning.com/ferraro/" target="_blank">Location-Aware Applications</a>" by Richard Ferraro and Murat Aktihanoglu.  I jumped at the chance, since this book has been on my To Read List since I saw its announcement.  I like my reviews to give an overall thumbs-up or thumbs-down before getting into the details, so I'll do that here.  Overall, the book is very much worth reading (so, that's a "thumbs up").  If you are new to Location Based Services (LBS) applications or if you work in only a small bit of that huge landscape, then you will gain breadth of knowledge from reading this book.  Now, on to the details...

The first chapter dives into the history of LBS and how we arrived to the present day.  It defines the "LBS Value Chain" (mobile device --&gt; content provider --&gt; communication network --&gt; positioning component) and does a comparison of the various technologies used to obtain location information.  GPS, CellID, and WiFi Positioning are described and compared at an appropriate detail.  A discussion of LBS vs Proximity Based Services (those services that where a phone talks to the nearest phone(s)), was interesting, as I had never really distinguished the two. The chapter wraps up by listing the challenges of developing LBS applications (cost, myriad of devices, privacy issues, etc) and defining the Location Holy Grail that will push the future of LBS apps.  This chapter will allow you to speak intelligently about developing LBS apps, something I really did not have going into the book.

Chapter 2 focuses on Positioning Technologies, such as Cell Tower Triangulation, GPS, etc.  Again, I learned a ton by reading about the various approaches to positioning tech, including things like Assisted-GPS (A-GPS) and the Open Cell ID movement.  I have been annoying my wife in the car by actually timing how long it takes our GPS to find the first satellite, which is called Time to First Fix (TTFF) ("Will you please just drive?").  Did you know that, not only did the military develop GPS but, it uses a more precise GPS its commercial counterpart?  I want to get me some of that "pure" GPS, I bet that is some good s[tuff].

Chapter 3 deals with mapping and the various APIs that exist on the web.  As an "experienced" geo-developer, I didn't learn much about the APIs that I did not already know.  I did learn a bit about Cloudmade, which looks pretty solid as an open source mapping (with a really cool style editor).  It was interesting to read about which providers used which data (Google [used to use] TeleAtlas, for example, which I had forgotten was wholly owned by TomTom)  Also, the chapter had a very simple example in many of the mapping APIs (including Mapstraction, which I thought was cool) allowing a quick glance at how the differ.  Finally, the item I found most interesting was the discussion on the licensing of the APIs.  I've known that Google won't let you put their maps behind a login, but Yahoo has some weird clause that says you can't use any data on top of their map that is newer than 90 days.  Weirdos.

Chapter 4 deals with content from both  licensing and distribution format aspects.  This was the only chapter, for you ArcDevelopers out there, that mentioned ESRI on any level.  The major license categories were:  Pay, Free to Use (which means, look at our terms of service), and Open Source.  I didn't realize that there was an open source license, called Open Database License (ODbL), that was created specifically for OpenStreetMap.  The content distribution formats mentioned were GeoRSS (both flavors: GML and Simple), GeoJSON, and KML.  Again, for you ArcDevelopers, they don't mention ESRI's GeoREST specification format (as well they shouldn't....sorry, tangent)  Chapter 4 has a couple of code examples as well for "mashups", which I couldn't make work.

Chapter 5 runs through the various "needs" of Consumer LBS Applications.  Existing applications are used to exemplify how these needs can be met.  For example, the Need to Navigate uses Ulocate and the Telmap app, whereas the Need to Connect discusses things like Google Latitude (and it's lack of adoption) Whrrl, and Loopt.  For you iPhone users/devs, there is a nice table of iPhone LBS-social media apps.  I learned of a game called GPS Mission in the Need to Play, which I plan to try out.    The last bit of the chapter talks about Augmented Reality, citing the lack of AR apps that have a social media tie-in.

Chapter 6 describes the various mobile platforms and how to develop for each one.   The list here is overwhelming.  In a nutshell, I took away that Java is still the most widespread (Java ME, that is), the iPhone and Android approach are gaining rapidly, and Symbian is going to die.  The mention of Palm's WebOS is brief, but it cites how marketing can kill a good idea.  The WebOS is probably the easiest platform to develop against, and it has things like true multitasking, which neither the iPhone or Android can tout.  (FTR, Android's multi-tasking can be "true", but most apps still write their state to persistent storage on loss of focus.   This is due to the fact that the OS will start killing out-of-focus apps if memory becomes a premium.)   The chapter also runs through how to develop a simple app for most of these platforms.  Comparing the development approach of Android to iPhone is scary, as the Android approach is simple Java and the iPhone requires multiple files in a proprietary language.  There is no mention of soon-to-be-released Windows Phone, which I found a bit surprising.  The book discusses Windows Mobile 6.5, which I can't imagine anyone is using any longer.

Chapter 7 deals with Connectivity Issues, focusing on some of the terms introduced earlier in the book, like quick TTFF.  It covers things like making sure you tell the user when you are using their GPS (and, therefore, draining their battery) and wraps up with a look at some of the mobile OS location APIs.  All in all, I thought this was the thinnest (content-wise) chapter.

Chapter 8 gets into the stuff I that I was most-clueless about, monetizing LBS.  The various ways that you can charge your users are covered, like one-off charges, subscriptions, in-app charging, etc.   Other ways to generate money were more business focused, like charging for real-estate on your massively popular site or location data charging.  I really enjoyed this chapter.

Chapter 9 goes back to nerd land, but on the server-side.  It offers various ways on how to manage data on the server, from users to map tiles to POIs to spatial RDBMS data.  PostGIS and MSSQL get a decent mention here, with lighter comment on Oracle and MySQL.  Some of the LBS servers are given press here, mainly MapServer.  ArcGIS Server gets another very light mention here, as well as MapInfo, MapPoint, GeoMedia (Intergraph) and Maptitude.  All in all, I thought this chapter was too light on server-side coverage, which I think would be pretty important if you were hosting your own super-macdaddy geolocation web application.

Chapter 10 deals with the subject that no one likes to deal with: Privacy.  The chapter does a good job explaining "Locational Privacy" and relating it to the more mainstream risks of all informational privacy.  Privacy is probably the largest issue with your LBS app, and everyone from the mobile operator down to your user is going to want to know how you handle it and, in some cases, will force you to handle it their way.  Basically, the best way to keep data private is to not collect it.  If you have to collect it, don't store it.  If you have to store it, anonymize it.  If you can't do that, encrypt-the-hell out of it.  Another good chapter.

Chapter 11 goes through considerations when distributing your application.  In the mobile arena, there are tons of different deployment scenarios, not to mention big issues like price and timing of release.  Plus, you can deploy to an OS (Android), a mobile operator (Vodaphone), a  handset (iPhone), or independently.   A lot of stuff to consider before you just focus on iPhone and Android (and maybe, Win 7)

The last chapter discusses business strategy to securing your idea.  This is a bunch of stuff that, as a developer, you don't want to do, but you have to if you want to make huge piles of money.  Things like writing your business plan and getting partnerships are mentioned, which means you'll have to get our of the nerd cave in your mom's basement if you want this app to take off.  It ends by running through the trademark and patenting process, which sounds a lot like getting a colonoscopy, only more enjoyable.

Again, I enjoyed this book and I appreciate the opportunity to review it.  I am not affiliated with Manning or the authors in any fashion, if that matters.

All in all, the book does what you'd expect, departing real knowledge about LBS applications in today's world.  It's surprising to me how the LBS world is almost completely void of ESRI technology, since I consider ESRI to be the leader in GIS software.  I think this shows how much GIS has changed in the public eye.  Regardless, I recommend reading Building Location-Aware Applications for anyone planning to develop LBS apps or wanting to learn a big picture of LBS app development.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date>2011-02-25 19:46:44</wp:post_date>
		<wp:post_date_gmt>2011-02-25 14:46:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>review-building-location-aware-applications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298661874:3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1298645208]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>tagazine-media</wp:meta_key>
		<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";s:1:"0";s:6:"author";s:7:"3307217";s:7:"blog_id";s:7:"3073262";s:9:"mod_stamp";s:19:"2011-02-25 19:24:31";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>332</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention Review: Building Location-Aware Applications « Fumbling Towards Geekstacy -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/ruprict.net/2011/02/25/review-building-location-aware-applications/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2011-02-25 21:59:06</wp:comment_date>
		<wp:comment_date_gmt>2011-02-25 16:59:06</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Manning Publications, Glenn Goodrich and UK, Alexander Pindarov. Alexander Pindarov said: RT @ManningBooks: GREAT review for Location-Aware Applications. Congrats Ric and Murat http://bit.ly/gGZ1KZ [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>ESRI DevSummit 2011: Daz(zl)ed and Confused</title>
		<link>http://ruprict.net/2011/03/12/esri-devsummit-2011-dazzled-and-confused/</link>
		<pubDate>Fri, 11 Mar 2011 23:05:01 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category domain="tag"><![CDATA[ESRI]]></category>

		<category domain="tag" nicename="esri"><![CDATA[ESRI]]></category>

		<guid isPermaLink="false">http://ruprict.net/?p=321</guid>
		<description></description>
		<content:encoded><![CDATA[As I am flying back to Charlotte from another ESRI DevSummit, my head is awash in a storm of possibility, hope, and worry.  This conference is head-and-shoulders above any other conference on my radar in relevance and utility to my career.  Every year I leave amazed at how far ESRI has come with it's product suite, particularly on the server-side, and every year I feel overwhelmed at what I don't know and what I am not doing.  The ESRI developer community has exploded from a collection of people that couldn't install Tomcat to a sophisticated, intelligent set of technical ninjas.  Watching this change from my perspective has been interesting and extremely humbling, as sometimes I feel like I am a part of something great, and sometimes I feel like I am falling behind.  All things considered, though, it is a great time to be a GIS and ESRI developer.

Reviewing the content of the conference, as i am prone to do each year, I would have to say the overarching theme was mobile, mobile, and more mobile.  Of course, I live on the server, so I didn't give and desktop sessions a second glance.  I focused mostly on the Flex and Javascript APIs, as I simply don't have room in my arsenal for another web API (sorry Silverlight.  I will say that the demo of the week was probably the Kinect map demo given by <a href="http://twitter.com/sharpgis" target="_blank">@SharpGIS</a>.)  The Flex sessions are always great, especially if Mansour Raad is presenting.  His energy and knowledge truly make him unique among presenters.  He showed off Flex "Burrito", which is the code name for the preview release of the next Flex IDE.  Burrito allows a developer to target Blackberry, Android, and (wait for it...) iPhone devices with Flex.  Mansour showed off a few apps running on Android and iOS, which is crazy if you think where Flash on the iPhone was only a year ago.  The maturation of the REST API lead to demonstrations of more sophisticated editing scenarios on the web, making me wonder if the future of ArcMap isn't the Flex Viewer (or other API "viewers")  The javascript team showed similar demos, focusing on iOS (both iPad and iPhone) with HTML 5 goodness.  I really though the drag-and-drop demonstration, which showed a CSV of points being dropped on a web page and added to the map, as well as dropping a map service URL onto the map to add it to the map content, was particularly impressive.  There is a part of me that really thinks HTML 5 is the end game for the web, even if Flex can still do some things that HTML cannot.

One of the items that Mansour and the Flex team showed was a pre-release version of the Flex Viewer Application Builder.  The Builder allows a user to, basically, point and click their way to a Flex Viewer, choosing basemaps, operational layers, and tools/widgets.  The goal is to allow them to avoid having to edit XML and all the pain that comes with doing that.  Being honest, I am not all that excited about such a tool.  Also, I am not sure that showing a "no-need-for-a-developer" tool at a developers summit is really playing well to the demographic.  My guess is that Silverlight and javascript will follow suit, and we'll have many clients feeling they can cut out development shops and live with what ESRI has created.  Expanding on this theme a bit, the very existence of a *supported* viewer from the vendor could be problematic as well.  In my opinion, this can potentially kill innovation around the web APIs.  Why, as a client trying to save money, would I choose to create  a custom web mapping application, when the vendor has a viewer that is supported?  The answer is, in most cases, I wouldn't.  So, as ESRI developers, we will be mostly relegated to viewer configuration or, if we are lucky, custom widget creation.  Plus, the client base of the APIs becomes 99% ESRI supported viewer and 1% demos that no one would really use.  I talked to a few developers about this and opinions varied from what I expressed above to "nah, it'll be OK, there will always be enough GIS development work"  I am not sure what the answer is, as I understand why ESRI created the viewers.  They are doing what they feel is best for their clients.  I can't really fault them for that.  However, I think every year ESRI eats a little bit more into the realm of their business partners, and the effect of that will be seen with ESRI partners having to move to other business or failing outright.

There, enough with the gloom-and-doom.  The mood around the conference was overwhelmingly positive, if not sycophantic.  Coming back, my fellow devs and I are discussing how we are going to get more mobile, more cloudy, and more better.  Despite my aforementioned worries, I am recharged as in previous years.  If you didn't attend the conference, you should watch some of the sessions.  Almost all the ones I attended were excellent.  This includes the user presentations, which I'll review now.

Starting at the bottom of the user presentation barrel, my talk on using jQuery to create a legend for the ArcGIS Server javascript API was OK.  I made some pretty bad slide choices (code on a black background is not the way to go) and I had a couple of clumsy holy-crap-he-just-hit-the-microphone-and-blew-out-my-eardrums moments.  On the positive side, a couple of folks came up afterwards and talked to me about using what I'd done, which is always reassuring.  On the super-fantastic-presentation end of the users, you had the usual suspects for the most part.  The DTS Agile crew (<a href="http://twitter.com/dbouwman" target="_blank">@dbouwman</a> and <a href="http://twitter.com/bnoyle" target="_blank">@bnoyle</a>) gave near perfect presentations on HTML 5, the cloud, and Flex pixel bending.  Kirk van Gork (<a href="http://twitter.com/kvangork" target="_blank">@kvangork</a>) may have stole the show with his presentation on making apps that "Don't Suck", which I did not attend but will be watching this week, for sure.  Another really great presentation was on using MongoDB to create a Feature Cache.  This presentation was done by a (for gawd's sake) 21-yr old Brazilian developer who informed us he had never presented before.  I was thoroughly impressed with this poised and intelligent young man, and you should definitely give that presentation a look.

Well, the plane has started the initial descent into Charlotte.  I am ready to be home and thankful for another wonderful DevSummit.  If you have any questions about sessions or the like, feel free to hit me on Twitter or comment on this post.  Go forth and spread the Word of the GeoNerd.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date>2011-03-12 04:05:01</wp:post_date>
		<wp:post_date_gmt>2011-03-11 23:05:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>esri-devsummit-2011-dazzled-and-confused</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1300117151:3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1299884701]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>382</wp:comment_id>
		<wp:comment_author><![CDATA[Zach]]></wp:comment_author>
		<wp:comment_author_email>smith082@crimson.ua.edu</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>130.160.198.144</wp:comment_author_IP>
		<wp:comment_date>2011-05-24 02:39:46</wp:comment_date>
		<wp:comment_date_gmt>2011-05-23 21:39:46</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks for this post, I'm getting back into the ESRI world after a year off, so this was a great refresher on the latest/greatest. Subscribing.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>347</wp:comment_id>
		<wp:comment_author><![CDATA[odoe]]></wp:comment_author>
		<wp:comment_author_email>odoe@odoe.net</wp:comment_author_email>
		<wp:comment_author_url>http://odoe.net</wp:comment_author_url>
		<wp:comment_author_IP>166.205.139.237</wp:comment_author_IP>
		<wp:comment_date>2011-03-14 20:34:26</wp:comment_date>
		<wp:comment_date_gmt>2011-03-14 15:34:26</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[If my workplace decides to churn out viewer apps, I'll just go full server dev. I wouldn't mind being a widget dev, but I actually find server side stuff a little more interesting anyway.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>348</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2011-03-14 20:41:10</wp:comment_date>
		<wp:comment_date_gmt>2011-03-14 15:41:10</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I think my next post will be on how to create a Flex Widget using Robotlegs.  The widgets that ESRI puts out don't seem to have unit tests, etc., and I like the idea of using something like RL for a widget.

Maybe, if we can convince people that those kinds of practices are worthwhile, we can all stay in business... ;)

(Your point is well-taken, Stephen)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>414</wp:comment_id>
		<wp:comment_author><![CDATA[.Net Follower]]></wp:comment_author>
		<wp:comment_author_email>djgrave@rambler.ru</wp:comment_author_email>
		<wp:comment_author_url>http://dotnetfollower.com</wp:comment_author_url>
		<wp:comment_author_IP>170.121.14.11</wp:comment_author_IP>
		<wp:comment_date>2011-07-16 02:03:00</wp:comment_date>
		<wp:comment_date_gmt>2011-07-15 21:03:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hello!
I've had to implement the same (drag'n'drop functionality) for graphic object using ArcGIS JavaScript API, probably it will be useful for somebody. It's shown in my blog here - <a href="http://dotnetfollower.com/wordpress/2011/07/arcgis-javascript-api-how-to-implement-dragndropping-of-pushpin" rel="nofollow">http://dotnetfollower.com/wordpress/2011/07/arcgis-javascript-api-how-to-implement-dragndropping-of-pushpin/</a>
Thanks!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>345</wp:comment_id>
		<wp:comment_author><![CDATA[Stephen Lead]]></wp:comment_author>
		<wp:comment_author_email>stephen.lead@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://atlas.nsw.gov.au</wp:comment_author_url>
		<wp:comment_author_IP>203.57.8.11</wp:comment_author_IP>
		<wp:comment_date>2011-03-14 03:08:59</wp:comment_date>
		<wp:comment_date_gmt>2011-03-13 22:08:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Excellent summary of the conference.

Re: the viewers taking away work from developers - I think this is a problem that ESRI have always faced when demonstrating server software, and making it appear simple.

Years ago they'd demonstrate how you can have an ArcIMS website running within 2 minutes. Then customers are shocked to find it's actually going to cost $100,000 and take 3 months, if you want to implement it in the real world.

The viewers could prove to be a similar situation - you can get a "website" up and running in 5 minutes, but if you actually want to integrate it with the rest of your enterprise system, it's going to take people like us to make it work.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>341</wp:comment_id>
		<wp:comment_author><![CDATA[Geodatabase]]></wp:comment_author>
		<wp:comment_author_email>jeff@buturff.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>12.130.124.9</wp:comment_author_IP>
		<wp:comment_date>2011-03-12 04:16:05</wp:comment_date>
		<wp:comment_date_gmt>2011-03-11 23:16:05</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Well, on the REALLY bright side, at least you didn't have any kids while you were there.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>342</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>12.130.124.9</wp:comment_author_IP>
		<wp:comment_date>2011-03-12 04:17:31</wp:comment_date>
		<wp:comment_date_gmt>2011-03-11 23:17:31</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I should have marked that comment as spam.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>341</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>349</wp:comment_id>
		<wp:comment_author><![CDATA[ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2011-03-14 20:43:59</wp:comment_date>
		<wp:comment_date_gmt>2011-03-14 15:43:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Well, arguably, the two go hand-in-hand.  If the viewers are the client, they are leveraging a lot of the existing tasks, etc.  YOu may find the REST API eating up a lot of dev on the server as well.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>347</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>350</wp:comment_id>
		<wp:comment_author><![CDATA[Stephen Lead]]></wp:comment_author>
		<wp:comment_author_email>stephen.lead@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://atlas.nsw.gov.au</wp:comment_author_url>
		<wp:comment_author_IP>60.242.199.8</wp:comment_author_IP>
		<wp:comment_date>2011-03-15 00:57:56</wp:comment_date>
		<wp:comment_date_gmt>2011-03-14 19:57:56</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Another idea - draw a pyramid, with the base containing all of the things we know a GIS developer should consider, which the client probably hasn't thought of.

At the tip of the pyramid, put the UI - this is the shiny bit that the user sees, but it won't work without the proper infrastructure underpinning it.

Refer to the viewers as "interactive user interface demo tools" which allow the end-user to mock-up the way they want their application to look.

It's just a more immersive version of them using PowerPoint to design the UI, which we'd later code up in HTML.

They show us the desired UI in the form of the viewer, and it's our job to hook it all together and make it work.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>348</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>GLwidget</title>
		<link>http://ruprict.net/2011/03/17/using-robotlegs-to-create-a-widget-for-the-arcgis-viewer-for-flex/glwidget-2/</link>
		<pubDate>Wed, 16 Mar 2011 13:27:47 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<guid isPermaLink="false">http://ruprict.files.wordpress.com/2011/03/glwidget1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date>2011-03-16 18:27:47</wp:post_date>
		<wp:post_date_gmt>2011-03-16 13:27:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>glwidget-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>328</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ruprict.files.wordpress.com/2011/03/glwidget1.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2011/03/glwidget1.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"328";s:6:"height";s:3:"173";s:14:"hwstring_small";s:23:"height='67' width='128'";s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/65b/3073262/files/2011/03/glwidget1.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Using RobotLegs to Create a Widget for the ArcGIS Viewer for Flex</title>
		<link>http://ruprict.net/2011/03/17/using-robotlegs-to-create-a-widget-for-the-arcgis-viewer-for-flex/</link>
		<pubDate>Wed, 16 Mar 2011 19:16:23 +0000</pubDate>
		<dc:creator><![CDATA[Ruprict]]></dc:creator>
		
		<category><![CDATA[ArcDeveloper]]></category>

		<category domain="category" nicename="arcdeveloper"><![CDATA[ArcDeveloper]]></category>

		<category><![CDATA[Flex]]></category>

		<category domain="category" nicename="flex"><![CDATA[Flex]]></category>

		<guid isPermaLink="false">http://ruprict.net/?p=328</guid>
		<description></description>
		<content:encoded><![CDATA[I submitted two talks to last week's ESRI Developers Summit, one of which was not selected.  This made me indignant enough to write a blog post explaining the shunned presentation, in the hopes that all the people that did not vote for it will slap their foreheads and pray for the invention of time travel.  Or, maybe I just want to dialog on using Robotlegs with the Flex Viewer.

In the Advanced Flex presentation that Bjorn and <a title="Mansour's Blog" href="http://thunderheadxpler.blogspot.com/" target="_blank">Mansour </a>gave at DevSummit, he extolled the use of frameworks.  Paraphrasing, he said "Find a framework and stick with it"  By "framework", he meant something like PureMVC, Cairngorm (3, mind you, not 2), or Robotlegs.  I agree with the sentiment, wholly, although I am also a bit baffled at why the Flex Viewer didn't use one.  My guess is that they will claim they have their own framework, which is certainly true, but it flies in the face of what Mansour spoke of in his presentation.  I raised my hand to ask this question, but (thankfully) time ran out on the questions and I was not selected.  It is probably just as well, as I don't want to get on Mansour's or Bjorn's bad side.  They've both been very helpful to me in the past and I doubt I am even close to beyond needing more of their knowledge.

So, in this blog post, I am going to create a Flex Viewer Widget with Robotlegs.  First, though, I'll explain a couple of things.  The reason I like using Robotlegs (or any well-supported framework) is myriad. It makes my widget much more testable, meaning, I can more easily write unit tests to exercise the widget.  This allows me to design the widget in a test-driven fashion, which is a good thing.  I wonder why the Flex Viewer source doesn't include any unit tests.  Again, it's not like ESRI is promoting bad habits, but they aren't promoting good ones either.  Also, Robotlegs is known outside the ArcGIS world, so future Flex developers on my project that know Robotlegs will be able to get productive more quickly.  Granted, they'll still have to learn about the ArcGIS API for Flex as well as the widget-based approach taken by the Flex Viewer, but the patterns Robotlegs uses brings context to this learning.  That's my story, and I am sticking to it.

So, why Robotlegs?  Because I like it.  It's got a great community and it makes a ton of sense.  Read on to see what I mean.

OK, let's get to the code.
<h2>The Scenario</h2>
The widget we are building today is a Geolocation Widget.  (final product <a title="The Widget" href="http://www.goodrichs.net/flexgeo/" target="_blank">here</a>) It's function is to figure out where the user is and store that location in application, allowing the user to zoom to their location.  It will rely on javascript to do the IP Location search (which we won't get into too much.  Suffice it to say that we're using the HTML 5 Geolocation API for this with a fallback)

Now, I don't really want this post to be an intro to Robotlegs.  There are plenty of those, including a <a href="http://joelhooks.com/2011/03/12/an-introduction-to-robotlegs-as3-part-1-context-and-mediators/" target="_blank">very recent one by Joel Hooks </a>(an RL founding member and crazy-smart guy) Read through those posts (as of this post, there are 3, with more on the way)  It should get you enough background to understand what is going on here.  Go ahead, I'll wait.

Back? Confused? Robotlegs takes a bit to comprehend (not even sure if I totally get it, ahem) So, here are the things you'll need to go through this in your own Flex development environment:
<ul>
	<li>The ArcGIS API for Flex (I am using 2.2)</li>
	<li>Robotlegs (using 1.4 here)</li>
	<li>FlexUnit (4.0.0.2) and related swcs</li>
	<li>AsMock (1.0) with the FlexUnit integration swc</li>
        <li>Robotlegs Modular Utilities (<a href="https://github.com/joelhooks/robotlegs-utilities-Modular" target="_blank">github</a>) <a href="http://www.xxcoder.net/" target="_blank">Stray</a>  (who is brilliant) and Mr. Hooks have written a modular utility for RL, and since our Flex Viewer is modular, we are using it.</li>
      </ul>
      
For simplicity, just grab the git repository <a title="Github repo" href="https://github.com/ruprict/GeolocationWidget" target="_blank">here</a>, which has all this stuff set up for you.  Don't get too hung up on the number of libraries and third party code.  This is how separation of concerns looks, leveraging the best library for a specific function.
<h2>The 'Main' Context</h2>
For those of you that did go read the Robotlegs introductory articles, you know that we have Contexts, Views, Mediators, Commands, and Services.  The context is the first thing we need to sort out, and there is a couple of caveats to our particular situation.  First, the Flex Viewer is not a RL application and, therefore, it does not have a context.  However, we need one, even using the Modular Utility.  In a nutshell, the Application Context is there as a parent context, and will supply the injector to the module contexts (unless you create one explicitly).  So, first thing to do is create the main context:

[sourcecode language="actionscript3"]
import com.esri.viewer.BaseWidget;
import flash.display.DisplayObjectContainer;
import flash.system.ApplicationDomain;
import org.robotlegs.core.IInjector;
import org.robotlegs.utilities.modular.mvcs.ModuleContext;
public class ApplicationContext extends ModuleContext {
	public override function startup():void {
		viewMap.mapType(BaseWidget);
	}
}
[/sourcecode]

In the main application context, we register the BaseWidget class, which will allow Robotlegs to inject any widget going forward.  This makes using Robotlegs a bit more involved than just sticking with the "core" Flex Viewer widget approach, but it's a small price to pay, in my opinion.
<h2>The View</h2>
Since functionality drives the widget, next is the view.  In this scenario. we want the geolocation to be loaded when the widget is first opened.  Once it is found, the location should be displayed and the user can pan to that location as desired.  In my mind's eye, I see a couple of labels and a button.  Also, we have 3 states: <strong>Searching for location</strong>, <strong>location found</strong>, and <strong>location not found</strong>.  I see this:
<img src="http://ruprict.files.wordpress.com/2011/03/glwidget1.png" title="Glenn's Awesome Widget UI" />
We have a feedback area, the location is displayed, and the user can pan whenever they like with the "Go there!" button.  Not gonna win any awards, but it gets the job done.  From looking at our UI, there are a couple of takeaways:  First, the location is loaded automatically, which means it happens when the user opens the widget.  Second, we can start to think about our states and what is visible for each state.  Finally, something has to handle user pressing that button.  In RL, it's the job of the Mediator to handle view events, so this is what ours looks like:

[sourcecode language="actionscript3"]
public class GeolocationWidgetMediator extends ModuleMediator
{
  [Inject]
  public var location:IGeolocation;
	
  [Inject]
  public var widget:GeolocationWidget;
	
  override public function onRegister():void{
    eventMap.mapListener(widget.btnGoThere, MouseEvent.CLICK, handleGoThere);
    //Could also use this, but then you have to figure out the target.
    //this.addViewListener(MouseEvent.CLICK, handleGoThere);
    this.addContextListener(GeolocationEvent.LOCATION_FOUND, handleLocationFound);
    widget.currentState = GeolocationWidget.STATE_SEARCHING_FOR_LOCATION;
    getLocation();
  }
  private function handleGoThere(event:MouseEvent):void{ 
    var point:MapPoint = com.esri.ags.utils.WebMercatorUtil.geographicToWebMercator(new MapPoint(location.x,location.y)) as MapPoint;
    widget.map.centerAt(point);
    addGraphic(point);
  }
  private function getLocation():void{
    //Find yourself
    dispatch(new GeolocationEvent(GeolocationEvent.GET_LOCATION));
  }
}	
[/sourcecode]
<p>When the Mediator is registered, we map the button click event to handleGoThere(), which simply zooms to our location.  But wait, where did that location come from?  
  <h2>The Model</h2>
  The location object is our Model and is of type IGeolocation (I used an interface for the model here, and now I kinda wish I hadn't...oh well)  We know it needs x/y coordinates, so we'll make a model object that fulfills our requirement:</p>
[sourcecode language="actionscript3"]
public class Geolocation implements IGeolocation
{
  private var _x:Number;
  private var _y:Number;
                  
  public function get x():Number{
    return _x;
  }
  public function get y():Number{
    return _y;
  }
  public function Geolocation(x:Number=0.00,y:Number=0.00)
  {
    _x = x;
    _y = y;
  }
}
[/sourcecode]
<p>
  There, now we have a model that is injected into our mediator.  The model is a singleton (not a Singleton, it's managed by RL) so that anything that cares about changes to the model can just have it injected and they're always up to date.  MMMM....that feels good.  When we look at our module context, you'll see how to make the model a singleton (we do it with services too!)  For now, we're still talking about the mediator.  The getLocation() method fires off a GeolocationEvent, which we need to 'splain.
</p>
<h2>Events</h2>
<p>
  The Mediator takes view/framework events and translates them into Business Events.  In this case, the loading of the widget is translated into a go-get-our-geolocation event, which we call GeolocationEvent.GET_LOCATION. 
</p>
[sourcecode language="actionscript3"]
public class GeolocationEvent extends Event
{
  public static const LOCATION_FOUND:String = &quot;locationFound&quot;;
  public static const LOCATION_NOT_FOUND:String = &quot;locationNotFound&quot;;
  public static const GET_LOCATION:String = &quot;getGeolocation&quot;;
  public var location:IGeolocation;
                  
  public function GeolocationEvent(type:String)
  {
    super(type);
  }
  override public function clone():Event{
    return new GeolocationEvent(type);
  }
}

[/sourcecode]
<p>
  Nothing special about events in RL, which is GOOD.  Our GeolocationEvent has a payload of our location model, and it handles a few event types.  We know when getGeolocation happens, the other two events are in response to finding out geolocation.  We'll talk a bit about those when we get to the service.  For now, something has to respond to our GeolocationEvent.GET_LOCATION
</p>
<h2>Commands</h2>
<p>
  In RL, you handle business events with Commands.  Commands are responsible for answering the question raised by the event, either by going outside the application (when they talk to services) or by some other means.  In our case, we'll make a GeolocationCommand that calls some service to get our geolocation.
</p>
[sourcecode language="actionscript3"]
public class GetGeolocationCommand extends Command
{
  [Inject]
  public var service:IGeolocationService;

  [Inject]
  public var event:GeolocationEvent;
                  
  override public function execute():void{
    service.getGeolocation();
  }
}

[/sourcecode]
<p>
  About the simplest command you can possibly have.  Also, note how RL is helping us flush out our needs while guiding us in using best practices.  What have you done for RL lately?  Yet it still guides you on the path of rightgeousness.  Let's discuss that IGeolocationService.
</p>
<h2>Services</h2>
<p>
  The 'S' in MVCS.  Services are our gateway to what lies beyond.  When we need to go outside the app for data, we ask a service to do that.  In this case, our service is going to ask the HTML5 Geolocation API for our current location.  This means, basically, that we call out using ExternalInterface and define a couple of callbacks so we can handle whatever the service returns.
</p>
[sourcecode language="actionscript3"]
public class GeolocationService extends Actor implements IGeolocationService
{
  public function GeolocationService()
  {
    ExternalInterface.addCallback(&quot;handleLocationFound&quot;,handleLocationFound);
    ExternalInterface.addCallback(&quot;handleLocationNotFound&quot;,handleLocationNotFound);
  } 
  public function getGeolocation():void
  {
    ExternalInterface.call(&quot;esiGeo.getGeolocation&quot;);
  }
  public function handleLocationFound(x:Number, y:Number):void{
    var location:Geolocation = new Geolocation(x,y);
    var event:GeolocationEvent = new GeolocationEvent(GeolocationEvent.LOCATION_FOUND);
    event.location = location;
    dispatch(event);
  }
                  
  public function handleLocationNotFound():void{
    var event:GeolocationEvent = new GeolocationEvent(GeolocationEvent.LOCATION_NOT_FOUND);
    dispatch(event);
  }
}

[/sourcecode]
<p>
  Notice that our service extends the Actor class, which is an RL class that (basically) gives us access to EventDispatcher.  The service will fire events (as you see above) when it gets back results from the beyond.
</p>
<p>
  Something has to handle the events thrown by the service.  We want these results to show up in our view, which means, we want these results to change our model.  Back to the Mediator.
</p>
<h2>The Circle of RL</h2>
<p>
  Back in the GelocationWidgetMediator, we can subscribe to the events raised by the service.  As a side note, you really have a couple of options here.  If your data is more complex than an x/y pair, you'll likely want to parse it before it gets to the mediator.  At this point, I would recommend you look at Joel's posts and, for something super cool and useful, the <a href="https://github.com/darscan/robotlegs-extensions-Oil" target="_blank">Robotlegs Oil extensions.</a>  I will likely blog about Oil in the future.  You could also create a presentaion model, inject it into the view and data bind to the model objects on the PM.  I am doing it the simplest way because my scenario is simple.  Anyway, back to the mediator and handling the events raised by the service.  You subscribe to context events in the same onRegister() function that you subscribe to view events.
</p>
[sourcecode language="actionscript3"]
override public function onRegister():void{
  eventMap.mapListener(widget.btnGoThere, MouseEvent.CLICK, handleGoThere);
  //Could also use this, but then you have to figure out the target.
  //this.addViewListener(MouseEvent.CLICK, handleGoThere);
  this.addContextListener(GeolocationEvent.LOCATION_FOUND, handleLocationFound);
  this.addContextListener(GeolocationEvent.LOCATION_NOT_FOUND, handleLocationNotFound);

  widget.currentState = GeolocationWidget.STATE_SEARCHING_FOR_LOCATION;
  getLocation();
}

public function handleLocationNotFound(event:GeolocationEvent):void{
  widget.currentState = GeolocationWidget.STATE_LOCATION_NOT_FOUND;
}

[/sourcecode]
<p>
We saw handleLocationFound() above, here I added the handling of the not found scenario.  All it does is set the state to the "not found" state, which hides buttons/labels/whatever.    
</p>
<h2>The Context</h2>
<p>
  As I mentioned earlier, the module needs its own module context.  The context's job is to wire everyting up.  Our mediator is mapped to its view, events to commands, and the services our registered.  Also, the items that will be injected to the various players (like the model and the service) are specified.  
</p>
[sourcecode language="actionscript3"]
public class GeolocationWidgetContext extends ModuleContext
{
  public function GeolocationWidgetContext(contextView:DisplayObjectContainer, injector:IInjector){
    super(contextView, true, injector, ApplicationDomain.currentDomain);
  }

  override public function startup():void{
    //Singletons
    injector.mapSingletonOf(IGeolocationService, GeolocationService);
    injector.mapSingletonOf(IGeolocation,Geolocation);
                            
    //Mediators
    mediatorMap.mapView(GeolocationWidget, GeolocationWidgetMediator);

    //Commands
    commandMap.mapEvent(GeolocationEvent.GET_LOCATION, GetGeolocationCommand,GeolocationEvent);
    commandMap.mapEvent(GeolocationEvent.LOCATION_FOUND, FindPolygonCommand, GeolocationEvent);
  }
}

[/sourcecode]
<p>
  Our context extends ModuleContext, which is supplied by the Robotlegs Modular Utilities.  The ModuleContext creates a ModuleEventDispathcher and ModuleCommandMap, and is basically (as Joel states <a href="http://joelhooks.com/2010/05/02/modular-robotlegs/" target="_blank">here</a>) just a convenience mechanism.  Since we are in a module, there is one last little item we have to do to make this all come together.  Our module should (read: needs to) implement the org.robotlegs.utilities.modular.core.IModule interface.  This defines two functions (a setter for parentInjector and a dispose() method) that ensures the API to initialize the module and RL is in place.  So, in the script of the MXML, you have:
</p>
[sourcecode language="actionscript3"]
[Inject]
public function set parentInjector(value:IInjector):void{
  context = new GeolocationWidgetContext(this,value);
}
//Cleanup the context
public function	dispose():void{
  context.dispose();
  context=null;
}
[/sourcecode]
<p>
  The set parentInjector allows us to create a child injector as well as use mappings from the main context. Read Joel's post on Modular stuff for more detail.  The dispose() function is just good practice, allowing you to free up anything you need to free up.  The <em>mapSingletonOf</em> calls are how you tell RL to just make one of these things.  Above the Geolocation model object is made a singleton, so the mediator and the command get the same copy.  In a more complex widget, you could data bind to that bad boy and anything that changes it shows up in the view without any code.  That...howyousay?...rocks!
</p>
<p>
  That really covers the meat of creating a Flex Widget for the ArcGIS Viewer for Flex using Robotlegs.  As I mentioned, this was submitted to the Flex-a-Widget challenge at the Developers Summit and did not place.  The winners (which, to be honest, I voted for) did things display Street View and Bing 3D and windows into your friggin' soul in the Flex Viewer, so you can see why this simple-to-the-point-of-being-useless widget did not place.  Still the guts of this widget are pretty sexy, and now  hopefully you can build your own soul-displaying widgets using Robotlegs.
</p>
<p>The code on github has a few items that I didn't think pertinent to this blog, like unit tests (which are VERY important and a BIG reason why using something like RL is crucial)  Also, the source has another sequence of taking the point and finding the county where the user is currently, just for fun.  I hope you found this useful.  If I messed anything up or got something wrong, please let me know in the comments.  Much of the reason I do blog posts like this one is to confirm that things are what I think the are.  I have (frequently) been wrong before, so correct me if you see an error.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date>2011-03-17 00:16:23</wp:post_date>
		<wp:post_date_gmt>2011-03-16 19:16:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-robotlegs-to-create-a-widget-for-the-arcgis-viewer-for-flex</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1300316029:3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[3307217]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>email_notification</wp:meta_key>
		<wp:meta_value><![CDATA[1300302985]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1300302983]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>351</wp:comment_id>
		<wp:comment_author><![CDATA[Stray]]></wp:comment_author>
		<wp:comment_author_email>dailystraying@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.xxcoder.net</wp:comment_author_url>
		<wp:comment_author_IP>86.141.49.4</wp:comment_author_IP>
		<wp:comment_date>2011-03-17 01:39:54</wp:comment_date>
		<wp:comment_date_gmt>2011-03-16 20:39:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Nice Job! I haven't been through all the code in detail yet, but this looks great so far - this line is just such a great summary of how it works: "The mapSingletonOf calls are how you tell RL to just make one of these things."

I like it!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>352</wp:comment_id>
		<wp:comment_author><![CDATA[Ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>99.36.188.175</wp:comment_author_IP>
		<wp:comment_date>2011-03-17 01:55:25</wp:comment_date>
		<wp:comment_date_gmt>2011-03-16 20:55:25</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks, Stray.  I plan on pulling in Signals (and your Mapped Signals) at some point.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>351</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>420</wp:comment_id>
		<wp:comment_author><![CDATA[Phil Penn]]></wp:comment_author>
		<wp:comment_author_email>philip_penn@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>70.36.140.158</wp:comment_author_IP>
		<wp:comment_date>2011-07-23 00:38:15</wp:comment_date>
		<wp:comment_date_gmt>2011-07-22 19:38:15</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Excellent work, rupes.

One thing I can't seem to do is run the Unit Tests, using FB 4.5. If I right-click and "Execute FlexUnit Tests" I get the following error:

This project does not have the required method "initializationError".

Any kluze?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>425</wp:comment_id>
		<wp:comment_author><![CDATA[Ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.68.55.18</wp:comment_author_IP>
		<wp:comment_date>2011-07-26 18:16:41</wp:comment_date>
		<wp:comment_date_gmt>2011-07-26 13:16:41</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Oh, and I had to change the way the mocks are created using ASMock, as per <a href="http://asmock.sourceforge.net/wiki/Installation#FlexUnit_4.1" rel="nofollow">this page</a>. So, replace the [Mocks] with [Rules].  THEN you get the BRAND NEW error.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>424</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>424</wp:comment_id>
		<wp:comment_author><![CDATA[Ruprict]]></wp:comment_author>
		<wp:comment_author_email>glenn@goodrichs.net</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.68.55.18</wp:comment_author_IP>
		<wp:comment_date>2011-07-26 18:13:27</wp:comment_date>
		<wp:comment_date_gmt>2011-07-26 13:13:27</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Phil, Flash Builder 4.5 ships with FlexUnit (as did FB 4), but the ASMock integration bits don't seem to be down with the version used in 4.5.  So, I added the 4.1 integration swc from the <a href="http://asmock.sourceforge.net/download/" rel="nofollow">ASMock download</a>, and removed all other FlexUnit swcs from the libs dir. After that, the initializationError is no more, and you get a BRAND NEW error.  However, the new error is b/c a test is failing...I'll leave it as an exercise for the reader to fix.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>420</wp:comment_parent>
		<wp:comment_user_id>3307217</wp:comment_user_id>
		</wp:comment>
			</item>
	</channel>
</rss>
